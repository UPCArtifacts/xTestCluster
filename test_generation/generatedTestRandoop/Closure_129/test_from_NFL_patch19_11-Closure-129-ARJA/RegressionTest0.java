import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) ' ', node1, node2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        int int0 = com.google.javascript.rhino.Node.IS_CONSTANT_NAME;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 43 + "'", int0 == 43);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node2 = null;
        com.google.javascript.rhino.Node node3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(43, node1, node2, node3, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        int int0 = com.google.javascript.rhino.Node.INCRDECR_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 32 + "'", int0 == 32);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        int int0 = com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        int int0 = com.google.javascript.rhino.Node.SLASH_V;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 54 + "'", int0 == 54);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        int int0 = com.google.javascript.rhino.Node.FLAG_NO_THROWS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        int int0 = com.google.javascript.rhino.Node.INPUT_ID;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 53 + "'", int0 == 53);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        int int0 = com.google.javascript.rhino.Node.DIRECTIVES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 48 + "'", int0 == 48);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = node6.copyInformationFrom(node10);
        boolean boolean12 = node10.isStringKey();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node22 = node10.srcrefTree(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        node45.addSuppression("hi!");
        boolean boolean48 = node36.isEquivalentTo(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] { node21, node30, node45, node56 };
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) '#', nodeArray58);
        boolean boolean60 = node59.isCall();
        int int61 = node59.getSourcePosition();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        boolean boolean71 = node69.isStringKey();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        com.google.javascript.rhino.Node node81 = node69.srcrefTree(node80);
        node81.detachChildren();
        double double83 = node81.getDouble();
        com.google.javascript.rhino.Node node84 = node59.srcref(node81);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) 'a', node1, node81, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        int int0 = com.google.javascript.rhino.Node.COLUMN_MASK;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4095 + "'", int0 == 4095);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        int int0 = com.google.javascript.rhino.Node.STATIC_SOURCE_FILE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 51 + "'", int0 == 51);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        int int0 = com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 38 + "'", int0 == 38);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        int int0 = com.google.javascript.rhino.Node.INFERRED_FUNCTION;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 55 + "'", int0 == 55);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        int int0 = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        int int0 = com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 31 + "'", int0 == 31);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = node8.isEquivalentToShallow(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        int int0 = com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16 + "'", int0 == 16);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        boolean boolean40 = node38.isStringKey();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        node53.addSuppression("hi!");
        boolean boolean56 = node44.isEquivalentTo(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] { node29, node38, node53, node64 };
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) '#', nodeArray66);
        boolean boolean68 = node67.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = node72.copyInformationFrom(node76);
        com.google.javascript.rhino.Node node78 = node77.getLastSibling();
        java.lang.String str79 = node77.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildrenAfter(node67, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("NUMBER 0.0 [var_args_name: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        int int0 = com.google.javascript.rhino.Node.LENGTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 52 + "'", int0 == 52);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        int int0 = com.google.javascript.rhino.Node.IS_NAMESPACE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 46 + "'", int0 == 46);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        // The following exception was thrown during execution in test generation
        try {
            node7.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        int int0 = com.google.javascript.rhino.Node.ORIGINALNAME_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 40 + "'", int0 == 40);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean4 = node3.isFor();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node36 = node35.getLastSibling();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        node49.addSuppression("hi!");
        boolean boolean52 = node40.isEquivalentTo(node49);
        boolean boolean53 = node40.isDelProp();
        boolean boolean54 = node40.isDo();
        java.lang.Object obj56 = node40.getProp(55);
        int int58 = node40.getIntProp(38);
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildrenAfter(node35, node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node12.setSideEffectFlags(sideEffectFlags19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        boolean boolean25 = node23.isStringKey();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node35 = node23.srcrefTree(node34);
        boolean boolean36 = node34.isCatch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        node49.addSuppression("hi!");
        boolean boolean52 = node40.isEquivalentTo(node49);
        boolean boolean53 = node40.isCase();
        boolean boolean54 = node40.isCast();
        com.google.javascript.rhino.Node node55 = node34.srcrefTree(node40);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable56 = node40.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node57 = node8.removeChildAfter(node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(ancestorIterable56);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        int int0 = com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node19.isCatch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        node34.addSuppression("hi!");
        boolean boolean37 = node25.isEquivalentTo(node34);
        boolean boolean38 = node25.isCase();
        boolean boolean39 = node25.isCast();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node25);
        com.google.javascript.rhino.Node node41 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        boolean boolean51 = node50.isAssignAdd();
        boolean boolean52 = node50.isTrue();
        boolean boolean53 = node50.isInstanceOf();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        boolean boolean63 = node61.isStringKey();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node73 = node61.srcrefTree(node72);
        int int74 = node73.getLineno();
        com.google.javascript.rhino.Node node76 = node73.getAncestor(43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(1, node19, node41, node50, node73, 43, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(node76);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        int int0 = com.google.javascript.rhino.Node.DECR_FLAG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        int int0 = com.google.javascript.rhino.Node.COLUMN_BITS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 12 + "'", int0 == 12);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        int int0 = com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        int int0 = com.google.javascript.rhino.Node.CHANGE_TIME;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 56 + "'", int0 == 56);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        int int0 = com.google.javascript.rhino.Node.EMPTY_BLOCK;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 39 + "'", int0 == 39);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node22 = node21.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(55, node10, node22, 10, 56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node11 = node8.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = node8.getExistingIntProp(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        int int0 = com.google.javascript.rhino.Node.LAST_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 56 + "'", int0 == 56);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node68.isAssignAdd();
        boolean boolean70 = node68.isGetProp();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        // The following exception was thrown during execution in test generation
        try {
            node57.addChildBefore(node68, node78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        int int0 = com.google.javascript.rhino.Node.QUOTED_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 36 + "'", int0 == 36);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node26.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node37);
        boolean boolean39 = node38.isScript();
        boolean boolean40 = node38.isBreak();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        boolean boolean61 = node60.isScript();
        com.google.javascript.rhino.Node node62 = node38.useSourceInfoFrom(node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        boolean boolean72 = node70.isStringKey();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = node76.copyInformationFrom(node80);
        com.google.javascript.rhino.Node node82 = node70.srcrefTree(node81);
        boolean boolean83 = node81.isCatch();
        boolean boolean84 = node62.isEquivalentToTyped(node81);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = node12.removeChildAfter(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        com.google.javascript.rhino.Node node15 = node9.getAncestor((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = node15.isTry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        int int0 = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 15 + "'", int0 == 15);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        com.google.javascript.rhino.Node node17 = node8.getAncestor((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            node17.setIsSyntheticBlock(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        boolean boolean60 = node57.isEmpty();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node68.isStringKey();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        com.google.javascript.rhino.Node node80 = node68.srcrefTree(node79);
        int int81 = node80.getLineno();
        com.google.javascript.rhino.Node node83 = node80.getAncestor(43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node84 = node57.useSourceInfoIfMissingFrom(node83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isDelProp();
        boolean boolean17 = node3.isDo();
        java.lang.Object obj19 = node3.getProp(55);
        int int21 = node3.getIntProp(38);
        boolean boolean22 = node3.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(32);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node9.appendStringTree(appendable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        com.google.javascript.rhino.Node node15 = node9.getAncestor((int) '4');
        boolean boolean16 = node9.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = node19.getExistingIntProp((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 35");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        int int0 = com.google.javascript.rhino.Node.DIRECT_EVAL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 49 + "'", int0 == 49);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = node8.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str10 = node8.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node12.isAssignAdd();
        boolean boolean14 = node12.isTrue();
        double double15 = node12.getDouble();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildAfter(node12, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        com.google.javascript.rhino.Node node83 = node79.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = node79.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING NUMBER 0.0 [var_args_name: 1] 56 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        int int0 = com.google.javascript.rhino.Node.OPT_ARG_NAME;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 37 + "'", int0 == 37);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node79.isSetterDef();
        boolean boolean84 = node79.isNot();
        boolean boolean85 = node79.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node8.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', node8);
        boolean boolean23 = node8.isOnlyModifiesThisCall();
        boolean boolean24 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        boolean boolean35 = node34.isAssignAdd();
        boolean boolean36 = node34.isGetProp();
        java.lang.String str37 = node34.toStringTree();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        node50.addSuppression("hi!");
        boolean boolean53 = node41.isEquivalentTo(node50);
        node41.setDouble(1.0d);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        int int65 = node64.getChangeTime();
        boolean boolean66 = node64.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = node70.copyInformationFrom(node74);
        int int76 = node75.getChangeTime();
        boolean boolean77 = node75.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100, node34, node41, node64, node75);
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildToFront(node75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 0.0\n" + "'", str37, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node19.setSideEffectFlags(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        int int0 = com.google.javascript.rhino.Node.FREE_CALL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 50 + "'", int0 == 50);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        java.lang.Appendable appendable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            node8.appendStringTree(appendable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        // The following exception was thrown during execution in test generation
        try {
            node39.setSideEffectFlags((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        int int21 = node19.getCharno();
        boolean boolean22 = node19.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            node19.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        java.lang.Class<?> wildcardClass14 = node9.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        com.google.javascript.rhino.Node node15 = node9.getAncestor((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int16 = node15.getCharno();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node20, node29, node44, node55 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', nodeArray57);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = node12.isEquivalentToShallow(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node22 = node20.getAncestor((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = node22.isQualifiedName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        int int0 = com.google.javascript.rhino.Node.VAR_ARGS_NAME;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 30 + "'", int0 == 30);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        boolean boolean22 = node19.isComma();
        com.google.javascript.rhino.Node node23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = node19.isEquivalentToTyped(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node19.isAssignAdd();
        boolean boolean21 = node19.isGetProp();
        java.lang.String str22 = node19.toStringTree();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        node35.addSuppression("hi!");
        boolean boolean38 = node26.isEquivalentTo(node35);
        node26.setDouble(1.0d);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        int int50 = node49.getChangeTime();
        boolean boolean51 = node49.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        int int61 = node60.getChangeTime();
        boolean boolean62 = node60.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100, node19, node26, node49, node60);
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildToFront(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 0.0\n" + "'", str22, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        int int0 = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4095 + "'", int0 == 4095);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node22 = node20.getAncestor((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = node22.isAssign();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.setLineno((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        node30.addSuppression("hi!");
        boolean boolean33 = node21.isEquivalentTo(node30);
        boolean boolean34 = node21.isArrayLit();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        boolean boolean45 = node44.isAssignAdd();
        boolean boolean46 = node44.isGetProp();
        java.lang.String str47 = node44.toStringTree();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        node60.addSuppression("hi!");
        boolean boolean63 = node51.isEquivalentTo(node60);
        node51.setDouble(1.0d);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        int int75 = node74.getChangeTime();
        boolean boolean76 = node74.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node85 = node80.copyInformationFrom(node84);
        int int86 = node85.getChangeTime();
        boolean boolean87 = node85.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(100, node44, node51, node74, node85);
        // The following exception was thrown during execution in test generation
        try {
            node12.addChildrenAfter(node21, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 0.0\n" + "'", str47, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        int int21 = node19.getCharno();
        boolean boolean22 = node19.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node11 = node8.cloneTree();
        com.google.javascript.rhino.InputId inputId12 = node8.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(inputId12);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        boolean boolean18 = node3.isAssignAdd();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        boolean boolean12 = node8.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        node8.setLineno(0);
        com.google.javascript.rhino.Node node18 = node8.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = node18.isTry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        node19.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node11.isStringKey();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node22);
        boolean boolean24 = node23.isScript();
        boolean boolean25 = node23.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node23.addChildToFront(node29);
        com.google.javascript.rhino.Node node31 = node3.copyInformationFrom(node29);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node3.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node4.isQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            node4.setString("NUMBER 0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        node4.addChildrenToBack(node20);
        node20.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        boolean boolean51 = node49.isStringKey();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        com.google.javascript.rhino.Node node61 = node49.srcrefTree(node60);
        int int62 = node61.getLineno();
        com.google.javascript.rhino.Node node64 = node61.getAncestor(43);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node74 = node73.getLastSibling();
        java.lang.String str75 = node73.getSourceFileName();
        boolean boolean76 = node73.isCall();
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] { node20, node64, node73 };
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(32, nodeArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(nodeArray77);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(0, nodeArray1, 52, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        boolean boolean22 = node20.isCatch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        node35.addSuppression("hi!");
        boolean boolean38 = node26.isEquivalentTo(node35);
        boolean boolean39 = node26.isCase();
        boolean boolean40 = node26.isCast();
        com.google.javascript.rhino.Node node41 = node20.srcrefTree(node26);
        com.google.javascript.rhino.Node node42 = null;
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node47 = node46.cloneTree();
        boolean boolean48 = node46.isFunction();
        boolean boolean49 = node46.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node1, node41, node42, node46, 4095, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isSwitch();
        com.google.javascript.rhino.Node node19 = node3.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        java.lang.String[] strArray13 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet14);
        int int17 = node8.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node18 = node8.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.setCharno((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int57 = node9.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node33 = node12.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = node33.isFunction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        int int21 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 1, 100);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node25.getAncestors();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        com.google.javascript.rhino.Node node43 = node30.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node19.replaceChildAfter(node25, node43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isStringKey();
        node8.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        boolean boolean19 = node12.isHook();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = node12.getExistingIntProp(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        // The following exception was thrown during execution in test generation
        try {
            node29.setString("NUMBER 0.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            node18.removeChild(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node16 = node3.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = node16.isTry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        java.lang.String str5 = node1.toString(true, false, true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "BITXOR" + "'", str5, "BITXOR");
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        int int0 = com.google.javascript.rhino.Node.POST_FLAG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node14.cloneTree();
        boolean boolean16 = node14.isFunction();
        boolean boolean17 = node14.isRegExp();
        node8.addChildToBack(node14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        int int83 = node79.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        node57.setCharno((int) '#');
        com.google.javascript.rhino.InputId inputId61 = null;
        node57.setInputId(inputId61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        int int73 = node72.getSourcePosition();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(50, node72);
        // The following exception was thrown during execution in test generation
        try {
            node57.addChildToFront(node72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isNew();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node11 = node8.cloneTree();
        java.lang.String str12 = node8.toString();
        java.lang.String str16 = node8.toString(false, true, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0" + "'", str12, "NUMBER 0.0");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 0.0" + "'", str16, "NUMBER 0.0");
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node11 = node8.cloneTree();
        boolean boolean12 = node11.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setThrows();
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = node4.isWith();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node40 = node28.srcrefTree(node39);
        com.google.javascript.rhino.Node node41 = node40.cloneNode();
        boolean boolean42 = node40.isLabelName();
        boolean boolean43 = node40.isName();
        boolean boolean44 = node40.isVarArgs();
        boolean boolean45 = node40.isCase();
        boolean boolean46 = node40.isVar();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node54.isStringKey();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node66 = node54.srcrefTree(node65);
        com.google.javascript.rhino.Node node67 = node66.cloneNode();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = node71.copyInformationFrom(node75);
        boolean boolean77 = node67.hasChild(node71);
        com.google.javascript.rhino.Node node78 = node71.getFirstChild();
        boolean boolean79 = node71.isDec();
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildAfter(node40, node71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isDelProp();
        boolean boolean17 = node3.isDo();
        java.lang.Object obj19 = node3.getProp(55);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags21 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 1, 100);
        boolean boolean5 = node4.isInstanceOf();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        boolean boolean15 = node13.isStringKey();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node25 = node13.srcrefTree(node24);
        boolean boolean26 = node24.isCatch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        int int36 = node35.getChangeTime();
        boolean boolean37 = node35.hasMoreThanOneChild();
        java.lang.String str38 = node24.checkTreeEquals(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        int int48 = node47.getChangeTime();
        node47.setVarArgs(true);
        java.lang.String str54 = node47.toString(false, true, true);
        com.google.javascript.rhino.Node node55 = node24.copyInformationFromForTree(node47);
        node47.setLength(2);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node node68 = node67.getLastSibling();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100, node67);
        int int71 = node67.getIntProp(31);
        com.google.javascript.rhino.jstype.JSType jSType72 = null;
        node67.setJSType(jSType72);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = node77.copyInformationFrom(node81);
        boolean boolean83 = node82.isAssignAdd();
        java.lang.String[] strArray87 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet88 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        node82.setDirectives((java.util.Set<java.lang.String>) strSet88);
        boolean boolean91 = node82.isContinue();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((-1), node4, node47, node67, node82, 12, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str54, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node7.getJsDocBuilderForNode();
        fileLevelJsDocBuilder20.append("");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        int int65 = node64.getSourcePosition();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(50, node64);
        boolean boolean67 = node64.isBreak();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = node71.copyInformationFrom(node75);
        node76.addSuppression("hi!");
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        node76.setDirectives((java.util.Set<java.lang.String>) strSet81);
        boolean boolean84 = node76.isCase();
        // The following exception was thrown during execution in test generation
        try {
            node9.addChildrenAfter(node64, node76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        node8.setCharno((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            node8.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        boolean boolean21 = node19.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node33 = node12.getFirstChild();
        int int34 = node12.getChangeTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = node12.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: GETELEM [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node11 = node7.getParent();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = node11.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean4 = node3.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node24.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor41 = ancestorIterable40.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor42 = ancestorIterable40.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor43 = ancestorIterable40.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(nodeItor41);
        org.junit.Assert.assertNotNull(nodeItor42);
        org.junit.Assert.assertNotNull(nodeItor43);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node11.isStringKey();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node22);
        boolean boolean24 = node23.isScript();
        boolean boolean25 = node23.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node23.addChildToFront(node29);
        com.google.javascript.rhino.Node node31 = node3.copyInformationFrom(node29);
        boolean boolean32 = node29.isDo();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags5.setMutatesArguments();
        sideEffectFlags5.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        node8.setSourceEncodedPositionForTree(48);
        java.lang.Class<?> wildcardClass14 = node8.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        java.lang.String str11 = node8.toStringTree();
        int int12 = node8.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 0.0\n" + "'", str11, "NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        boolean boolean16 = node9.wasEmptyNode();
        node9.setOptionalArg(true);
        boolean boolean19 = node9.isString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        node84.setWasEmptyNode(false);
        node84.addSuppression("BITXOR");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        boolean boolean19 = node12.isHook();
        boolean boolean20 = node12.isString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = node12.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 1, "Node tree inequality:\nTree1:\nGETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node31 = node24.getFirstChild();
        boolean boolean32 = node24.isDec();
        boolean boolean33 = node24.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(51, nodeArray1, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nGETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n", 55, 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        boolean boolean66 = node62.isVarArgs();
        node62.setCharno(55);
        java.lang.String str69 = node62.getSourceFileName();
        boolean boolean70 = node62.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        boolean boolean25 = node19.isVar();
        com.google.javascript.rhino.Node node26 = node19.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = node26.isCast();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        boolean boolean40 = node18.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isDelProp();
        boolean boolean17 = node3.isDo();
        java.lang.Object obj19 = node3.getProp(55);
        int int21 = node3.getIntProp(38);
        boolean boolean22 = node3.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        boolean boolean11 = node8.isThrow();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        boolean boolean70 = node69.isCall();
        int int71 = node69.getSourcePosition();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = node85.copyInformationFrom(node89);
        com.google.javascript.rhino.Node node91 = node79.srcrefTree(node90);
        node91.detachChildren();
        double double93 = node91.getDouble();
        com.google.javascript.rhino.Node node94 = node69.srcref(node91);
        node69.removeProp((int) (short) -1);
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node69);
        boolean boolean98 = node69.isParamList();
        // The following exception was thrown during execution in test generation
        try {
            node69.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        int int60 = node57.getLength();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node61 = node57.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node20, node29, node44, node55 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', nodeArray57);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) 'a', nodeArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        node8.setDouble((double) 12);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node20, node29, node44, node55 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', nodeArray57);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(46, nodeArray57, 36, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        int int0 = com.google.javascript.rhino.Node.IS_DISPATCHER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 47 + "'", int0 == 47);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node9.getJSDocInfo();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        node64.addSuppression("hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet69);
        boolean boolean73 = node64.getBooleanProp((int) '4');
        node64.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = node9.removeChildAfter(node64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        com.google.javascript.rhino.Node node4 = node3.getFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        com.google.javascript.rhino.Node node10 = node3.copyInformationFromForTree(node9);
        // The following exception was thrown during execution in test generation
        try {
            node10.setSideEffectFlags(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node8.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        node31.addSuppression("hi!");
        boolean boolean34 = node22.isEquivalentTo(node31);
        boolean boolean35 = node22.isCase();
        boolean boolean36 = node22.isCast();
        int int37 = node22.getSideEffectFlags();
        boolean boolean38 = node22.isNew();
        node8.putProp(1, (java.lang.Object) boolean38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        boolean boolean66 = node62.isVarArgs();
        boolean boolean67 = node62.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node62.getStaticSourceFile();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = node72.copyInformationFrom(node76);
        boolean boolean78 = node76.isStringKey();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node87 = node82.copyInformationFrom(node86);
        com.google.javascript.rhino.Node node88 = node76.srcrefTree(node87);
        com.google.javascript.rhino.Node node89 = node88.cloneNode();
        com.google.javascript.rhino.Node node91 = node89.getAncestor((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node92 = node62.srcrefTree(node91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        boolean boolean27 = node19.isDec();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        boolean boolean38 = node36.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node48.getLastSibling();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100, node48);
        int int52 = node48.getIntProp(31);
        boolean boolean53 = node48.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildrenAfter(node36, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isAnd();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        node62.putBooleanProp((int) (short) 10, true);
        boolean boolean69 = node62.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        boolean boolean61 = node57.isBreak();
        node57.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node72);
        int int74 = node73.getChangeTime();
        boolean boolean75 = node73.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean80 = node73.hasChild(node79);
        java.lang.String str81 = node57.checkTreeEquals(node79);
        com.google.javascript.rhino.Node node82 = node57.removeFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Node tree inequality:\nTree1:\nGETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n" + "'", str81, "Node tree inequality:\nTree1:\nGETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str13 = node9.toString(false, false, false);
        com.google.javascript.rhino.Node node14 = node9.getLastChild();
        boolean boolean15 = node9.isContinue();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node16 = node9.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 0.0" + "'", str13, "NUMBER 0.0");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor5 = ancestorIterable4.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertNotNull(nodeItor5);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        int int0 = com.google.javascript.rhino.Node.JSDOC_INFO_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 29 + "'", int0 == 29);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        int int21 = node19.getCharno();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        com.google.javascript.rhino.Node node42 = node41.cloneNode();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = node46.copyInformationFrom(node50);
        boolean boolean52 = node42.hasChild(node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        com.google.javascript.rhino.Node node54 = node42.setJSDocInfo(jSDocInfo53);
        boolean boolean55 = node54.isAnd();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        boolean boolean65 = node64.isAssignAdd();
        boolean boolean66 = node64.isTrue();
        double double67 = node64.getDouble();
        com.google.javascript.rhino.Node node68 = node64.removeFirstChild();
        node19.addChildAfter(node54, node68);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        int int79 = node78.getChangeTime();
        node78.setVarArgs(true);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node82 = node68.useSourceInfoIfMissingFrom(node78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node7.getJsDocBuilderForNode();
        java.lang.Appendable appendable21 = null;
        // The following exception was thrown during execution in test generation
        try {
            node7.appendStringTree(appendable21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildrenToBack(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = node4.getExistingIntProp(49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 49");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getSourceOffset();
        boolean boolean10 = node8.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        int int0 = com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 42 + "'", int0 == 42);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 1, 42, 38);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        boolean boolean27 = node25.isStringKey();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        boolean boolean47 = node45.isStringKey();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        node60.addSuppression("hi!");
        boolean boolean63 = node51.isEquivalentTo(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] { node36, node45, node60, node71 };
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) '#', nodeArray73);
        boolean boolean75 = node74.isLocalResultCall();
        com.google.javascript.rhino.Node node76 = node3.srcref(node74);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node77 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        node20.setOptionalArg(false);
        int int33 = node20.getType();
        boolean boolean34 = node20.isDelProp();
        java.lang.Appendable appendable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            node20.appendStringTree(appendable35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isNoSideEffectsCall();
        boolean boolean55 = node9.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        boolean boolean50 = node49.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isDelProp();
        boolean boolean17 = node3.isDo();
        java.lang.Object obj19 = node3.getProp(55);
        int int21 = node3.getIntProp(38);
        boolean boolean22 = node3.isRegExp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isInc();
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isFromExterns();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isDebugger();
        int int33 = node28.getSideEffectFlags();
        int int34 = node28.getChildCount();
        boolean boolean35 = node28.isReturn();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node19, node28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        boolean boolean44 = node19.isAdd();
        com.google.javascript.rhino.Node node45 = null;
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 10);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        boolean boolean57 = node56.isAssignAdd();
        java.lang.String[] strArray61 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean65 = node56.isContinue();
        node47.addChildrenToBack(node56);
        // The following exception was thrown during execution in test generation
        try {
            node19.replaceChild(node45, node47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n", (int) (byte) 10, (int) (short) 10);
        boolean boolean4 = node3.isGetElem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        // The following exception was thrown during execution in test generation
        try {
            node9.setString("BITXOR");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node8.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator33 = nodeIterable32.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(nodeSpliterator33);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        int int10 = node9.getSourcePosition();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(50, node9);
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = node11.isEquivalentToShallow(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = node29.getExistingIntProp(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 39");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = node8.isNumber();
        boolean boolean17 = node8.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR", 32, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        // The following exception was thrown during execution in test generation
        try {
            node11.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isCatch();
        boolean boolean13 = node8.isDebugger();
        node8.setLength((int) (short) 10);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        node19.setWasEmptyNode(false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node22 = node8.removeChildAfter(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        node4.addChildrenToBack(node20);
        int int40 = node4.getChangeTime();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node48.getJsDocBuilderForNode();
        boolean boolean62 = node48.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node48, 43, 46);
        boolean boolean66 = node65.isTry();
        boolean boolean67 = node65.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isTrue();
        com.google.javascript.rhino.Node node22 = node19.cloneNode();
        boolean boolean23 = node22.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getSourceOffset();
        boolean boolean11 = node8.isVarArgs();
        boolean boolean12 = node8.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        int int21 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node31 = node30.getLastSibling();
        boolean boolean32 = node30.isBreak();
        com.google.javascript.rhino.Node node33 = node19.srcrefTree(node30);
        boolean boolean34 = node30.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        com.google.javascript.rhino.Node node4 = node3.getFirstChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        boolean boolean14 = node12.isStringKey();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = node18.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node23);
        int int25 = node24.getLineno();
        boolean boolean26 = node24.isCase();
        node24.setIsSyntheticBlock(true);
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildToFront(node24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        boolean boolean4 = node3.isTry();
        com.google.javascript.rhino.Node node5 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node29.isAssignAdd();
        boolean boolean31 = node29.isGetProp();
        java.lang.String str32 = node29.toStringTree();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        node45.addSuppression("hi!");
        boolean boolean48 = node36.isEquivalentTo(node45);
        node36.setDouble(1.0d);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        int int60 = node59.getChangeTime();
        boolean boolean61 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        int int71 = node70.getChangeTime();
        boolean boolean72 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100, node29, node36, node59, node70);
        com.google.javascript.rhino.Node node74 = node3.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node75 = node3.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int76 = node75.getSideEffectFlags();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 0.0\n" + "'", str32, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isAssignAdd();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = node3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        com.google.javascript.rhino.Node node14 = node9.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = node14.getIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node7.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node20, node29, node44, node55 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', nodeArray57);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(51, nodeArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isTrue();
        double double12 = node9.getDouble();
        com.google.javascript.rhino.Node node13 = node9.removeFirstChild();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = node18.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node24 = node23.getLastSibling();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100, node23);
        int int27 = node23.getIntProp(31);
        boolean boolean28 = node23.isRegExp();
        boolean boolean29 = node23.isIf();
        boolean boolean30 = node23.wasEmptyNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, node35, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        boolean boolean48 = node46.isStringKey();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node58 = node46.srcrefTree(node57);
        boolean boolean59 = node58.isScript();
        boolean boolean60 = node58.isBreak();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node68.isStringKey();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        com.google.javascript.rhino.Node node80 = node68.srcrefTree(node79);
        boolean boolean81 = node80.isScript();
        com.google.javascript.rhino.Node node82 = node58.useSourceInfoFrom(node80);
        int int83 = node35.getIndexOfChild(node58);
        com.google.javascript.rhino.Node node84 = node23.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = null;
        node58.setStaticSourceFile(staticSourceFile85);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node94 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node95 = node90.copyInformationFrom(node94);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(46, node13, node58, node94, 39, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node19.isCatch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        node34.addSuppression("hi!");
        boolean boolean37 = node25.isEquivalentTo(node34);
        boolean boolean38 = node25.isCase();
        boolean boolean39 = node25.isCast();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node25);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        boolean boolean61 = node59.isCatch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        int int71 = node70.getChangeTime();
        boolean boolean72 = node70.hasMoreThanOneChild();
        java.lang.String str73 = node59.checkTreeEquals(node70);
        com.google.javascript.rhino.jstype.JSType jSType74 = node59.getJSType();
        node25.addChildToBack(node59);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 1, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node79.children();
        java.lang.Object obj82 = node79.getProp(2);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 1, node59, node79, 46, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node79.isSetterDef();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean88 = node87.isFor();
        boolean boolean89 = node87.isStringKey();
        com.google.javascript.rhino.Node node90 = node79.srcrefTree(node87);
        // The following exception was thrown during execution in test generation
        try {
            node79.setSideEffectFlags(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        int int50 = node49.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node49.setJSDocInfo(jSDocInfo51);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = node49.getExistingIntProp(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 100");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n");
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING NUMBER 0.0? is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        boolean boolean4 = node3.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        int int14 = node13.getChangeTime();
        node13.setVarArgs(true);
        node13.setType(51);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isTrue();
        boolean boolean30 = node27.wasEmptyNode();
        boolean boolean31 = node27.isStringKey();
        boolean boolean32 = node27.isTypeOf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        boolean boolean43 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean48 = node41.hasChild(node47);
        com.google.javascript.rhino.Node node49 = node27.clonePropsFrom(node47);
        com.google.javascript.rhino.Node node50 = node13.srcrefTree(node27);
        node3.addChildToFront(node13);
        boolean boolean52 = node3.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        int int85 = node79.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = node19.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        boolean boolean85 = node84.isLocalResultCall();
        boolean boolean86 = node84.isQuotedString();
        com.google.javascript.rhino.Node node87 = node84.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.isRegExp();
        boolean boolean7 = node3.isFunction();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node16.isAssignAdd();
        boolean boolean18 = node16.isGetProp();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node20.setJSType(jSType21);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node26);
        boolean boolean28 = node27.isScript();
        boolean boolean29 = node27.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        boolean boolean39 = node37.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node37.srcrefTree(node48);
        boolean boolean50 = node49.isScript();
        com.google.javascript.rhino.Node node51 = node27.useSourceInfoFrom(node49);
        int int52 = node4.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isDelProp();
        boolean boolean70 = node56.isDo();
        java.lang.Object obj72 = node56.getProp(55);
        com.google.javascript.rhino.Node node73 = node27.useSourceInfoFromForTree(node56);
        boolean boolean74 = node27.isAssign();
        double double75 = node27.getDouble();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node16 = node3.removeFirstChild();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags18.setMutatesArguments();
        sideEffectFlags18.clearAllFlags();
        sideEffectFlags18.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        int int21 = node19.getCharno();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        com.google.javascript.rhino.Node node42 = node41.cloneNode();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = node46.copyInformationFrom(node50);
        boolean boolean52 = node42.hasChild(node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = null;
        com.google.javascript.rhino.Node node54 = node42.setJSDocInfo(jSDocInfo53);
        boolean boolean55 = node54.isAnd();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        boolean boolean65 = node64.isAssignAdd();
        boolean boolean66 = node64.isTrue();
        double double67 = node64.getDouble();
        com.google.javascript.rhino.Node node68 = node64.removeFirstChild();
        node19.addChildAfter(node54, node68);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = node68.isCatch();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        java.lang.Object obj6 = node3.getProp(2);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node7 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(10.0d);
        boolean boolean2 = node1.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        boolean boolean19 = node3.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        node50.removeProp((int) (short) -1);
        boolean boolean53 = node8.isEquivalentToShallow(node50);
        boolean boolean54 = node8.isCast();
        com.google.javascript.rhino.Node node55 = node8.getLastChild();
        com.google.javascript.rhino.Node node56 = node8.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node56.siblings();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node16 = node8.getAncestor(42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = node16.toString(true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isCase();
        com.google.javascript.rhino.Node node22 = node19.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        node4.addChildrenToBack(node20);
        int int40 = node4.getChangeTime();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node48.getJsDocBuilderForNode();
        boolean boolean62 = node48.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node48, 43, 46);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        int int75 = node74.getChangeTime();
        node74.setVarArgs(true);
        java.lang.String str81 = node74.toString(false, true, true);
        java.lang.String str82 = node48.checkTreeEquals(node74);
        boolean boolean83 = node48.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str81, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        java.lang.String str42 = node24.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER 0.0" + "'", str42, "NUMBER 0.0");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str13 = node9.toString(false, false, false);
        com.google.javascript.rhino.Node node14 = node9.getLastChild();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        node27.addSuppression("hi!");
        boolean boolean30 = node18.isEquivalentTo(node27);
        boolean boolean31 = node18.isDelProp();
        com.google.javascript.rhino.InputId inputId32 = node18.getInputId();
        int int33 = node9.getIndexOfChild(node18);
        int int34 = node9.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 0.0" + "'", str13, "NUMBER 0.0");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(inputId32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isAnd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeIterable3);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        boolean boolean66 = node62.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isAnd();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = node7.getExistingIntProp(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        boolean boolean11 = node8.isThrow();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        boolean boolean70 = node69.isCall();
        int int71 = node69.getSourcePosition();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = node85.copyInformationFrom(node89);
        com.google.javascript.rhino.Node node91 = node79.srcrefTree(node90);
        node91.detachChildren();
        double double93 = node91.getDouble();
        com.google.javascript.rhino.Node node94 = node69.srcref(node91);
        node69.removeProp((int) (short) -1);
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node69);
        boolean boolean98 = node69.isParamList();
        boolean boolean99 = node69.isExprResult();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        boolean boolean61 = node57.isBreak();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags63 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags63.setMutatesArguments();
        sideEffectFlags63.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node57.setSideEffectFlags(sideEffectFlags63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got GETELEM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isLabelName();
        boolean boolean39 = node8.isComma();
        boolean boolean40 = node8.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, (int) (byte) 1, (-1));
        boolean boolean4 = node3.isOr();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = node12.copyInformationFrom(node16);
        node17.addSuppression("hi!");
        boolean boolean20 = node8.isEquivalentTo(node17);
        boolean boolean21 = node8.isDelProp();
        boolean boolean22 = node8.isDo();
        java.lang.Object obj24 = node8.getProp(55);
        int int26 = node8.getIntProp(38);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node30.isCase();
        boolean boolean44 = node30.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node30.siblings();
        boolean boolean46 = node30.isWith();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node54.isStringKey();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node66 = node54.srcrefTree(node65);
        int int67 = node66.getLineno();
        boolean boolean68 = node66.isTrue();
        node30.addChildToBack(node66);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node8, node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        int int28 = node25.getIntProp(52);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        boolean boolean16 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, node21, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        boolean boolean34 = node32.isStringKey();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node43);
        boolean boolean45 = node44.isScript();
        boolean boolean46 = node44.isBreak();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node54.isStringKey();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node66 = node54.srcrefTree(node65);
        boolean boolean67 = node66.isScript();
        com.google.javascript.rhino.Node node68 = node44.useSourceInfoFrom(node66);
        int int69 = node21.getIndexOfChild(node44);
        com.google.javascript.rhino.Node node70 = node9.useSourceInfoIfMissingFromForTree(node44);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        boolean boolean75 = node44.hasChild(node74);
        boolean boolean76 = node74.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node21.hasChild(node25);
        int int32 = node25.getSourceOffset();
        boolean boolean33 = node25.isNoSideEffectsCall();
        boolean boolean34 = node25.isQuotedString();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 1, 100);
        boolean boolean39 = node38.isInstanceOf();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 1, node25, node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        node53.addSuppression("hi!");
        boolean boolean56 = node44.isEquivalentTo(node53);
        node53.putBooleanProp(31, true);
        boolean boolean60 = node53.isHook();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node61 = node38.removeChildAfter(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = node9.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        com.google.javascript.rhino.Node node20 = node9.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node24, node64);
        java.lang.String str67 = node64.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "GETELEM [jsdoc_info: JSDocInfo]\n" + "'", str67, "GETELEM [jsdoc_info: JSDocInfo]\n");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        boolean boolean60 = node57.isNE();
        boolean boolean61 = node57.isContinue();
        boolean boolean62 = node57.isGetProp();
        boolean boolean63 = node57.isBreak();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        int int10 = node9.getChangeTime();
        node9.setVarArgs(true);
        node9.setType(51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(37, node9, 46, (int) (short) -1);
        boolean boolean19 = node9.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node24.getAncestors();
        int int41 = node24.getLength();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = node24.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean22 = node20.getBooleanProp(43);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(0, (int) (short) 100, 15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = node20.checkTreeEquals(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node29.isAssignAdd();
        boolean boolean31 = node29.isGetProp();
        java.lang.String str32 = node29.toStringTree();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        node45.addSuppression("hi!");
        boolean boolean48 = node36.isEquivalentTo(node45);
        node36.setDouble(1.0d);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        int int60 = node59.getChangeTime();
        boolean boolean61 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        int int71 = node70.getChangeTime();
        boolean boolean72 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100, node29, node36, node59, node70);
        com.google.javascript.rhino.Node node74 = node3.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node75 = node3.getFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node77 = node75.setJSDocInfo(jSDocInfo76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 0.0\n" + "'", str32, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        int int55 = node7.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node7.setJSType(jSType56);
        com.google.javascript.rhino.Node node58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = node7.useSourceInfoFrom(node58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean5 = node4.isReturn();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        boolean boolean15 = node14.isAssignAdd();
        java.lang.String[] strArray19 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet20);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet20);
        // The following exception was thrown during execution in test generation
        try {
            node4.setDouble((double) 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isExprResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags59 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags59.setMutatesArguments();
        boolean boolean61 = sideEffectFlags59.areAllFlagsSet();
        // The following exception was thrown during execution in test generation
        try {
            node57.setSideEffectFlags(sideEffectFlags59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got GETELEM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node8.siblings();
        boolean boolean33 = node8.isCast();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        node62.putBooleanProp((int) (short) 10, true);
        // The following exception was thrown during execution in test generation
        try {
            node62.setSideEffectFlags(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        int int63 = node62.getChangeTime();
        boolean boolean64 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean69 = node62.hasChild(node68);
        node50.addChildToBack(node68);
        node68.setVarArgs(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        int int55 = node54.getChildCount();
        boolean boolean56 = node54.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        node4.addChildrenToBack(node20);
        int int40 = node4.getChangeTime();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node48.getJsDocBuilderForNode();
        boolean boolean62 = node48.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node48, 43, 46);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        int int75 = node74.getChangeTime();
        node74.setVarArgs(true);
        java.lang.String str81 = node74.toString(false, true, true);
        java.lang.String str82 = node48.checkTreeEquals(node74);
        boolean boolean83 = node74.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str81, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node10.isAssignAdd();
        boolean boolean12 = node10.isGetProp();
        java.lang.String str13 = node10.toStringTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        node26.addSuppression("hi!");
        boolean boolean29 = node17.isEquivalentTo(node26);
        node17.setDouble(1.0d);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        int int41 = node40.getChangeTime();
        boolean boolean42 = node40.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = node46.copyInformationFrom(node50);
        int int52 = node51.getChangeTime();
        boolean boolean53 = node51.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100, node10, node17, node40, node51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        int int64 = node63.getChangeTime();
        boolean boolean65 = node63.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean70 = node63.hasChild(node69);
        node51.addChildToBack(node69);
        java.lang.String str72 = node69.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(0, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 0.0\n" + "'", str13, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 0.0" + "'", str72, "NUMBER 0.0");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        boolean boolean12 = node8.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node22 = node21.cloneNode();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node22.hasChild(node26);
        node22.setOptionalArg(false);
        boolean boolean35 = node22.isFromExterns();
        node22.setDouble((double) 4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 1, node1, node22, 0, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        java.lang.String str15 = node8.toString(false, true, true);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100, node25);
        int int28 = node25.getLength();
        node25.setDouble((double) 0L);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        boolean boolean40 = node39.isAssignAdd();
        boolean boolean41 = node39.isGetProp();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.clonePropsFrom(node39);
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildToBack(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str15, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        boolean boolean4 = node3.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        int int14 = node13.getChangeTime();
        node13.setVarArgs(true);
        node13.setType(51);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isTrue();
        boolean boolean30 = node27.wasEmptyNode();
        boolean boolean31 = node27.isStringKey();
        boolean boolean32 = node27.isTypeOf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        boolean boolean43 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean48 = node41.hasChild(node47);
        com.google.javascript.rhino.Node node49 = node27.clonePropsFrom(node47);
        com.google.javascript.rhino.Node node50 = node13.srcrefTree(node27);
        node3.addChildToFront(node13);
        boolean boolean52 = node3.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        node27.setSourceEncodedPositionForTree((int) (byte) 100);
        int int37 = node27.getIntProp((int) '4');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        boolean boolean23 = node22.isAssignAdd();
        boolean boolean24 = node22.isTrue();
        boolean boolean25 = node22.wasEmptyNode();
        boolean boolean26 = node22.isStringKey();
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        int int37 = node36.getChangeTime();
        boolean boolean38 = node36.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean43 = node36.hasChild(node42);
        com.google.javascript.rhino.Node node44 = node22.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node45 = node8.srcrefTree(node22);
        boolean boolean46 = node45.hasOneChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node45.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        boolean boolean66 = node62.isVarArgs();
        node62.setCharno(55);
        com.google.javascript.rhino.Node node69 = node62.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = node69.isVarArgs();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node69);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(42, "BITXOR");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isOnlyModifiesThisCall();
        boolean boolean61 = node57.isAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        node46.addSuppression("hi!");
        boolean boolean49 = node37.isEquivalentTo(node46);
        boolean boolean50 = node46.isGetterDef();
        node46.setType((int) '#');
        boolean boolean53 = node46.isVar();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        boolean boolean63 = node62.isAssignAdd();
        boolean boolean64 = node62.isTrue();
        boolean boolean65 = node62.wasEmptyNode();
        int int66 = node46.getIndexOfChild(node62);
        com.google.javascript.rhino.Node node67 = node46.getFirstChild();
        int int68 = node46.getChangeTime();
        node27.addChildToFront(node46);
        boolean boolean70 = node46.isTry();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node46.siblings();
        // The following exception was thrown during execution in test generation
        try {
            node46.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 30, 50);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        boolean boolean10 = node9.isInstanceOf();
        boolean boolean11 = node9.isWith();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) -1, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        node27.addSuppression("hi!");
        boolean boolean30 = node18.isEquivalentTo(node27);
        boolean boolean31 = node18.isNot();
        boolean boolean32 = node18.isFromExterns();
        com.google.javascript.rhino.Node node33 = node18.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node9.addChildBefore(node14, node33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isFromExterns();
        boolean boolean30 = node27.isVarArgs();
        boolean boolean31 = node27.isDebugger();
        int int32 = node3.getIndexOfChild(node27);
        node3.setLength((-1));
        boolean boolean35 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        int int55 = node54.getChildCount();
        boolean boolean56 = node54.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "NUMBER 0.0 [var_args_name: 1]");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = node6.copyInformationFrom(node10);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isTrue();
        double double14 = node11.getDouble();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        node2.addChildToFront(node11);
        com.google.javascript.rhino.Node node17 = node2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = node17.toString(false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node22 = node20.getAncestor((int) (short) 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node20.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(jSDocInfo23);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        boolean boolean27 = node19.isDec();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        boolean boolean29 = node19.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        boolean boolean23 = node22.isAssignAdd();
        boolean boolean24 = node22.isTrue();
        boolean boolean25 = node22.wasEmptyNode();
        boolean boolean26 = node22.isStringKey();
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        int int37 = node36.getChangeTime();
        boolean boolean38 = node36.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean43 = node36.hasChild(node42);
        com.google.javascript.rhino.Node node44 = node22.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node45 = node8.srcrefTree(node22);
        boolean boolean46 = node22.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isLabelName();
        boolean boolean39 = node8.isComma();
        com.google.javascript.rhino.Node node40 = node8.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node24.isStringKey();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) ' ', "NUMBER 0.0\n", (int) 'a', 8);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node48 = node24.getChildBefore(node47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        node57.setCharno((int) '#');
        com.google.javascript.rhino.InputId inputId61 = null;
        node57.setInputId(inputId61);
        boolean boolean63 = node57.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        node8.setSourceEncodedPositionForTree(48);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node14 = node8.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        boolean boolean44 = node19.isAdd();
        node19.removeProp(30);
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node19.setJSType(jSType47);
        boolean boolean49 = node19.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int12 = node9.getLength();
        java.lang.String str13 = node9.getQualifiedName();
        boolean boolean14 = node9.hasChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node19.getStaticSourceFile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node19.siblings();
        int int24 = node19.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '4', (int) (byte) 100);
        boolean boolean4 = node3.isVoid();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER -1.0 52 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        boolean boolean85 = node79.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        int int10 = node9.getSourcePosition();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(50, node9);
        boolean boolean12 = node9.isBreak();
        java.lang.Appendable appendable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            node9.appendStringTree(appendable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        boolean boolean10 = node9.isInstanceOf();
        int int11 = node9.getType();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((-1), 10, 30);
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoFrom(node15);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = node15.getExistingIntProp((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: -1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 39 + "'", int11 == 39);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        node8.detachChildren();
        boolean boolean19 = node8.isNull();
        int int20 = node8.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        boolean boolean11 = node7.hasOneChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node7.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str13 = node9.toString(false, false, false);
        node9.addSuppression("NUMBER 0.0");
        boolean boolean16 = node9.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 0.0" + "'", str13, "NUMBER 0.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        boolean boolean27 = node19.isDec();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = node19.getExistingIntProp(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        boolean boolean16 = node9.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = null;
        com.google.javascript.rhino.Node node18 = node9.setJSDocInfo(jSDocInfo17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node26.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node37);
        boolean boolean39 = node37.isCatch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        int int49 = node48.getChangeTime();
        boolean boolean50 = node48.hasMoreThanOneChild();
        java.lang.String str51 = node37.checkTreeEquals(node48);
        com.google.javascript.rhino.jstype.JSType jSType52 = node37.getJSType();
        node37.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node55 = node9.copyInformationFrom(node37);
        node9.setCharno(38);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        boolean boolean13 = node8.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        boolean boolean4 = node3.isString();
        boolean boolean5 = node3.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        boolean boolean44 = node41.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node41.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node45.setString("NUMBER 0.0 [var_args_name: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = node4.isIf();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        com.google.javascript.rhino.Node node59 = node57.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = node59.isNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = node8.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSType16);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        java.lang.String str70 = node69.getQualifiedName();
        boolean boolean71 = node69.isHook();
        boolean boolean72 = node69.isNumber();
        com.google.javascript.rhino.Node node73 = node69.removeChildren();
        com.google.javascript.rhino.Node node74 = node8.copyInformationFromForTree(node69);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = node8.getExistingIntProp((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isFromExterns();
        boolean boolean20 = node12.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        int int21 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        node34.addSuppression("hi!");
        boolean boolean37 = node25.isEquivalentTo(node34);
        boolean boolean38 = node25.isNot();
        boolean boolean39 = node25.isFromExterns();
        com.google.javascript.rhino.Node node40 = node25.cloneNode();
        boolean boolean41 = node19.hasChild(node40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isDelProp();
        com.google.javascript.rhino.InputId inputId17 = node3.getInputId();
        boolean boolean18 = node3.isFunction();
        boolean boolean19 = node3.isAssignAdd();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node3.getAncestors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        java.lang.String str16 = node14.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node14.setSideEffectFlags(30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node16 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        boolean boolean26 = node24.isStringKey();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node36 = node24.srcrefTree(node35);
        boolean boolean37 = node35.isCatch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        node50.addSuppression("hi!");
        boolean boolean53 = node41.isEquivalentTo(node50);
        boolean boolean54 = node41.isCase();
        boolean boolean55 = node41.isCast();
        com.google.javascript.rhino.Node node56 = node35.srcrefTree(node41);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        boolean boolean66 = node64.isStringKey();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = node70.copyInformationFrom(node74);
        com.google.javascript.rhino.Node node76 = node64.srcrefTree(node75);
        boolean boolean77 = node75.isCatch();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node86 = node81.copyInformationFrom(node85);
        int int87 = node86.getChangeTime();
        boolean boolean88 = node86.hasMoreThanOneChild();
        java.lang.String str89 = node75.checkTreeEquals(node86);
        com.google.javascript.rhino.jstype.JSType jSType90 = node75.getJSType();
        node41.addChildToBack(node75);
        com.google.javascript.rhino.Node node92 = node41.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToBack(node92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(jSType90);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        node24.detachChildren();
        java.lang.Object obj82 = null;
        node24.putProp(35, obj82);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        node8.detachChildren();
        boolean boolean19 = node8.isNull();
        com.google.javascript.rhino.jstype.JSType jSType20 = node8.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSType20);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node39.setJSDocInfo(jSDocInfo40);
        // The following exception was thrown during execution in test generation
        try {
            node41.setSideEffectFlags(47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        boolean boolean44 = node43.isSetterDef();
        boolean boolean45 = node43.isCast();
        boolean boolean46 = node43.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean36 = node29.hasChild(node35);
        boolean boolean37 = node29.isQualifiedName();
        boolean boolean38 = node29.isFalse();
        boolean boolean39 = node29.isAnd();
        com.google.javascript.rhino.Node node40 = node19.useSourceInfoFrom(node29);
        com.google.javascript.rhino.jstype.JSType jSType41 = node19.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(jSType41);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        boolean boolean10 = node9.isInstanceOf();
        int int11 = node9.getType();
        boolean boolean12 = node9.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 39 + "'", int11 == 39);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        com.google.javascript.rhino.Node node83 = node79.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = node83.isScript();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(409638, nodeArray3, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) 'a', nodeArray3);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(54, nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node7 = node1.useSourceInfoIfMissingFromForTree(node6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = node7.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 100.0 15 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        java.lang.Class<?> wildcardClass22 = node19.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        node39.removeProp((int) (short) -1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags43 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags43.setReturnsTainted();
        sideEffectFlags43.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node39.setSideEffectFlags(sideEffectFlags43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.setLineno((int) (byte) -1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node12.setStaticSourceFile(staticSourceFile18);
        boolean boolean20 = node12.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node20, node29, node44, node55 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', nodeArray57);
        boolean boolean59 = node58.isCall();
        node58.setCharno((int) '#');
        com.google.javascript.rhino.InputId inputId62 = null;
        node58.setInputId(inputId62);
        com.google.javascript.rhino.Node node64 = node58.cloneTree();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        com.google.javascript.rhino.Node node75 = node74.getLastSibling();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100, node74);
        int int78 = node74.getIntProp(31);
        boolean boolean79 = node74.isRegExp();
        boolean boolean80 = node74.isIf();
        boolean boolean81 = node74.wasEmptyNode();
        boolean boolean82 = node74.isWith();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(12, node64, node74, (int) (byte) 10, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isArrayLit();
        com.google.javascript.rhino.Node node17 = node3.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = node17.isAssign();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node30.isVarArgs();
        node30.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node9.addChildToBack(node30);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        boolean boolean45 = node43.isStringKey();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        com.google.javascript.rhino.Node node55 = node43.srcrefTree(node54);
        node55.detachChildren();
        node55.removeProp((int) (byte) 100);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        node67.addSuppression("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = node67.getStaticSourceFile();
        boolean boolean71 = node67.hasOneChild();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        node80.addSuppression("hi!");
        boolean boolean83 = node80.isFor();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(16, node30, node55, node67, node80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(staticSourceFile70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        int int54 = node53.getLineno();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int57 = sideEffectFlags56.valueOf();
        sideEffectFlags56.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node53.setSideEffectFlags(sideEffectFlags56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 39 + "'", int57 == 39);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        int int41 = node40.getChangeTime();
        node40.setVarArgs(true);
        java.lang.String str47 = node40.toString(false, true, true);
        boolean boolean48 = node40.isBreak();
        com.google.javascript.rhino.Node node49 = node8.copyInformationFrom(node40);
        node49.setLineno((int) (byte) 10);
        com.google.javascript.rhino.Node node52 = node49.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str47, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        node31.addSuppression("hi!");
        boolean boolean34 = node22.isEquivalentTo(node31);
        boolean boolean35 = node22.isCase();
        boolean boolean36 = node22.isCast();
        com.google.javascript.rhino.Node node37 = node12.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        com.google.javascript.rhino.Node node47 = node46.getLastSibling();
        java.lang.String str48 = node46.getSourceFileName();
        boolean boolean49 = node46.isCall();
        java.lang.String str50 = node12.checkTreeEquals(node46);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        node63.addSuppression("hi!");
        boolean boolean66 = node54.isEquivalentTo(node63);
        node54.setDouble(1.0d);
        boolean boolean69 = node54.isSwitch();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        boolean boolean79 = node78.isAssignAdd();
        boolean boolean80 = node78.isFromExterns();
        boolean boolean81 = node78.isVarArgs();
        boolean boolean82 = node78.isDebugger();
        int int83 = node54.getIndexOfChild(node78);
        node54.setLength((-1));
        com.google.javascript.rhino.Node node86 = node46.srcrefTree(node54);
        boolean boolean87 = node54.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n" + "'", str50, "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isStringKey();
        com.google.javascript.rhino.Node node13 = node8.getParent();
        boolean boolean14 = node8.isReturn();
        boolean boolean15 = node8.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        int int31 = node24.getSourceOffset();
        boolean boolean32 = node24.isNoSideEffectsCall();
        boolean boolean33 = node24.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        node46.addSuppression("hi!");
        boolean boolean49 = node37.isEquivalentTo(node46);
        boolean boolean50 = node46.isGetterDef();
        node46.setType((int) '#');
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isCase();
        boolean boolean70 = node56.isCast();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node56);
        com.google.javascript.rhino.Node node72 = node24.useSourceInfoFrom(node46);
        int int73 = node72.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        node19.detachChildren();
        node19.setSourceEncodedPositionForTree(55);
        node19.removeProp(37);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n", (int) (byte) 10, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node3.getExistingIntProp(38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 38");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        boolean boolean27 = node25.isStringKey();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        boolean boolean47 = node45.isStringKey();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        node60.addSuppression("hi!");
        boolean boolean63 = node51.isEquivalentTo(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] { node36, node45, node60, node71 };
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) '#', nodeArray73);
        boolean boolean75 = node74.isLocalResultCall();
        com.google.javascript.rhino.Node node76 = node3.srcref(node74);
        boolean boolean77 = node3.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node10.isAssignAdd();
        java.lang.String[] strArray15 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet16);
        boolean boolean19 = node10.isContinue();
        node1.addChildrenToBack(node10);
        boolean boolean21 = node10.isWith();
        java.lang.Class<?> wildcardClass22 = node10.getClass();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isNot();
        boolean boolean17 = node3.isParamList();
        node3.setLength((int) '#');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.isRegExp();
        boolean boolean7 = node3.isFunction();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node16.isAssignAdd();
        boolean boolean18 = node16.isGetProp();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoIfMissingFrom(node16);
        boolean boolean21 = node3.isBreak();
        node3.setVarArgs(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        node19.detachChildren();
        double double21 = node19.getDouble();
        boolean boolean22 = node19.isTry();
        boolean boolean23 = node19.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = null;
        com.google.javascript.rhino.Node node32 = node20.setJSDocInfo(jSDocInfo31);
        boolean boolean33 = node32.isHook();
        // The following exception was thrown during execution in test generation
        try {
            node32.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR", 32, 0);
        node3.setSourceEncodedPositionForTree(32);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isVarArgs();
        node29.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node8.addChildToBack(node29);
        int int36 = node29.getIntProp(30);
        boolean boolean37 = node29.isOr();
        boolean boolean38 = node29.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isLabel();
        com.google.javascript.rhino.Node node25 = node3.getNext();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node38.isGetterDef();
        node38.setType((int) '#');
        boolean boolean45 = node38.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        boolean boolean55 = node53.isStringKey();
        boolean boolean56 = node53.isThrow();
        com.google.javascript.rhino.Node node57 = node53.getParent();
        node38.addChildToBack(node53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node53.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        node72.addSuppression("hi!");
        boolean boolean75 = node63.isEquivalentTo(node72);
        boolean boolean76 = node72.isGetterDef();
        node72.setType((int) '#');
        boolean boolean79 = node72.isVar();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node88 = node83.copyInformationFrom(node87);
        boolean boolean89 = node88.isAssignAdd();
        boolean boolean90 = node88.isTrue();
        boolean boolean91 = node88.wasEmptyNode();
        int int92 = node72.getIndexOfChild(node88);
        com.google.javascript.rhino.Node node93 = node72.getFirstChild();
        int int94 = node72.getChangeTime();
        node53.addChildToFront(node72);
        boolean boolean96 = node72.isTry();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node72.siblings();
        com.google.javascript.rhino.Node node98 = node3.copyInformationFrom(node72);
        boolean boolean99 = node98.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(nodeIterable97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node8.getAncestors();
        int int13 = node8.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        com.google.javascript.rhino.Node node83 = node79.getFirstChild();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node93 = node88.copyInformationFrom(node92);
        com.google.javascript.rhino.Node node94 = node93.getLastSibling();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(100, node93);
        com.google.javascript.rhino.Node node96 = node95.removeFirstChild();
        boolean boolean97 = node96.isCase();
        com.google.javascript.rhino.Node node98 = node79.useSourceInfoFrom(node96);
        boolean boolean99 = node98.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        boolean boolean12 = node8.wasEmptyNode();
        int int13 = node8.getChildCount();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags15.setMutatesArguments();
        boolean boolean17 = sideEffectFlags15.areAllFlagsSet();
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags(sideEffectFlags15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isDelProp();
        com.google.javascript.rhino.InputId inputId17 = node3.getInputId();
        boolean boolean18 = node3.isFunction();
        boolean boolean19 = node3.hasOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        boolean boolean27 = node25.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        boolean boolean12 = node9.isFromExterns();
        node9.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node node12 = node8.removeFirstChild();
        boolean boolean13 = node8.isCatch();
        boolean boolean14 = node8.isParamList();
        boolean boolean15 = node8.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isCall();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("BITXOR", 32, 0);
        com.google.javascript.rhino.Node node16 = node8.useSourceInfoIfMissingFrom(node15);
        boolean boolean17 = node8.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = node87.copyInformationFrom(node91);
        boolean boolean93 = node82.isEquivalentToTyped(node92);
        boolean boolean94 = node82.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isNot();
        com.google.javascript.rhino.Node node22 = node19.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isFor();
        com.google.javascript.rhino.Node node12 = node8.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node12.setCharno((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node79.isSetterDef();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean88 = node87.isFor();
        boolean boolean89 = node87.isStringKey();
        com.google.javascript.rhino.Node node90 = node79.srcrefTree(node87);
        boolean boolean91 = node79.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            node79.setSideEffectFlags(55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        com.google.javascript.rhino.Node node83 = node79.getFirstChild();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node93 = node88.copyInformationFrom(node92);
        com.google.javascript.rhino.Node node94 = node93.getLastSibling();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(100, node93);
        com.google.javascript.rhino.Node node96 = node95.removeFirstChild();
        boolean boolean97 = node96.isCase();
        com.google.javascript.rhino.Node node98 = node79.useSourceInfoFrom(node96);
        com.google.javascript.rhino.Node node99 = node96.getLastSibling();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "NUMBER 0.0\n", 35, 15);
        boolean boolean5 = node4.isIf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = node4.getJSDocInfo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSDocInfo6);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node21 = null;
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            node18.addChildrenAfter(node21, node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isAnd();
        boolean boolean3 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(409638, nodeArray3, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) 'a', nodeArray3);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(0, nodeArray3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node22 = node21.cloneNode();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node22.hasChild(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        com.google.javascript.rhino.Node node34 = node22.setJSDocInfo(jSDocInfo33);
        boolean boolean35 = node34.isAnd();
        boolean boolean36 = node34.isDebugger();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node1, node34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        int int11 = node8.getType();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        int int21 = node20.getChangeTime();
        com.google.javascript.rhino.Node node22 = node20.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = node8.isEquivalentToShallow(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 39 + "'", int11 == 39);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        boolean boolean2 = node1.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.putIntProp(49, 52);
        com.google.javascript.rhino.Node node57 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = node9.isEquivalentToTyped(node57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = node87.copyInformationFrom(node91);
        boolean boolean93 = node82.isEquivalentToTyped(node92);
        boolean boolean94 = node92.isParamList();
        boolean boolean95 = node92.isDo();
        java.lang.String str96 = node92.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "NUMBER 0.0\n" + "'", str96, "NUMBER 0.0\n");
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node7 = node1.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node16.isAssignAdd();
        boolean boolean18 = node16.isFromExterns();
        boolean boolean19 = node16.isVarArgs();
        node16.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node node22 = node7.useSourceInfoIfMissingFrom(node16);
        boolean boolean23 = node7.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node26);
        boolean boolean28 = node27.isScript();
        boolean boolean29 = node27.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        boolean boolean39 = node37.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node37.srcrefTree(node48);
        boolean boolean50 = node49.isScript();
        com.google.javascript.rhino.Node node51 = node27.useSourceInfoFrom(node49);
        int int52 = node4.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isDelProp();
        boolean boolean70 = node56.isDo();
        java.lang.Object obj72 = node56.getProp(55);
        com.google.javascript.rhino.Node node73 = node27.useSourceInfoFromForTree(node56);
        boolean boolean74 = node56.isNew();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            node8.setString("NUMBER 0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        int int17 = node12.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node12.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        boolean boolean4 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        boolean boolean14 = node13.isAssignAdd();
        boolean boolean15 = node13.isTrue();
        boolean boolean16 = node13.wasEmptyNode();
        boolean boolean17 = node13.isStringKey();
        boolean boolean18 = node13.isTypeOf();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        int int28 = node27.getChangeTime();
        boolean boolean29 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean34 = node27.hasChild(node33);
        com.google.javascript.rhino.Node node35 = node13.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node36 = node3.srcref(node13);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = node36.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, 40, 4);
        boolean boolean4 = node3.isWhile();
        boolean boolean5 = node3.isGetElem();
        boolean boolean6 = node3.isNumber();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = node10.copyInformationFrom(node14);
        boolean boolean16 = node15.isAssignAdd();
        boolean boolean17 = node15.isTrue();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node39 = node27.srcrefTree(node38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        boolean boolean49 = node47.isStringKey();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        node62.addSuppression("hi!");
        boolean boolean65 = node53.isEquivalentTo(node62);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] { node38, node47, node62, node73 };
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) '#', nodeArray75);
        java.lang.String str77 = node76.getQualifiedName();
        boolean boolean78 = node76.isHook();
        boolean boolean79 = node76.isNumber();
        com.google.javascript.rhino.Node node80 = node76.removeChildren();
        com.google.javascript.rhino.Node node81 = node15.copyInformationFromForTree(node76);
        boolean boolean82 = node81.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = node3.removeChildAfter(node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isExprResult();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable25 = node3.getAncestors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ancestorIterable25);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node29.isAssignAdd();
        boolean boolean31 = node29.isGetProp();
        java.lang.String str32 = node29.toStringTree();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        node45.addSuppression("hi!");
        boolean boolean48 = node36.isEquivalentTo(node45);
        node36.setDouble(1.0d);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        int int60 = node59.getChangeTime();
        boolean boolean61 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        int int71 = node70.getChangeTime();
        boolean boolean72 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100, node29, node36, node59, node70);
        com.google.javascript.rhino.Node node74 = node3.copyInformationFromForTree(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node74.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator76 = nodeIterable75.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 0.0\n" + "'", str32, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNotNull(nodeSpliterator76);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isBlock();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneTree();
        boolean boolean40 = node38.isFunction();
        boolean boolean41 = node38.isRegExp();
        boolean boolean42 = node38.isFunction();
        node20.putProp((int) 'a', (java.lang.Object) node38);
        boolean boolean44 = node20.isSetterDef();
        com.google.javascript.rhino.Node node45 = node20.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(36, 100, 46);
        node3.detachChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node14 = node13.getLastSibling();
        java.lang.String str15 = node13.getSourceFileName();
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isTry();
        int int18 = node3.getIndexOfChild(node13);
        boolean boolean19 = node13.isString();
        boolean boolean20 = node13.hasChildren();
        node13.setSourceEncodedPosition(37);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        boolean boolean23 = node22.isAssignAdd();
        boolean boolean24 = node22.isTrue();
        boolean boolean25 = node22.wasEmptyNode();
        boolean boolean26 = node22.isStringKey();
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        int int37 = node36.getChangeTime();
        boolean boolean38 = node36.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean43 = node36.hasChild(node42);
        com.google.javascript.rhino.Node node44 = node22.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node45 = node8.srcrefTree(node22);
        boolean boolean46 = node8.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node88 = node83.copyInformationFrom(node87);
        int int89 = node88.getChangeTime();
        node88.setVarArgs(true);
        node88.setType(51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable94 = node88.siblings();
        node88.setChangeTime((int) (byte) -1);
        com.google.javascript.rhino.Node node97 = node24.clonePropsFrom(node88);
        boolean boolean98 = node97.isCast();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(nodeIterable94);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node11.isStringKey();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node22);
        boolean boolean24 = node23.isScript();
        boolean boolean25 = node23.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node23.addChildToFront(node29);
        com.google.javascript.rhino.Node node31 = node3.copyInformationFrom(node29);
        node3.detachChildren();
        boolean boolean33 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        node4.addChildrenToBack(node20);
        int int40 = node4.getChangeTime();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node48.getJsDocBuilderForNode();
        boolean boolean62 = node48.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node48, 43, 46);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        int int75 = node74.getChangeTime();
        node74.setVarArgs(true);
        java.lang.String str81 = node74.toString(false, true, true);
        java.lang.String str82 = node48.checkTreeEquals(node74);
        boolean boolean83 = node48.isGetElem();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str81, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isIn();
        boolean boolean17 = node3.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        node7.setLength((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            node7.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0", 4095, 30);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node4.getSideEffectFlags();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        node31.addSuppression("hi!");
        boolean boolean34 = node22.isEquivalentTo(node31);
        boolean boolean35 = node22.isCase();
        boolean boolean36 = node22.isCast();
        com.google.javascript.rhino.Node node37 = node12.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node38 = node12.getParent();
        node12.setType(0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        com.google.javascript.rhino.Node node17 = node8.getAncestor((int) (byte) 1);
        boolean boolean18 = node8.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean11 = node10.isReturn();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        boolean boolean21 = node20.isAssignAdd();
        java.lang.String[] strArray25 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet26);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet26);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet44);
        boolean boolean47 = node39.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node48 = node3.removeChildAfter(node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = node8.isNumber();
        com.google.javascript.rhino.Node node17 = node8.cloneTree();
        com.google.javascript.rhino.Node node18 = node17.getLastSibling();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        int int28 = node27.getChangeTime();
        boolean boolean29 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean34 = node27.hasChild(node33);
        com.google.javascript.rhino.Node node36 = node27.getAncestor((int) (byte) 1);
        int int37 = node18.getIndexOfChild(node36);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isLabel();
        com.google.javascript.rhino.Node node25 = node3.getNext();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node38.isGetterDef();
        node38.setType((int) '#');
        boolean boolean45 = node38.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        boolean boolean55 = node53.isStringKey();
        boolean boolean56 = node53.isThrow();
        com.google.javascript.rhino.Node node57 = node53.getParent();
        node38.addChildToBack(node53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node53.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        node72.addSuppression("hi!");
        boolean boolean75 = node63.isEquivalentTo(node72);
        boolean boolean76 = node72.isGetterDef();
        node72.setType((int) '#');
        boolean boolean79 = node72.isVar();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node88 = node83.copyInformationFrom(node87);
        boolean boolean89 = node88.isAssignAdd();
        boolean boolean90 = node88.isTrue();
        boolean boolean91 = node88.wasEmptyNode();
        int int92 = node72.getIndexOfChild(node88);
        com.google.javascript.rhino.Node node93 = node72.getFirstChild();
        int int94 = node72.getChangeTime();
        node53.addChildToFront(node72);
        boolean boolean96 = node72.isTry();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node72.siblings();
        com.google.javascript.rhino.Node node98 = node3.copyInformationFrom(node72);
        boolean boolean99 = node72.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(nodeIterable97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        boolean boolean39 = node3.isCall();
        boolean boolean40 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags81 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags81.setMutatesArguments();
        sideEffectFlags81.clearAllFlags();
        sideEffectFlags81.setReturnsTainted();
        sideEffectFlags81.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node79.setSideEffectFlags(sideEffectFlags81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        boolean boolean66 = node62.isVarArgs();
        node62.setCharno(55);
        java.lang.String str69 = node62.getSourceFileName();
        boolean boolean70 = node62.isDo();
        // The following exception was thrown during execution in test generation
        try {
            int int72 = node62.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        boolean boolean40 = node18.isStringKey();
        node18.removeProp(4095);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = node87.copyInformationFrom(node91);
        boolean boolean93 = node82.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = node82.cloneTree();
        boolean boolean95 = node94.isExprResult();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        java.lang.String str66 = node43.getQualifiedName();
        boolean boolean67 = node43.isBlock();
        boolean boolean68 = node43.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "NUMBER 0.0 [var_args_name: 1]");
        com.google.javascript.rhino.Node node4 = null;
        com.google.javascript.rhino.Node node5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) -1, node3, node4, node5, 32, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        int int85 = node84.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = node84.getJSDocInfo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNull(jSDocInfo86);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "");
        boolean boolean3 = node2.isNot();
        com.google.javascript.rhino.InputId inputId4 = node2.getInputId();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(inputId4);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        int int55 = node7.getSourceOffset();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        boolean boolean65 = node63.isStringKey();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        com.google.javascript.rhino.Node node75 = node63.srcrefTree(node74);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node85 = node80.copyInformationFrom(node84);
        boolean boolean86 = node76.hasChild(node80);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = null;
        com.google.javascript.rhino.Node node88 = node76.setJSDocInfo(jSDocInfo87);
        // The following exception was thrown during execution in test generation
        try {
            node7.removeChild(node88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        boolean boolean12 = node8.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.InputId inputId21 = null;
        node19.setInputId(inputId21);
        com.google.javascript.rhino.Node node24 = node19.getChildAtIndex(0);
        boolean boolean25 = node19.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node41.isEmpty();
        double double43 = node41.getDouble();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        boolean boolean50 = node41.isCall();
        com.google.javascript.rhino.Node node51 = node41.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node51);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node19.getStaticSourceFile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node19.siblings();
        java.lang.String str24 = node19.toString();
        boolean boolean25 = node19.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 0.0" + "'", str24, "NUMBER 0.0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node11 = node7.getParent();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        boolean boolean21 = node19.isStringKey();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node31 = node19.srcrefTree(node30);
        boolean boolean32 = node30.isCatch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        boolean boolean43 = node41.hasMoreThanOneChild();
        java.lang.String str44 = node30.checkTreeEquals(node41);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        int int54 = node53.getChangeTime();
        node53.setVarArgs(true);
        java.lang.String str60 = node53.toString(false, true, true);
        com.google.javascript.rhino.Node node61 = node30.copyInformationFromForTree(node53);
        com.google.javascript.rhino.Node node62 = node7.useSourceInfoFrom(node30);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str60, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "");
        boolean boolean3 = node2.isThrow();
        node2.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = null;
        com.google.javascript.rhino.Node node32 = node20.setJSDocInfo(jSDocInfo31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node37 = node36.cloneTree();
        boolean boolean38 = node36.isFunction();
        boolean boolean39 = node36.isRegExp();
        boolean boolean40 = node20.hasChild(node36);
        boolean boolean41 = node20.isIn();
        java.lang.String str45 = node20.toString(false, true, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 0.0" + "'", str45, "NUMBER 0.0");
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isLabel();
        com.google.javascript.rhino.Node node25 = node3.getNext();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node38.isGetterDef();
        node38.setType((int) '#');
        boolean boolean45 = node38.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        boolean boolean55 = node53.isStringKey();
        boolean boolean56 = node53.isThrow();
        com.google.javascript.rhino.Node node57 = node53.getParent();
        node38.addChildToBack(node53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node53.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        node72.addSuppression("hi!");
        boolean boolean75 = node63.isEquivalentTo(node72);
        boolean boolean76 = node72.isGetterDef();
        node72.setType((int) '#');
        boolean boolean79 = node72.isVar();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node88 = node83.copyInformationFrom(node87);
        boolean boolean89 = node88.isAssignAdd();
        boolean boolean90 = node88.isTrue();
        boolean boolean91 = node88.wasEmptyNode();
        int int92 = node72.getIndexOfChild(node88);
        com.google.javascript.rhino.Node node93 = node72.getFirstChild();
        int int94 = node72.getChangeTime();
        node53.addChildToFront(node72);
        boolean boolean96 = node72.isTry();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node72.siblings();
        com.google.javascript.rhino.Node node98 = node3.copyInformationFrom(node72);
        boolean boolean99 = node3.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(nodeIterable97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        boolean boolean60 = node57.isNE();
        boolean boolean61 = node57.isContinue();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        boolean boolean71 = node69.isStringKey();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        com.google.javascript.rhino.Node node81 = node69.srcrefTree(node80);
        boolean boolean82 = node80.isCatch();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = node86.copyInformationFrom(node90);
        int int92 = node91.getChangeTime();
        boolean boolean93 = node91.hasMoreThanOneChild();
        java.lang.String str94 = node80.checkTreeEquals(node91);
        boolean boolean95 = node57.hasChild(node91);
        boolean boolean96 = node57.isOptionalArg();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        boolean boolean16 = node8.isQualifiedName();
        boolean boolean17 = node8.isFalse();
        boolean boolean18 = node8.isAnd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node26.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node37);
        boolean boolean39 = node37.isCatch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node43.isCase();
        boolean boolean57 = node43.isCast();
        com.google.javascript.rhino.Node node58 = node37.srcrefTree(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = null;
        com.google.javascript.rhino.Node node60 = node43.setJSDocInfo(jSDocInfo59);
        int int61 = node8.getIndexOfChild(node43);
        boolean boolean62 = node43.isName();
        boolean boolean63 = node43.isScript();
        boolean boolean64 = node43.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node7 = node1.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node1.new FileLevelJsDocBuilder();
        boolean boolean9 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        boolean boolean85 = node82.getBooleanProp(43);
        java.lang.Appendable appendable86 = null;
        // The following exception was thrown during execution in test generation
        try {
            node82.appendStringTree(appendable86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node12.siblings();
        boolean boolean21 = node12.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = node9.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        com.google.javascript.rhino.Node node20 = node9.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node24, node64);
        boolean boolean67 = node9.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, (int) (byte) 1, (-1));
        boolean boolean4 = node3.isOr();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        boolean boolean14 = node12.isStringKey();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = node18.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node23);
        int int25 = node24.getLineno();
        boolean boolean26 = node24.isTrue();
        com.google.javascript.rhino.Node node27 = node24.cloneNode();
        boolean boolean28 = node24.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = null;
        com.google.javascript.rhino.Node node30 = node24.setJSDocInfo(jSDocInfo29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = node3.removeChildAfter(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isWith();
        boolean boolean6 = node3.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.putIntProp(49, 52);
        // The following exception was thrown during execution in test generation
        try {
            node9.setSideEffectFlags(55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int12 = node9.getLength();
        boolean boolean13 = node9.isIn();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = node9.getExistingIntProp((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        boolean boolean8 = node7.isReturn();
        boolean boolean10 = node7.getBooleanProp(48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = node7.toString(true, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node77.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        com.google.javascript.rhino.Node node14 = node9.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = node14.isName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 0.0\n    NUMBER 0.0\n\n\nTree2:\nBITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n\n\nSubtree1: NUMBER 0.0\n    NUMBER 0.0\n\n\nSubtree2: BITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, 8, 16);
        boolean boolean4 = node3.isCase();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = node3.getExistingIntProp(56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 56");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        boolean boolean33 = node12.isGetterDef();
        boolean boolean34 = node12.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isBlock();
        boolean boolean34 = node20.isTry();
        node20.setOptionalArg(true);
        node20.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        java.lang.String str42 = node24.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.isLocalResultCall();
        boolean boolean84 = node82.isCatch();
        boolean boolean85 = node82.isBreak();
        boolean boolean86 = node82.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node33 = node12.getFirstChild();
        int int34 = node12.getChangeTime();
        boolean boolean35 = node12.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        int int50 = node49.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node49.setJSDocInfo(jSDocInfo51);
        int int54 = node49.getIntProp(56);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node14.cloneTree();
        boolean boolean16 = node14.isFunction();
        boolean boolean17 = node14.isRegExp();
        node8.addChildToBack(node14);
        boolean boolean19 = node8.isCase();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isFromExterns();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isBreak();
        boolean boolean33 = node28.isOr();
        boolean boolean34 = node28.isThis();
        com.google.javascript.rhino.Node node35 = node8.clonePropsFrom(node28);
        boolean boolean36 = node28.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags27 = null;
        // The following exception was thrown during execution in test generation
        try {
            node25.setSideEffectFlags(sideEffectFlags27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        int int28 = node19.getIntProp(56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node19.children();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        node42.addSuppression("hi!");
        boolean boolean45 = node33.isEquivalentTo(node42);
        node33.setDouble(1.0d);
        boolean boolean48 = node33.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        boolean boolean58 = node57.isAssignAdd();
        boolean boolean59 = node57.isFromExterns();
        boolean boolean60 = node57.isVarArgs();
        boolean boolean61 = node57.isDebugger();
        int int62 = node33.getIndexOfChild(node57);
        node19.addChildToBack(node33);
        node33.setSourceEncodedPosition(15);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node8.siblings();
        boolean boolean33 = node8.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node7.getJsDocBuilderForNode();
        fileLevelJsDocBuilder20.append("NUMBER 0.0\n");
        fileLevelJsDocBuilder20.append("NUMBER 51.0 36");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node8.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator13 = ancestorIterable12.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator14 = ancestorIterable12.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertNotNull(nodeSpliterator13);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.Node node12 = node8.getParent();
        com.google.javascript.rhino.Node node13 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        int int23 = node22.getChangeTime();
        boolean boolean24 = node22.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean29 = node22.hasChild(node28);
        boolean boolean30 = node22.isQualifiedName();
        boolean boolean31 = node22.isFalse();
        boolean boolean32 = node22.isAnd();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = node46.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node52 = node40.srcrefTree(node51);
        boolean boolean53 = node51.isCatch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = node61.copyInformationFrom(node65);
        node66.addSuppression("hi!");
        boolean boolean69 = node57.isEquivalentTo(node66);
        boolean boolean70 = node57.isCase();
        boolean boolean71 = node57.isCast();
        com.google.javascript.rhino.Node node72 = node51.srcrefTree(node57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = null;
        com.google.javascript.rhino.Node node74 = node57.setJSDocInfo(jSDocInfo73);
        int int75 = node22.getIndexOfChild(node57);
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildAfter(node13, node57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        boolean boolean15 = node14.isAssignAdd();
        boolean boolean16 = node14.isGetProp();
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        boolean boolean27 = node26.isAssignAdd();
        int int28 = node26.getCharno();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = node32.cloneTree();
        boolean boolean34 = node32.isFunction();
        boolean boolean35 = node32.isRegExp();
        node26.addChildToBack(node32);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(15, node1, node5, node14, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        boolean boolean85 = node84.isLocalResultCall();
        boolean boolean86 = node84.isNot();
        boolean boolean87 = node84.isIf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean11 = node8.getBooleanProp(55);
        boolean boolean12 = node8.isSyntheticBlock();
        com.google.javascript.rhino.InputId inputId13 = null;
        node8.setInputId(inputId13);
        node8.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        boolean boolean61 = node57.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            int int63 = node57.getExistingIntProp((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 100");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        java.lang.Class<?> wildcardClass33 = node29.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isFor();
        com.google.javascript.rhino.Node node12 = node8.getLastChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n");
        boolean boolean15 = node14.isNew();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        boolean boolean25 = node24.isAssignAdd();
        boolean boolean26 = node24.isTrue();
        boolean boolean27 = node24.isInstanceOf();
        boolean boolean28 = node24.isStringKey();
        boolean boolean29 = node24.isGetterDef();
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildBefore(node14, node24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean5 = node4.isReturn();
        boolean boolean6 = node4.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = node4.getJSDocInfo();
        com.google.javascript.rhino.InputId inputId8 = null;
        node4.setInputId(inputId8);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSDocInfo7);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n", (int) (byte) 10, (int) (short) 10);
        node3.setSourceEncodedPosition(36);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isFunction();
        node3.setCharno(55);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = node9.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        com.google.javascript.rhino.Node node20 = node9.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node24, node64);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node71 = node70.cloneTree();
        boolean boolean72 = node70.isQuotedString();
        boolean boolean73 = node70.isHook();
        com.google.javascript.rhino.Node node74 = node64.useSourceInfoFromForTree(node70);
        boolean boolean75 = node74.isContinue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        int int44 = node41.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        boolean boolean25 = node19.isVar();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node19.setJSType(jSType26);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node19.getChildAtIndex(16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isParamList();
        boolean boolean39 = node8.isExprResult();
        boolean boolean40 = node8.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node4.isQuotedString();
        boolean boolean6 = node4.isThrow();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags8.setMutatesArguments();
        sideEffectFlags8.clearAllFlags();
        sideEffectFlags8.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node4.setSideEffectFlags(sideEffectFlags8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean11 = node8.getBooleanProp(55);
        boolean boolean12 = node8.isIf();
        boolean boolean13 = node8.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isIf();
        boolean boolean22 = node19.isDelProp();
        boolean boolean23 = node19.isVar();
        int int24 = node19.getType();
        java.lang.Class<?> wildcardClass25 = node19.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 39 + "'", int24 == 39);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        boolean boolean61 = node57.isBreak();
        node57.putBooleanProp(0, false);
        boolean boolean66 = node57.getBooleanProp(0);
        boolean boolean67 = node57.isVarArgs();
        node57.setWasEmptyNode(true);
        boolean boolean70 = node57.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node79.isArrayLit();
        boolean boolean84 = node79.isFunction();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        int int50 = node49.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node49.setJSDocInfo(jSDocInfo51);
        java.lang.String str53 = node49.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER 0.0" + "'", str53, "NUMBER 0.0");
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        int int18 = node3.getSideEffectFlags();
        node3.setLength(49);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isSwitch();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags19.setMutatesArguments();
        sideEffectFlags19.setMutatesGlobalState();
        sideEffectFlags19.clearAllFlags();
        int int23 = sideEffectFlags19.valueOf();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        boolean boolean18 = node8.isGetElem();
        boolean boolean19 = node8.isBlock();
        boolean boolean20 = node8.isFalse();
        java.lang.Class<?> wildcardClass21 = node8.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        boolean boolean15 = node13.isStringKey();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node25 = node13.srcrefTree(node24);
        boolean boolean26 = node24.isCatch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        int int36 = node35.getChangeTime();
        boolean boolean37 = node35.hasMoreThanOneChild();
        java.lang.String str38 = node24.checkTreeEquals(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        int int48 = node47.getChangeTime();
        node47.setVarArgs(true);
        java.lang.String str54 = node47.toString(false, true, true);
        com.google.javascript.rhino.Node node55 = node24.copyInformationFromForTree(node47);
        int int56 = node55.getLength();
        node55.setOptionalArg(true);
        com.google.javascript.rhino.Node node59 = node3.useSourceInfoFromForTree(node55);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str54, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        int int28 = node19.getIntProp(56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node19.children();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        node42.addSuppression("hi!");
        boolean boolean45 = node33.isEquivalentTo(node42);
        node33.setDouble(1.0d);
        boolean boolean48 = node33.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        boolean boolean58 = node57.isAssignAdd();
        boolean boolean59 = node57.isFromExterns();
        boolean boolean60 = node57.isVarArgs();
        boolean boolean61 = node57.isDebugger();
        int int62 = node33.getIndexOfChild(node57);
        node19.addChildToBack(node33);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node19.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(staticSourceFile64);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node11 = node8.cloneTree();
        boolean boolean12 = node8.isFromExterns();
        java.lang.Appendable appendable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            node8.appendStringTree(appendable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean11 = node8.getBooleanProp(55);
        boolean boolean12 = node8.isSyntheticBlock();
        node8.setSourceEncodedPositionForTree((int) (byte) 0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 30, 53);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node8 = node7.cloneTree();
        boolean boolean9 = node7.isQuotedString();
        node7.setChangeTime((int) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node7.getStaticSourceFile();
        boolean boolean13 = node3.hasChild(node7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = node7.toString(true, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        node82.putBooleanProp(55, true);
        com.google.javascript.rhino.Node node87 = node82.cloneNode();
        com.google.javascript.rhino.Node node88 = node87.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(48);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        com.google.javascript.rhino.Node node59 = node57.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = node59.isUnscopedQualifiedName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node11.isStringKey();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node22);
        boolean boolean24 = node23.isScript();
        boolean boolean25 = node23.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node23.addChildToFront(node29);
        com.google.javascript.rhino.Node node31 = node3.copyInformationFrom(node29);
        boolean boolean32 = node31.isGetterDef();
        boolean boolean33 = node31.isSyntheticBlock();
        boolean boolean34 = node31.hasOneChild();
        boolean boolean35 = node31.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isFromExterns();
        boolean boolean30 = node27.isVarArgs();
        boolean boolean31 = node27.isDebugger();
        int int32 = node3.getIndexOfChild(node27);
        java.util.Set<java.lang.String> strSet33 = node3.getDirectives();
        boolean boolean34 = node3.isTry();
        boolean boolean35 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isTrue();
        com.google.javascript.rhino.Node node22 = node19.cloneNode();
        int int23 = node22.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 39 + "'", int23 == 39);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = node9.isStringKey();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        node57.setLength((int) ' ');
        boolean boolean62 = node57.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isWith();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node39 = node27.srcrefTree(node38);
        int int40 = node39.getLineno();
        boolean boolean41 = node39.isTrue();
        node3.addChildToBack(node39);
        boolean boolean43 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        java.lang.String[] strArray13 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", (int) ' ', (int) (byte) 1);
        boolean boolean21 = node8.isEquivalentToTyped(node20);
        java.lang.Class<?> wildcardClass22 = node8.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isNot();
        boolean boolean17 = node3.isFromExterns();
        com.google.javascript.rhino.Node node18 = node3.cloneNode();
        com.google.javascript.rhino.Node node20 = node3.getAncestor(46);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        boolean boolean60 = node57.isEmpty();
        boolean boolean61 = node57.isGetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100L, 0, 15);
        // The following exception was thrown during execution in test generation
        try {
            node3.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node21.hasChild(node25);
        int int32 = node25.getSourceOffset();
        boolean boolean33 = node25.isNoSideEffectsCall();
        boolean boolean34 = node25.isQuotedString();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        boolean boolean44 = node43.isAssignAdd();
        boolean boolean45 = node43.isGetProp();
        boolean boolean46 = node43.isArrayLit();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        node59.addSuppression("hi!");
        boolean boolean62 = node50.isEquivalentTo(node59);
        boolean boolean63 = node59.isGetterDef();
        node59.setType((int) '#');
        node43.addChildToFront(node59);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4, node25, node59, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        boolean boolean4 = node3.isString();
        boolean boolean5 = node3.isVarArgs();
        int int6 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        node8.setSourceEncodedPositionForTree(48);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        boolean boolean23 = node22.isAssignAdd();
        boolean boolean24 = node22.isGetProp();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node38.isGetterDef();
        node38.setType((int) '#');
        node22.addChildToFront(node38);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        int int55 = node54.getChangeTime();
        node54.setVarArgs(true);
        java.lang.String str61 = node54.toString(false, true, true);
        boolean boolean62 = node54.isBreak();
        com.google.javascript.rhino.Node node63 = node22.copyInformationFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = null;
        com.google.javascript.rhino.Node node65 = node63.setJSDocInfo(jSDocInfo64);
        node8.addChildToFront(node65);
        boolean boolean67 = node8.wasEmptyNode();
        boolean boolean68 = node8.isExprResult();
        boolean boolean69 = node8.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str61, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        boolean boolean61 = node57.isBreak();
        node57.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node72);
        int int74 = node73.getChangeTime();
        boolean boolean75 = node73.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean80 = node73.hasChild(node79);
        java.lang.String str81 = node57.checkTreeEquals(node79);
        boolean boolean82 = node57.isString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Node tree inequality:\nTree1:\nGETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n" + "'", str81, "Node tree inequality:\nTree1:\nGETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        node84.setWasEmptyNode(false);
        boolean boolean87 = node84.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        node50.removeProp((int) (short) -1);
        boolean boolean53 = node8.isEquivalentToShallow(node50);
        boolean boolean54 = node8.isCast();
        com.google.javascript.rhino.Node node55 = node8.getLastChild();
        com.google.javascript.rhino.Node node56 = node8.getNext();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(38);
        boolean boolean59 = node58.isAssignAdd();
        boolean boolean60 = node8.hasChild(node58);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        node8.setLineno(0);
        com.google.javascript.rhino.Node node18 = node8.removeChildren();
        com.google.javascript.rhino.Node node20 = node8.getAncestor(12);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        java.lang.Object obj5 = node3.getProp((int) (byte) 100);
        boolean boolean6 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node7 = node3.getLastSibling();
        int int8 = node7.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 56 + "'", int8 == 56);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(30, 56, 29);
        node3.setOptionalArg(true);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        boolean boolean60 = node57.isNE();
        boolean boolean61 = node57.isContinue();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        boolean boolean71 = node69.isStringKey();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        com.google.javascript.rhino.Node node81 = node69.srcrefTree(node80);
        boolean boolean82 = node80.isCatch();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = node86.copyInformationFrom(node90);
        int int92 = node91.getChangeTime();
        boolean boolean93 = node91.hasMoreThanOneChild();
        java.lang.String str94 = node80.checkTreeEquals(node91);
        boolean boolean95 = node57.hasChild(node91);
        int int96 = node91.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        int int21 = node19.getCharno();
        java.lang.String str22 = node19.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node19.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        int int10 = node9.getChangeTime();
        node9.setVarArgs(true);
        java.lang.String str16 = node9.toString(false, true, true);
        boolean boolean17 = node9.isBreak();
        node9.addSuppression("NUMBER 0.0\n");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node9);
        boolean boolean21 = node9.isCast();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str16, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node8.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', node8);
        java.lang.Appendable appendable23 = null;
        // The following exception was thrown during execution in test generation
        try {
            node22.appendStringTree(appendable23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isBlock();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneTree();
        boolean boolean40 = node38.isFunction();
        boolean boolean41 = node38.isRegExp();
        boolean boolean42 = node38.isFunction();
        node20.putProp((int) 'a', (java.lang.Object) node38);
        boolean boolean44 = node20.isSetterDef();
        boolean boolean45 = node20.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        node44.setDouble(100.0d);
        boolean boolean87 = node44.isBreak();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isWhile();
        node8.setOptionalArg(false);
        node8.setType((-1));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isCase();
        node19.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node25 = node19.getAncestor(10);
        boolean boolean26 = node19.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node27.setStaticSourceFile(staticSourceFile33);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder35 = node27.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        int int55 = node7.getSourceOffset();
        java.lang.Appendable appendable56 = null;
        // The following exception was thrown during execution in test generation
        try {
            node7.appendStringTree(appendable56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) ' ', 49);
        boolean boolean4 = node3.isNE();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isLabel();
        com.google.javascript.rhino.Node node25 = node3.getNext();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node38.isGetterDef();
        node38.setType((int) '#');
        boolean boolean45 = node38.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        boolean boolean55 = node53.isStringKey();
        boolean boolean56 = node53.isThrow();
        com.google.javascript.rhino.Node node57 = node53.getParent();
        node38.addChildToBack(node53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node53.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        node72.addSuppression("hi!");
        boolean boolean75 = node63.isEquivalentTo(node72);
        boolean boolean76 = node72.isGetterDef();
        node72.setType((int) '#');
        boolean boolean79 = node72.isVar();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node88 = node83.copyInformationFrom(node87);
        boolean boolean89 = node88.isAssignAdd();
        boolean boolean90 = node88.isTrue();
        boolean boolean91 = node88.wasEmptyNode();
        int int92 = node72.getIndexOfChild(node88);
        com.google.javascript.rhino.Node node93 = node72.getFirstChild();
        int int94 = node72.getChangeTime();
        node53.addChildToFront(node72);
        boolean boolean96 = node72.isTry();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node72.siblings();
        com.google.javascript.rhino.Node node98 = node3.copyInformationFrom(node72);
        boolean boolean99 = node98.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(nodeIterable97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node24.isStringKey();
        node24.setDouble((double) (short) -1);
        boolean boolean45 = node24.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        boolean boolean39 = node3.isCall();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        boolean boolean49 = node47.isStringKey();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        com.google.javascript.rhino.Node node59 = node47.srcrefTree(node58);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node60.hasChild(node64);
        int int71 = node64.getSourceOffset();
        boolean boolean72 = node64.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node3.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = node77.copyInformationFrom(node81);
        int int83 = node82.getChangeTime();
        node82.setVarArgs(true);
        node82.setType(51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable88 = node82.siblings();
        node82.setChangeTime((int) (byte) -1);
        com.google.javascript.rhino.Node node94 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        java.lang.Object obj96 = node94.getProp((int) (byte) 100);
        boolean boolean97 = node94.isOnlyModifiesThisCall();
        boolean boolean98 = node94.isComma();
        // The following exception was thrown during execution in test generation
        try {
            node73.addChildBefore(node82, node94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(nodeIterable88);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node30.isAssignAdd();
        boolean boolean32 = node30.isTrue();
        double double33 = node30.getDouble();
        com.google.javascript.rhino.Node node34 = node30.removeFirstChild();
        boolean boolean35 = node30.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = node18.removeChildAfter(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isParamList();
        java.lang.Class<?> wildcardClass39 = node8.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        java.util.Set<java.lang.String> strSet12 = node8.getDirectives();
        boolean boolean13 = node8.isStringKey();
        boolean boolean14 = node8.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node8.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isBlock();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneTree();
        boolean boolean40 = node38.isFunction();
        boolean boolean41 = node38.isRegExp();
        boolean boolean42 = node38.isFunction();
        node20.putProp((int) 'a', (java.lang.Object) node38);
        node38.setChangeTime(0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean61 = node60.isReturn();
        boolean boolean62 = node60.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = node60.getJSDocInfo();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(35, node60, 8, 2);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int71 = node70.getSourcePosition();
        boolean boolean72 = node70.isWith();
        // The following exception was thrown during execution in test generation
        try {
            node9.replaceChildAfter(node66, node70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSDocInfo63);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 409638 + "'", int71 == 409638);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node19.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isNumber();
        com.google.javascript.rhino.Node node61 = node57.removeChildren();
        boolean boolean62 = node61.isQuotedString();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        int int73 = node72.getSourcePosition();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(50, node72);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean80 = node79.isReturn();
        boolean boolean81 = node79.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = node79.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            node61.addChildAfter(node74, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo82);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(50, "NUMBER 51.0 36");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        node8.setSourceEncodedPositionForTree(48);
        boolean boolean14 = node8.isGetElem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node8.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', node8);
        boolean boolean23 = node8.isOnlyModifiesThisCall();
        node8.setDouble((double) 100);
        boolean boolean26 = node8.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, 8, 16);
        boolean boolean4 = node3.isCase();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet18);
        boolean boolean22 = node13.getBooleanProp((int) '4');
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        int int43 = node42.getLineno();
        boolean boolean44 = node42.isTrue();
        com.google.javascript.rhino.Node node45 = node42.cloneNode();
        boolean boolean46 = node42.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = null;
        com.google.javascript.rhino.Node node48 = node42.setJSDocInfo(jSDocInfo47);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node13, node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = node87.copyInformationFrom(node91);
        boolean boolean93 = node82.isEquivalentToTyped(node92);
        boolean boolean94 = node92.isParamList();
        boolean boolean95 = node92.isDo();
        java.lang.String str96 = node92.getSourceFileName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        boolean boolean4 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        boolean boolean14 = node13.isAssignAdd();
        boolean boolean15 = node13.isTrue();
        boolean boolean16 = node13.wasEmptyNode();
        boolean boolean17 = node13.isStringKey();
        boolean boolean18 = node13.isTypeOf();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        int int28 = node27.getChangeTime();
        boolean boolean29 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean34 = node27.hasChild(node33);
        com.google.javascript.rhino.Node node35 = node13.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node36 = node3.srcref(node13);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node13.setJSType(jSType37);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(37, "NUMBER 0.0\n");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = node6.copyInformationFrom(node10);
        boolean boolean12 = node10.isStringKey();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node22 = node10.srcrefTree(node21);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = node27.copyInformationFrom(node31);
        boolean boolean33 = node23.hasChild(node27);
        java.util.Set<java.lang.String> strSet34 = node23.getDirectives();
        boolean boolean35 = node23.isFromExterns();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = node2.removeChildAfter(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = node8.hasChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        boolean boolean26 = node25.isAssignAdd();
        boolean boolean27 = node25.isGetProp();
        com.google.javascript.rhino.Node node28 = node25.cloneTree();
        boolean boolean29 = node8.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = node8.copyInformationFromForTree(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        int int21 = node19.getSideEffectFlags();
        boolean boolean22 = node19.isComma();
        node19.setWasEmptyNode(true);
        boolean boolean25 = node19.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        boolean boolean25 = node19.isVar();
        boolean boolean26 = node19.isDo();
        node19.setDouble(0.0d);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        node41.addSuppression("hi!");
        boolean boolean44 = node32.isEquivalentTo(node41);
        boolean boolean45 = node41.isGetterDef();
        node41.setType((int) '#');
        boolean boolean48 = node41.isVar();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        node57.addSuppression("hi!");
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean66 = node57.getBooleanProp((int) '4');
        boolean boolean67 = node57.isGetElem();
        int int68 = node57.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node19.replaceChildAfter(node41, node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "NUMBER 0.0 [var_args_name: 1]");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = node6.copyInformationFrom(node10);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isTrue();
        double double14 = node11.getDouble();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        node2.addChildToFront(node11);
        com.google.javascript.rhino.Node node17 = node2.getParent();
        java.lang.Object obj19 = node2.getProp(31);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean11 = node10.isReturn();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        boolean boolean21 = node20.isAssignAdd();
        java.lang.String[] strArray25 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet26);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet26);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet26);
        int int31 = node3.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4196 + "'", int31 == 4196);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        java.lang.String str16 = node14.getQualifiedName();
        int int17 = node14.getType();
        boolean boolean18 = node14.isSetterDef();
        boolean boolean19 = node14.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(409638, nodeArray7, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) 'a', nodeArray7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, nodeArray7, 12, 36);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(43, nodeArray7);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(10, nodeArray7, (-1), 12);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str13 = node9.toString(false, false, false);
        boolean boolean14 = node9.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 0.0" + "'", str13, "NUMBER 0.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        int int31 = node24.getSourceOffset();
        boolean boolean32 = node24.isNoSideEffectsCall();
        boolean boolean33 = node24.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        node46.addSuppression("hi!");
        boolean boolean49 = node37.isEquivalentTo(node46);
        boolean boolean50 = node46.isGetterDef();
        node46.setType((int) '#');
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isCase();
        boolean boolean70 = node56.isCast();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node56);
        com.google.javascript.rhino.Node node72 = node24.useSourceInfoFrom(node46);
        node24.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        node19.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        boolean boolean24 = node19.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            node19.setString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpected prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        int int28 = node19.getIntProp(56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node19.children();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        node42.addSuppression("hi!");
        boolean boolean45 = node33.isEquivalentTo(node42);
        node33.setDouble(1.0d);
        boolean boolean48 = node33.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        boolean boolean58 = node57.isAssignAdd();
        boolean boolean59 = node57.isFromExterns();
        boolean boolean60 = node57.isVarArgs();
        boolean boolean61 = node57.isDebugger();
        int int62 = node33.getIndexOfChild(node57);
        node19.addChildToBack(node33);
        int int64 = node33.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node5 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }
}


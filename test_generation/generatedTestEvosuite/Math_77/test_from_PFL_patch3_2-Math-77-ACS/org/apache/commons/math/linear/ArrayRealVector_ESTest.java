/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:26:17 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayRealVector_ESTest extends ArrayRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeDivide(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = arrayRealVector0.equals(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.1102230246251565E-16);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = arrayRealVector0.equals(openMapRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = Double.valueOf(2190.2);
      assertNotNull(double0);
      assertEquals(2190.2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(6570.599999999999, arrayRealVector0.getNorm(), 0.01);
      assertEquals(19711.800000000003, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      arrayRealVector0.setSubVector(0, (RealVector) openMapRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(6570.599999999999, arrayRealVector0.getNorm(), 0.01);
      assertEquals(19711.800000000003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(56);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(56, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtractToSelf((-1.0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector1.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(56, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(56, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(56, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.projection(arrayRealVector0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.5, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(0.5, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1784.9894735);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(1784.9894735, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1784.9894735, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {(-1784.9894735)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.projection((RealVector) arrayRealVector0);
      assertEquals(1784.9894735, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1784.9894735, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1784.9894735, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(1784.9894735, realVector0.getL1Norm(), 0.01);
      assertEquals(1, realVector0.getDimension());
      assertArrayEquals(new double[] {(-1784.9894735)}, doubleArray0, 0.01);
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = Double.NaN;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01);
      assertTrue(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.unitVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01);
      assertTrue(arrayRealVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(9, realVector0.getDimension());
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 4337.007915286857;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(4337.007915286857, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4337.007915286857, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 4337.007915286857}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2875.29);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 4337.007915286857}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(4337.007915286857, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4337.007915286857, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 4337.007915286857}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2, 2, 2);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapCosToSelf();
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(1.4142135623730951, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(2.0, realVector0.getL1Norm(), 0.01);
      assertEquals(2, realVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      
      double double0 = arrayRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertEquals(1.4142135623730951, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.5);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = arrayRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 31;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(31.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {31.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      assertEquals(31.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertArrayEquals(new double[] {31.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertEquals(31.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(1, realVector0.getDimension());
      assertEquals(1.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(1.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {31.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 31;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(31.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {31.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      assertEquals(31.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {31.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertEquals(31.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(961.0, realVector0.getNorm(), 0.01);
      assertEquals(1, realVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(961.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {31.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(6.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(6.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = doubleArray0[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(12.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8.48528137423857, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapInvToSelf();
      assertTrue(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getL1Norm(), 0.01);
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(8, realVector0.getDimension());
      assertTrue(realVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getNorm(), 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.5);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCbrtToSelf();
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector1.getSparcity(), 0.01);
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(2, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.subtract((RealVector) openMapRealVector0);
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.2937005259840998, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(0.2937005259840998, arrayRealVector1.getNorm(), 0.01);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(23, 23);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(23, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(23, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(23, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[6];
      arrayRealVector0.setSubVector(10, doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(23, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(23, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 17);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.09279563550022, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(289.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      arrayRealVector0.checkVectorDimensions(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.09279563550022, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(289.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 17);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.09279563550022, arrayRealVector0.getNorm(), 0.01);
      assertEquals(289.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      arrayRealVector0.checkVectorDimensions(17);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.09279563550022, arrayRealVector0.getNorm(), 0.01);
      assertEquals(289.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.setSubVector(1, (RealVector) arrayRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 15 out of allowed range [0, 14]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(56);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(56, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(56, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(56, arrayRealVector0.getDimension());
      assertEquals(63, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector1.setSubVector(56, (RealVector) openMapRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 111 out of allowed range [0, 62]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(9, doubleArray0.length);
      
      arrayRealVector1.setEntry(12, (-4807.01121857369));
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4807.01121857369, arrayRealVector1.getNorm(), 0.01);
      assertEquals(4807.01121857369, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      arrayRealVector0.set(0, arrayRealVector0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = arrayRealVector0.toArray();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapPowToSelf((-1.3969798100858457));
      assertTrue(arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getNorm(), 0.01);
      assertEquals(7, realVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getL1Norm(), 0.01);
      assertTrue(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract(arrayRealVector0);
      assertTrue(arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01);
      assertTrue(arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.projection((RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.projection(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapUlpToSelf();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapTanhToSelf();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapTanhToSelf();
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(5, realVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapTanToSelf();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapSubtractToSelf(4337.007915286857);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapSqrtToSelf();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapSignumToSelf();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapSignumToSelf();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(15, realVector0.getDimension());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapRintToSelf();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(12, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapLogToSelf();
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertTrue(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01);
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getL1Norm(), 0.01);
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(12, realVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertTrue(realVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapLog10ToSelf();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapLog10ToSelf();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertTrue(arrayRealVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getNorm(), 0.01);
      assertEquals(1, realVector0.getDimension());
      assertTrue(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapInvToSelf();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapExpm1ToSelf();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapExpToSelf();
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapDivideToSelf(404.698218033182);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapCeilToSelf();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAtanToSelf();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapAtanToSelf();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(15, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAsinToSelf();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAddToSelf(1.0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAcosToSelf();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapAcosToSelf();
      assertEquals(4.442882938158366, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(12.566370614359172, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(8, realVector0.getDimension());
      assertEquals(4.442882938158366, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(12.566370614359172, realVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAbsToSelf();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.getSubVector(0, 0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapCosToSelf();
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(5.5677643628300215, realVector0.getNorm(), 0.01);
      assertEquals(31, realVector0.getDimension());
      assertEquals(31.0, realVector0.getL1Norm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      
      double double0 = arrayRealVector0.getNorm();
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertEquals(5.5677643628300215, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2724.4982373968);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(2724.4982373968, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2724.4982373968, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-2724.4982373968), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      assertEquals(2724.4982373968, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(2724.4982373968, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-2724.4982373968), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(4, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapTanToSelf();
      assertEquals(0.9083454008824569, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.9083454008824569, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isNaN());
      assertEquals(0.9083454008824569, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(4, realVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.9083454008824569, realVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {(-0.9083454008824569), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotNull(realVector0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = arrayRealVector1.getLInfDistance(doubleArray0);
      assertEquals(2724.4982373968, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(2724.4982373968, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-0.9083454008824569), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(2723.5898919959177, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 5.5677643628300215;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5.5677643628300215, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 5.5677643628300215, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1676.11);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5.5677643628300215, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(5, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5.5677643628300215, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(5, doubleArray0.length);
      
      double double0 = arrayRealVector0.getLInfDistance((RealVector) arrayRealVector1);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5.5677643628300215, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 5.5677643628300215, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(5.5677643628300215, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.7071067811865476, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanh();
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.7071067811865476, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.6535323512024062, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.9242343145200195, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(1, doubleArray0.length);
      
      double double0 = arrayRealVector0.getLInfDistance(arrayRealVector1);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.7071067811865476, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.6535323512024062, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.9242343145200195, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.03788284273999026, double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4808.3901405988;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4808.3901405988, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(4808.3901405988, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {4808.3901405988, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = arrayRealVector0.getL1Norm();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4808.3901405988, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(4808.3901405988, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {4808.3901405988, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4808.3901405988, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(31, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(31, arrayRealVector1.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapExpToSelf();
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(31.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector1.getDimension());
      assertEquals(5.5677643628300215, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(31, realVector0.getDimension());
      assertEquals(31.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector0);
      assertSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      
      double double0 = arrayRealVector0.getL1Distance(realVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(31, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(31.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector1.getDimension());
      assertEquals(5.5677643628300215, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(31, realVector0.getDimension());
      assertEquals(31.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector0);
      assertSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertEquals(31.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(62);
      assertEquals(62, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExp();
      assertEquals(62, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(7.874007874011811, arrayRealVector1.getNorm(), 0.01);
      assertEquals(62.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(62, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      
      double double0 = arrayRealVector1.getL1Distance(arrayRealVector0);
      assertEquals(62, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(7.874007874011811, arrayRealVector1.getNorm(), 0.01);
      assertEquals(62.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(62, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(62.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(9);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getEntry(0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(4, 75.0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(300.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(150.0, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      AbstractRealVector abstractRealVector0 = arrayRealVector0.copy();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(300.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(150.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(150.0, abstractRealVector0.getNorm(), 0.01);
      assertFalse(abstractRealVector0.isInfinite());
      assertEquals(300.0, abstractRealVector0.getL1Norm(), 0.01);
      assertFalse(abstractRealVector0.isNaN());
      assertEquals(4, abstractRealVector0.getDimension());
      assertEquals(6.0, abstractRealVector0.getLInfNorm(), 0.01);
      assertTrue(abstractRealVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, abstractRealVector0);
      assertNotSame(abstractRealVector0, arrayRealVector0);
      assertNotNull(abstractRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapSqrtToSelf();
      assertEquals(34.64101615137755, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(17.320508075688775, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17.320508075688775, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(4, realVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(34.64101615137755, realVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.equals((Object)abstractRealVector0));
      assertFalse(realVector0.equals((Object)abstractRealVector0));
      assertNotSame(arrayRealVector0, abstractRealVector0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, abstractRealVector0);
      assertNotNull(realVector0);
      
      double double0 = arrayRealVector0.getDistance((RealVector) abstractRealVector0);
      assertEquals(34.64101615137755, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(17.320508075688775, arrayRealVector0.getNorm(), 0.01);
      assertEquals(150.0, abstractRealVector0.getNorm(), 0.01);
      assertFalse(abstractRealVector0.isInfinite());
      assertEquals(300.0, abstractRealVector0.getL1Norm(), 0.01);
      assertFalse(abstractRealVector0.isNaN());
      assertEquals(4, abstractRealVector0.getDimension());
      assertEquals(6.0, abstractRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.equals((Object)abstractRealVector0));
      assertFalse(abstractRealVector0.equals((Object)arrayRealVector0));
      assertFalse(abstractRealVector0.equals((Object)realVector0));
      assertNotSame(arrayRealVector0, abstractRealVector0);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(abstractRealVector0, arrayRealVector0);
      assertNotSame(abstractRealVector0, realVector0);
      assertEquals(132.67949192431124, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getDistance(arrayRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      int int0 = arrayRealVector0.getDimension();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      int int0 = arrayRealVector0.getDimension();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = arrayRealVector0.getDataRef();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeDivide(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertTrue(arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01);
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(5, doubleArray0.length);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.ebeMultiply(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertTrue(arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01);
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector2.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector2.getDimension());
      assertEquals(Double.NaN, arrayRealVector2.getNorm(), 0.01);
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(6.0, arrayRealVector2.getLInfNorm(), 0.01);
      assertTrue(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapAcos();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(23.561944901923454, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(15, realVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(6.083668013960418, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(15, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(23.561944901923454, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(15, realVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(6.083668013960418, realVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(6.083668013960418, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(23.561944901923454, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(15, doubleArray0.length);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeDivide(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(23.561944901923454, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(15, realVector0.getDimension());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(6.083668013960418, realVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(6.083668013960418, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(23.561944901923454, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector1.getDimension());
      assertEquals(6.0, arrayRealVector2.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector2.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(0.0, arrayRealVector2.getNorm(), 0.01);
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotNull(arrayRealVector2);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = arrayRealVector0.dotProduct(doubleArray0);
      assertEquals(0.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.5, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.5, 0.0}, doubleArray0, 0.01);
      assertEquals(0.25, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 351.557;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(351.557, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(351.557, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {351.557}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 351.557);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {351.557}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.add((RealVector) openMapRealVector0);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(351.557, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(351.557, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(1, realVector0.getDimension());
      assertEquals(703.114, realVector0.getL1Norm(), 0.01);
      assertEquals(703.114, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {351.557}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector1 = arrayRealVector0.mapTanToSelf();
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.3108458787218369, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.3108458787218369, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.3108458787218369, realVector1.getNorm(), 0.01);
      assertFalse(realVector1.isInfinite());
      assertFalse(realVector1.isNaN());
      assertEquals(0.3108458787218369, realVector1.getL1Norm(), 0.01);
      assertEquals(6.0, realVector1.getLInfNorm(), 0.01);
      assertEquals(1, realVector1.getDimension());
      assertArrayEquals(new double[] {(-0.3108458787218369)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector1.equals((Object)realVector0));
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertSame(realVector1, arrayRealVector0);
      assertNotSame(realVector1, realVector0);
      assertNotNull(realVector1);
      assertEquals(1, doubleArray0.length);
      
      double double0 = realVector0.dotProduct(doubleArray0);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.3108458787218369, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.3108458787218369, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(1, realVector0.getDimension());
      assertEquals(703.114, realVector0.getL1Norm(), 0.01);
      assertEquals(703.114, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {(-0.3108458787218369)}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)realVector1));
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, realVector1);
      assertEquals((-218.56008917162563), double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1726.76);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(1726.76, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1726.76, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1726.76), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1726.76, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(1726.76, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, (-1726.76), 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(4, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.mapTanToSelf();
      assertEquals(2.0448451833927845, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2.0448451833927845, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.0448451833927845, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(2.0448451833927845, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(4, realVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 2.0448451833927845, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = arrayRealVector1.dotProduct(realVector0);
      assertEquals(2.0448451833927845, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2.0448451833927845, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1726.76, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(1726.76, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(2.0448451833927845, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(2.0448451833927845, realVector0.getNorm(), 0.01);
      assertFalse(realVector0.isNaN());
      assertEquals(4, realVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 2.0448451833927845, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertSame(realVector0, arrayRealVector0);
      assertEquals((-3530.9568688753247), double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(270, 270);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(270, arrayRealVector0.getDimension());
      assertEquals(72900.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4436.552715791846, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.dotProduct(arrayRealVector0);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(270, arrayRealVector0.getDimension());
      assertEquals(72900.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4436.552715791846, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.9683E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      AbstractRealVector abstractRealVector0 = arrayRealVector0.copy();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, abstractRealVector0.getLInfNorm(), 0.01);
      assertFalse(abstractRealVector0.isNaN());
      assertEquals(0, abstractRealVector0.getDimension());
      assertEquals(0.0, abstractRealVector0.getNorm(), 0.01);
      assertFalse(abstractRealVector0.isInfinite());
      assertEquals(0.0, abstractRealVector0.getL1Norm(), 0.01);
      assertTrue(abstractRealVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, abstractRealVector0);
      assertNotSame(abstractRealVector0, arrayRealVector0);
      assertNotNull(abstractRealVector0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      RealVector realVector0 = arrayRealVector0.append(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(6.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(30, realVector0.getDimension());
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.append((RealVector) openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 556.176);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCosToSelf();
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5.5677643628300215, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(31.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(31, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5.5677643628300215, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(31.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(5.5677643628300215, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(31, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(62.0, arrayRealVector2.getL1Norm(), 0.01);
      assertEquals(62, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(7.874007874011811, arrayRealVector2.getNorm(), 0.01);
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(6.0, arrayRealVector2.getLInfNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotNull(arrayRealVector2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.append(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4808.3901405988;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(4808.3901405988, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4808.3901405988, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {4808.3901405988, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.add(arrayRealVector0);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(4808.3901405988, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4808.3901405988, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(9616.7802811976, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(9616.7802811976, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {4808.3901405988, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.add(arrayRealVector0);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(5, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      try { 
        arrayRealVector0.subtract(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 2 but expected 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.subtract((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      try { 
        arrayRealVector0.subtract((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.subtract((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(7, doubleArray0.length);
      
      try { 
        arrayRealVector1.subtract(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 14 but expected 7
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.subtract((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.setSubVector(1324, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 1,324 out of allowed range [0, 14]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      try { 
        arrayRealVector0.set(10, arrayRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 10 out of allowed range [0, -1]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.projection(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(14);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.projection((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector1.projection((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 2 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.projection((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.outerProduct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(943, 943);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(889249.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(28957.931676830787, arrayRealVector0.getNorm(), 0.01);
      assertEquals(943, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.outerProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      try { 
        arrayRealVector0.outerProduct(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid row dimension 0 (must be positive)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.outerProduct((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(322562);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(322562, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      arrayRealVector0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getSubVector(14, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 14 out of allowed range [0, -1]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[1];
      try { 
        arrayRealVector0.getLInfDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getLInfDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(9, doubleArray0.length);
      
      try { 
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getLInfDistance((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(14);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[0];
      try { 
        arrayRealVector0.getL1Distance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 14 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getL1Distance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(32);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(32, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      try { 
        arrayRealVector0.getL1Distance((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 32 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      try { 
        arrayRealVector0.getL1Distance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 3 but expected 10
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getEntry(2221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[4];
      try { 
        arrayRealVector0.getDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      try { 
        arrayRealVector0.getDistance((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 1 but expected 7
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(15, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector();
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.getDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 15 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(36);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(36, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[0];
      try { 
        arrayRealVector0.ebeMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 36 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.ebeMultiply((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(62);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(62, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(14);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(14, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[0];
      try { 
        arrayRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 14 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.ebeDivide((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.ebeDivide((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 0.5);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8.5, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(2.0615528128088303, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(17, (-133), 17);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.ebeDivide((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[4];
      try { 
        arrayRealVector0.dotProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 3 but expected 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.dotProduct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(2448);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(2448, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector1.dotProduct((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 2,448 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(36);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(36, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(12);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(12, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.dotProduct(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 36 but expected 12
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(31, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(31, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector();
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.checkVectorDimensions(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 31 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      
      try { 
        arrayRealVector0.checkVectorDimensions(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[1];
      try { 
        arrayRealVector0.add(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.add((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.add((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      try { 
        arrayRealVector0.add(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-6), (-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-248), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -248
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, 21, 186);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-141), (-141));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-5473), 1806);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2658, 2658);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2658, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(openMapRealVector0, (ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-13));
      assertEquals((-13), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector(arrayRealVector0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((-222), (-222));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((-10));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = arrayRealVector1.isNaN();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6.0, arrayRealVector1.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      try { 
        arrayRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = arrayRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = arrayRealVector0.getL1Distance(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(14);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(15, doubleArray0.length);
      
      double double0 = arrayRealVector0.getDistance(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(15, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      double double0 = arrayRealVector0.getNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      double double0 = arrayRealVector0.dotProduct(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double double0 = arrayRealVector0.dotProduct((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(1, arrayRealVector1.getDimension());
      
      RealVector realVector0 = arrayRealVector1.ebeMultiply(doubleArray0);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      arrayRealVector0.mapMultiplyToSelf(2230.77752829601);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      arrayRealVector0.data = doubleArray0;
      RealVector realVector0 = arrayRealVector0.subtract(doubleArray0);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      double[] doubleArray1 = arrayRealVector0.getData();
      RealVector realVector0 = arrayRealVector0.add(doubleArray1);
      assertEquals(0.0, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1711);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(3422, arrayRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double double0 = arrayRealVector0.getL1Distance(arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.set(1442, (ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      try { 
        arrayRealVector1.getLInfDistance((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 8 but expected 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.add((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(36);
      double double0 = arrayRealVector0.dotProduct(arrayRealVector0);
      assertEquals(36, arrayRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      // Undeclared exception!
      try { 
        arrayRealVector0.getDistance((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract(arrayRealVector0);
      assertFalse(arrayRealVector1.isNaN());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.setSubVector(3, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.ebeDivide(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(32);
      arrayRealVector0.hashCode();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(32, arrayRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector();
      boolean boolean0 = arrayRealVector0.equals(arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      boolean boolean0 = arrayRealVector0.equals("ED\"[~y>bG}V{,\"vW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      boolean boolean0 = arrayRealVector0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      boolean boolean0 = arrayRealVector0.equals(arrayRealVector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertFalse(boolean0);
      assertFalse(arrayRealVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid row dimension 0 (must be positive)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(56);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(56, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(4, 75.0);
      arrayRealVector0.unitize();
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      double double0 = arrayRealVector0.getLInfDistance(arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(270, 270);
      double double0 = arrayRealVector0.getLInfNorm();
      assertEquals(6.0, double0, 0.01);
      assertEquals(4436.552715791846, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double double0 = arrayRealVector0.getLInfNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double double0 = arrayRealVector0.getL1Norm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-707.739918858);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.5);
      double double0 = arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertEquals(500895.79274512845, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = arrayRealVector0.projection((RealVector) arrayRealVector0);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = arrayRealVector0.ebeDivide(doubleArray0);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeMultiply(arrayRealVector0);
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.ebeMultiply((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      arrayRealVector0.mapUlpToSelf();
      assertEquals(3.0E-323, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = arrayRealVector0.mapRintToSelf();
      assertFalse(realVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(15, 15);
      RealVector realVector0 = arrayRealVector0.mapFloorToSelf();
      assertEquals(58.09475019311125, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapFloorToSelf();
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = arrayRealVector0.mapCeilToSelf();
      assertFalse(realVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      RealVector realVector0 = arrayRealVector0.mapCbrtToSelf();
      assertEquals(6, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapCbrtToSelf();
      assertEquals(0.0, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = arrayRealVector0.mapAbsToSelf();
      assertEquals(0.0, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(56);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealVector realVector0 = arrayRealVector0.mapAsinToSelf();
      assertSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTan();
      arrayRealVector1.data = null;
      // Undeclared exception!
      try { 
        arrayRealVector1.setSubVector((-717), (RealVector) arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      RealVector realVector0 = arrayRealVector0.mapSinToSelf();
      assertEquals(6, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapSinToSelf();
      assertSame(arrayRealVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, 31, 31);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      arrayRealVector0.mapCosToSelf();
      arrayRealVector0.unitVector();
      assertEquals(31.0, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapCosToSelf();
      assertSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapSinhToSelf();
      assertSame(arrayRealVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapSinhToSelf();
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(10, 10);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      arrayRealVector0.mapCoshToSelf();
      assertEquals(10.0, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapCoshToSelf();
      assertEquals(0, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(32);
      RealVector realVector0 = arrayRealVector0.mapLog1pToSelf();
      assertEquals(32, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapLog1pToSelf();
      assertFalse(realVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog10();
      double double0 = arrayRealVector0.getDistance(arrayRealVector1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector();
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector1);
      ArrayRealVector arrayRealVector4 = arrayRealVector3.subtract(arrayRealVector0);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector4.getNorm(), 0.01);
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapLogToSelf();
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(56);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealVector realVector0 = arrayRealVector0.mapExpm1ToSelf();
      assertFalse(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealVector realVector0 = arrayRealVector0.mapPowToSelf(1.0E-12);
      assertEquals(0, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapDivideToSelf(0.5);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      arrayRealVector0.mapSubtractToSelf(2863.3669332);
      assertEquals(7013.7879326979255, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6);
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAddToSelf(6);
      arrayRealVector1.ebeMultiply(arrayRealVector0);
      assertEquals(14.696938456699069, arrayRealVector0.getNorm(), 0.01);
      assertEquals(36.0, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = arrayRealVector0.add((RealVector) arrayRealVector0);
      assertFalse(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(5, 0.0);
      try { 
        arrayRealVector0.add((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 2 but expected 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      try { 
        arrayRealVector1.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 4 but expected 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 2);
      assertEquals(2, arrayRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 1 and size 1 dont fit to the size of the input array {2}
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 24, 41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 24 and size 41 dont fit to the size of the input array {2}
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        arrayRealVector0.projection(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      arrayRealVector0.set((-259.27620976027));
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(270, 270);
      RealVector realVector0 = arrayRealVector0.subtract((RealVector) arrayRealVector0);
      boolean boolean0 = arrayRealVector0.equals(realVector0);
      assertFalse(boolean0);
      assertEquals(270, realVector0.getDimension());
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1.1071265895884022));
      RealVector realVector0 = arrayRealVector0.append((RealVector) openMapRealVector0);
      assertEquals(4, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.append(75.0);
      assertEquals(1, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.setEntry((-1818), (-1818));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index -1,818 out of allowed range [0, -1]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.projection((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(9, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      // Undeclared exception!
      try { 
        arrayRealVector0.append((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.getSubVector(0, (-684));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.projection(doubleArray0);
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.ebeDivide((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      boolean boolean0 = arrayRealVector1.isInfinite();
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(boolean0);
      assertFalse(arrayRealVector1.isNaN());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(270, 270);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      boolean boolean0 = arrayRealVector0.equals(arrayRealVector1);
      assertEquals(270, arrayRealVector1.getDimension());
      assertTrue(boolean0);
      assertFalse(arrayRealVector1.isNaN());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      double[] doubleArray1 = arrayRealVector0.getDataRef();
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.ebeMultiply(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(451);
      // Undeclared exception!
      try { 
        arrayRealVector0.append((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector(arrayRealVector0, (ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.projection(arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      String string0 = arrayRealVector0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double[] doubleArray0 = arrayRealVector0.getData();
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = arrayRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }
}

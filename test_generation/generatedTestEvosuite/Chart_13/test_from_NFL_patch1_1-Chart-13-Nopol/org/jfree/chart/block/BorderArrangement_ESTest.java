/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 22:01:12 GMT 2021
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.UnitType;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Hour;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BorderArrangement_ESTest extends BorderArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Range range0 = new Range(0.0, 4927.6897941219);
      Range.combine(range0, range0);
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(4927.6897941219, range0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      System.setCurrentTimeMillis((-1511L));
      System.setCurrentTimeMillis((-1511L));
      BlockContainer blockContainer2 = new BlockContainer(borderArrangement0);
      borderArrangement0.arrangeFR(blockContainer2, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      blockContainer0.setWidth((-2155.9133329344));
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement1.add(blockContainer0, (Object) null);
      borderArrangement1.arrangeNN(blockContainer0, (Graphics2D) null);
      System.setCurrentTimeMillis(1000L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      System.setCurrentTimeMillis(1000L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      RectangleEdge.opposite(rectangleEdge0);
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge1);
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      Range range0 = null;
      try {
        range0 = new Range(1084.19245, (-1368.0748776416037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1084.19245) <= upper (-1368.0748776416037).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      System.setCurrentTimeMillis(1011L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.arrangeRR(blockContainer0, range0, range0, (Graphics2D) null);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2.147483648E9), range0, lengthConstraintType0, 0.0, range0, lengthConstraintType1);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-2.147483648E9).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      blockContainer0.setPadding(0.0, 1.5, 3117.80582374378, 3117.80582374378);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement1.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      System.setCurrentTimeMillis((-13L));
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      borderArrangement0.arrangeRR(blockContainer0, range0, range0, (Graphics2D) null);
      System.setCurrentTimeMillis((-1L));
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-814.068871287), (-814.068871287));
      Size2D size2D0 = borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      Size2D size2D1 = borderArrangement0.arrangeFF(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      assertTrue(size2D1.equals((Object)size2D0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      RectangleEdge.coordinate(rectangle2D_Double0, rectangleEdge1);
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      Range range0 = new Range((-1368.0748776416037), 1084.19245);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1368.0748776416037), range0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer1, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1368.0748776416037).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.arrange((Graphics2D) null);
      Object object0 = new Object();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      System.setCurrentTimeMillis(1561L);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Size2D size2D0 = blockContainer0.arrange((Graphics2D) null);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(0.0, size2D0.height, 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Hour hour0 = new Hour();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      blockContainer0.setHeight(0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 23);
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      RectangleEdge rectangleEdge1 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, (Object) null);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, (-268.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-268.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      System.setCurrentTimeMillis((-1L));
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1L), (Range) null);
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      RectangleEdge rectangleEdge1 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer1, rectangleEdge1);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Range range0 = new Range(0.0, 1084.19245);
      Range.combine(range0, range0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      Object object0 = new Object();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1698.0738569573, range0);
      borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      rectangleConstraint0.calculateConstrainedSize(size2D0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(17, (-165), timeZone0);
      Range range1 = new Range(0.0, 2793.0);
      RectangleConstraint rectangleConstraint1 = new RectangleConstraint(range0, range1);
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement1);
      borderArrangement1.arrangeFR(blockContainer1, (Graphics2D) null, rectangleConstraint1);
      borderArrangement0.arrangeFR(blockContainer1, (Graphics2D) null, rectangleConstraint0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      borderArrangement0.arrangeRR(blockContainer0, range0, range0, (Graphics2D) null);
      System.setCurrentTimeMillis((-1L));
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      borderArrangement0.add(blockContainer1, rectangleEdge0);
      assertFalse(blockContainer1.equals((Object)blockContainer0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      blockContainer0.equals(sunHints_Key0);
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      borderArrangement0.add(blockContainer0, (Object) null);
      BorderArrangement borderArrangement1 = new BorderArrangement();
      BlockContainer blockContainer2 = new BlockContainer();
      Range range0 = new Range(1084.19245, Double.NaN);
      borderArrangement1.arrangeRR(blockContainer2, range0, range0, (Graphics2D) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      BorderArrangement borderArrangement2 = new BorderArrangement();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      borderArrangement2.add(blockContainer0, (Object) null);
      borderArrangement2.equals(borderArrangement0);
      System.setCurrentTimeMillis(2177L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      Object object0 = new Object();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      System.setCurrentTimeMillis(1561L);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1561L, 0.0);
      borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Object object0 = new Object();
      boolean boolean0 = borderArrangement0.equals(object0);
      assertFalse(boolean0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      Hour.parseHour("Pba\"l");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (-2.147483648E9));
      borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Graphics2D graphics2D0 = null;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      xYSeriesCollection0.getDomainBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        blockContainer0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 1011L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Object object0 = new Object();
      borderArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Graphics2D graphics2D0 = null;
      Hour.parseHour("Pba\"l");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (-2.147483648E9));
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      Object object0 = new Object();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1698.0738569573, range0);
      borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(17, (-165), timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      Object object0 = new Object();
      borderArrangement0.equals(borderArrangement0);
      System.setCurrentTimeMillis(1561L);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1338.7328095841165, (Range) null);
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      borderArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, 0.0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer1, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
      Object object0 = new Object();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      System.setCurrentTimeMillis(1561L);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      borderArrangement0.equals(borderArrangement1);
      System.setCurrentTimeMillis((-1742L));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      BlockBorder blockBorder0 = new BlockBorder();
      blockContainer1.setFrame(blockBorder0);
      borderArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, 0.0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR((BlockContainer) null, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Object object0 = new Object();
      borderArrangement0.equals(object0);
      BlockContainer blockContainer0 = new BlockContainer();
      Hour.parseHour("Pba\"l");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (-2.147483648E9));
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getColumnHeader();
      borderArrangement0.add(blockContainer0, (Object) null);
      borderArrangement0.equals((Object) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      timeSeriesCollection0.getDomainBounds(false);
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null);
      double double0 = 0.0;
      double double1 = (-1865.2877227);
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1865.2877227), Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.add((Block) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      blockContainer0.equals(borderArrangement0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      borderArrangement0.clear();
      BlockContainer blockContainer1 = new BlockContainer(borderArrangement0);
      borderArrangement0.arrangeFN(blockContainer1, (Graphics2D) null, 0.0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR((BlockContainer) null, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = new BlockContainer();
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 1011L);
      assertEquals(1011.0, size2D0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Font font0 = Font.decode("TimePeriodAnchor unknown.");
      Font font1 = font0.deriveFont(2958465);
      LabelBlock labelBlock0 = new LabelBlock("TimePeriodAnchor unknown.", font1);
      // Undeclared exception!
      try { 
        borderArrangement0.add(labelBlock0, "TimePeriodAnchor unknown.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.util.RectangleEdge
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Font font0 = Font.decode("5.");
      Font font1 = font0.deriveFont(2958465);
      LabelBlock labelBlock0 = new LabelBlock("TimePeriodAnchor unknown.", font1);
      // Undeclared exception!
      try { 
        borderArrangement0.add(labelBlock0, "TimePeriodAnchor unknown.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.util.RectangleEdge
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      System.setCurrentTimeMillis((-1L));
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
      BlockContainer blockContainer0 = null;
      int int0 = 0;
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 0
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = null;
      borderArrangement0.equals((Object) null);
      UnitType unitType0 = UnitType.ABSOLUTE;
      // Undeclared exception!
      try { 
        blockContainer0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement((HorizontalAlignment) null, verticalAlignment0, 0.0, 0.0);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      int int0 = (-5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-741), (-5), byteArray0, 0, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 22:07:06 GMT 2021
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1535.97), (-1535.97));
      range0.hashCode();
      assertEquals((-1535.97), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(8.78884416, 8.78884416);
      Range range1 = Range.expandToInclude(range0, 1847.084952);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      assertEquals(8.78884416, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1838.2961078399999, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-660.0), (-660.0));
      Range range1 = Range.shift(range0, (-660.0));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-1320.0), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 1.0);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      Range range2 = Range.combine(range1, range0);
      assertEquals((-0.5), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-205.5921));
      Range range1 = Range.combine((Range) null, range0);
      assertEquals((-205.5921), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1953.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, (-1395.689938532));
      Range range2 = Range.expand(range1, 0.0, 0.0);
      boolean boolean0 = range2.intersects(0.0, 0.0);
      assertTrue(boolean0);
      assertEquals((-696.844969266), range1.getCentralValue(), 0.01);
      assertEquals(1397.689938532, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-150.043688376042), (-150.043688376042));
      boolean boolean0 = range0.intersects(697.0, (-3309.94611569));
      assertFalse(boolean0);
      assertEquals((-150.043688376042), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(1.0, (-357.5809986));
      boolean boolean0 = range0.intersects((-357.5809986), 0.0);
      assertFalse(boolean0);
      assertEquals((-358.5809986), range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 3078.0867535271163);
      Range range2 = Range.shift(range1, 3078.0867535271163);
      boolean boolean0 = range2.contains(3078.0867535271163);
      assertEquals(3078.0867535271163, range2.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-150.043688376042), (-150.043688376042));
      Range range1 = Range.shift(range0, 0.0, false);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(3894.203937, 1.0);
      Range range1 = Range.expandToInclude(range0, (-363.108013175));
      Range range2 = Range.combine(range1, range1);
      Range range3 = Range.shift(range2, 1.0);
      assertNotSame(range2, range1);
      assertEquals((-180.0540065875), range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getUpperBound();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      double double0 = range1.getLowerBound();
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1953.5, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      Range range1 = Range.expandToInclude(range0, (-75.56969842));
      double double0 = range1.getLowerBound();
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-75.56969842), double0, 0.01);
      assertEquals((-37.28484921), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-1535.97), (-1535.97));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0.0, 185.0);
      double double0 = range0.getLength();
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(185.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(500.970577374445, 500.970577374445);
      double double0 = range0.getCentralValue();
      assertEquals(500.970577374445, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-4347.398199099), (-4347.398199099));
      double double0 = range0.getCentralValue();
      assertEquals((-4347.398199099), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(1.0, (-357.5809986));
      Range range1 = Range.expand(range0, 1.0, 0.0);
      Range range2 = Range.expandToInclude(range1, 1.0);
      assertEquals((-717.1619972), range1.getLength(), 0.01);
      assertEquals((-178.2904993), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      Range range2 = Range.expand(range1, (-1.0), (-1.0));
      Range range3 = Range.shift(range2, 0.0, false);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain((-3605.4993));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-2889.95), (-2889.95));
      double double0 = range0.constrain((-2889.95));
      assertEquals((-2889.95), double0, 0.01);
      assertEquals((-2889.95), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-92.4035154646), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-417.5575367451));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range1, (-1281.09611154));
      boolean boolean0 = range2.contains((-425.583877388));
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(976.75, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1281.09611154), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 2751.6488218);
      boolean boolean0 = range1.contains(0.0);
      assertEquals(2751.6488218, range1.getCentralValue(), 0.01);
      assertEquals(2751.6488218, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1953.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1953.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(1.0, (-659.6956494));
      Range range1 = Range.expandToInclude(range0, 1.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(6328.331544208189, 6328.331544208189);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      boolean boolean0 = range0.equals(range0);
      assertEquals(976.75, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(6328.331544208189, 6328.331544208189);
      Range range1 = Range.expandToInclude(range0, 1.0);
      Range range2 = Range.shift(range1, (-1805.1856883216), true);
      Range range3 = Range.shift(range2, 1.0, false);
      assertEquals(6327.331544208189, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      Range range1 = Range.shift(range0, (-1281.09611154));
      assertEquals((-304.34611154000004), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-774.6144641316716), (-774.6144641316716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.expandToInclude(range1, 0.0);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertSame(range2, range1);
      assertEquals(1.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.combine(range0, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-3168.0), 0.0);
      boolean boolean0 = range0.intersects((-1041.5365160858), 0.0);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      boolean boolean0 = range0.intersects(0.0, 1.0);
      assertTrue(boolean0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.intersects(0.0, 1.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.intersects(1.0, 0.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.constrain(1861.0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range(1953.5, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertEquals((-1953.5), range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      String string0 = range0.toString();
      assertEquals("Range[1.0,1.0]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, 1.0);
      Range range2 = Range.expandToInclude(range1, 0.0);
      boolean boolean0 = range2.intersects(1.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expand(range0, 1.0, 1089.0);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
  }
}

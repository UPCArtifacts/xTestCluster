/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:30:00 GMT 2021
 */

package org.apache.commons.math.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.PolynomialFunction;
import org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.PolynomialSplineFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1953.5201;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1953.5201, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 1953.5201, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        brentSolver0.solve(2403.83, Double.POSITIVE_INFINITY, Double.NaN);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (100) exceeded
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1.0E-6;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = brentSolver0.solve(1441.36, 0.0, 1.0E-6);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1.0E-6;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      brentSolver0.absoluteAccuracy = 0.0;
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      
      double double0 = brentSolver0.solve(4032.602504460624, 0.0, 1.0E-14);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertEquals(3.3333333333333375E-15, double0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      brentSolver0.defaultRelativeAccuracy = (-996.0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      
      double double0 = brentSolver0.solve((-220.0), 1606.5240328);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(4, polynomialFunction1.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertEquals(3.903183391591755E-7, double0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      brentSolver0.setMaximalIterationCount((-3583));
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-3583), brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      try { 
        brentSolver0.solve((-69.6307), 6.804332259297371E-6, Double.NaN);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (-3,583) exceeded
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = brentSolver0.solve(Double.NaN, Double.NaN);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1.0E-14;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0E-14, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0E-14, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = brentSolver0.solve(4032.602504460624, 0.0, 1.0E-14);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0E-14, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0E-14, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = brentSolver0.solve(0.0, 1.0, 1.0);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0E-14, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        brentSolver0.solve((-2183.8011), 1.0, 1873.8005);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial guess is not in search interval.  Initial: 1873.8005  Endpoints: [-2183.8011,1.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = brentSolver0.solve((-1612.9633), (double) 0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = brentSolver0.solve((-1654.3322862519697), (-114.00059465071644));
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-114.00059465071644), double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(15, polynomialFunctionLagrangeForm0.degree());
      assertEquals(16, doubleArray0.length);
      assertNotNull(polynomialFunctionLagrangeForm0);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunctionLagrangeForm0);
      assertEquals(15, polynomialFunctionLagrangeForm0.degree());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(16, doubleArray0.length);
      assertNotNull(brentSolver0);
      
      try { 
        brentSolver0.solve(5.1134163579285946E-6, 497.0, 5.1134163579285946E-6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Abscissa 0 is duplicated at both indices 1 and 1
         //
         verifyException("org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3152.0);
      doubleArray0[1] = (-1540.3316916012532);
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[1];
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      assertEquals(1, polynomialSplineFunction0.getN());
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunctionArray0.length);
      assertNotNull(polynomialSplineFunction0);
      assertArrayEquals(new double[] {(-3152.0), (-1540.3316916012532)}, doubleArray0, 0.01);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialSplineFunction0);
      assertEquals(1, polynomialSplineFunction0.getN());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunctionArray0.length);
      assertNotNull(brentSolver0);
      assertArrayEquals(new double[] {(-3152.0), (-1540.3316916012532)}, doubleArray0, 0.01);
      
      try { 
        brentSolver0.solve((-1540.3316916012532), Double.POSITIVE_INFINITY, (-1373.8));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Argument -1,373.8 outside domain [-3,152 ; -1,540.332]
         //
         verifyException("org.apache.commons.math.analysis.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(15, polynomialFunction0.degree());
      assertEquals(16, doubleArray0.length);
      assertNotNull(polynomialFunction0);
      
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      assertEquals(15, polynomialFunction0.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(16, doubleArray0.length);
      assertNotNull(brentSolver0);
      
      brentSolver0.f = null;
      assertEquals(15, polynomialFunction0.degree());
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        brentSolver0.solve(1.0E-15, 2061.6799, 0.9655533063477151);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      brentSolver0.setMaximalIterationCount(857);
      // Undeclared exception!
      brentSolver0.solve(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunctionLagrangeForm0);
      try { 
        brentSolver0.solve(444.8396616482453, 497.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Abscissa 0 is duplicated at both indices 1 and 1
         //
         verifyException("org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BrentSolver brentSolver0 = null;
      try {
        brentSolver0 = new BrentSolver((UnivariateRealFunction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function can not be null.
         //
         verifyException("org.apache.commons.math.analysis.UnivariateRealSolverImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.8020881757049665;
      doubleArray0[4] = 5.1134163579285946E-6;
      doubleArray0[5] = 5.1134163579285946E-6;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve(2824.25722205263, (-3111.97559), 5.1134163579285946E-6);
      assertEquals((-14.258376373264198), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      brentSolver0.functionValueAccuracy = Double.NaN;
      double double0 = brentSolver0.solve(Double.NaN, 0.17513051098160304, 0.005472828468327862);
      assertEquals(0.11857801868204625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1953.5201;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      // Undeclared exception!
      try { 
        brentSolver0.solve(1.0, 597.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [1.0,597.0]  Values: [1953.5201,1166251.4997]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      try { 
        brentSolver0.solve(Double.NaN, Double.NaN);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (100) exceeded
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1953.5201;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve(3.4205177939838904E-4, (-1808.9), 2.672279606485972E-6);
      assertEquals(4.2351647362715017E-22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3652.54;
      doubleArray0[1] = (-6.427251908524537);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve(3280.87306, (-6.427251908524537), 1.7263591416849522E-5);
      assertEquals(568.2895352453193, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve((-1505.7913072175343), (-1505.7913072175343), Double.NaN);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve(Double.NaN, 1033.083816, Double.NaN);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve(Double.NaN, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }
}

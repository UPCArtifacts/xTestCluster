/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 06:13:07 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueMarker_ESTest extends ValueMarker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1984.905834712349));
      ValueMarker valueMarker1 = new ValueMarker((-2494.836649036));
      boolean boolean0 = valueMarker1.equals(valueMarker0);
      assertFalse(boolean0);
      assertEquals((-2494.836649036), valueMarker1.getValue(), 0.01);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textHighlightText;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Stroke stroke0 = stackedAreaRenderer0.getItemStroke(0, 0);
      ValueMarker valueMarker0 = new ValueMarker(2881.626693657705, systemColor0, stroke0, systemColor0, stackedAreaRenderer0.DEFAULT_STROKE, 0);
      assertEquals(2881.626693657705, valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      double double0 = valueMarker0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      valueMarker0.setValue(Double.NEGATIVE_INFINITY);
      double double0 = valueMarker0.getValue();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(2447.973217216347, (Paint) null, candlestickRenderer0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1984.905834712349));
      ValueMarker valueMarker1 = new ValueMarker((-2494.836649036));
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(boolean0);
      assertEquals((-2494.836649036), valueMarker1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1984.905834712349));
      Object object0 = new Object();
      boolean boolean0 = valueMarker0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-1984.905834712349), valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(1384.4593972757666);
      boolean boolean0 = valueMarker0.equals(valueMarker0);
      assertEquals(1384.4593972757666, valueMarker0.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(5700.28733);
      ValueMarker valueMarker1 = (ValueMarker)valueMarker0.clone();
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertEquals(5700.28733, valueMarker1.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot0.getDomainGridlinePaint();
      ValueMarker valueMarker0 = new ValueMarker((-1.0), paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals((-1.0), valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker((-1.0), (Paint) null, meterPlot0.DEFAULT_OUTLINE_STROKE, (Paint) null, meterPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(5700.28733);
      double double0 = valueMarker0.getValue();
      assertEquals(5700.28733, double0, 0.01);
  }
}

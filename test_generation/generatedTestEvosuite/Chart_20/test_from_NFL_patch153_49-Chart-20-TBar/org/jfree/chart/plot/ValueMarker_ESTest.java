/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:27:54 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueMarker_ESTest extends ValueMarker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1984.905834712349));
      ValueMarker valueMarker1 = new ValueMarker((-2494.836649036));
      boolean boolean0 = valueMarker1.equals(valueMarker0);
      assertFalse(boolean0);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertEquals((-2494.836649036), valueMarker1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      ValueMarker valueMarker0 = new ValueMarker((-908.957385318), spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT, spiderWebPlot0.DEFAULT_LABEL_OUTLINE_STROKE, spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT, spiderWebPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      assertEquals((-908.957385318), valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      double double0 = valueMarker0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      valueMarker0.setValue(Double.NEGATIVE_INFINITY);
      double double0 = valueMarker0.getValue();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(2994.68, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, (-78));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(1.0, (Paint) null, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1984.905834712349));
      ValueMarker valueMarker1 = new ValueMarker((-2494.836649036));
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertFalse(boolean0);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertEquals((-2494.836649036), valueMarker1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker((-1984.905834712349));
      Object object0 = new Object();
      boolean boolean0 = valueMarker0.equals(object0);
      assertEquals((-1984.905834712349), valueMarker0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(1384.4593972757666);
      boolean boolean0 = valueMarker0.equals(valueMarker0);
      assertEquals(1384.4593972757666, valueMarker0.getValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(2212.6116972264504);
      ValueMarker valueMarker1 = (ValueMarker)valueMarker0.clone();
      boolean boolean0 = valueMarker0.equals(valueMarker1);
      assertTrue(boolean0);
      assertEquals(2212.6116972264504, valueMarker1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Paint paint0 = categoryAxis3D0.getLabelPaint();
      ValueMarker valueMarker0 = new ValueMarker((-108.403887104917), paint0, categoryAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertEquals((-108.403887104917), valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValueMarker valueMarker0 = new ValueMarker(5700.28733);
      double double0 = valueMarker0.getValue();
      assertEquals(5700.28733, double0, 0.01);
  }
}

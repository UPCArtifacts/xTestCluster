/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 22:01:06 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.CombinedDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.SeriesDataset;
import org.jfree.data.general.SubSeriesDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDataset_ESTest extends AbstractDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      int[] intArray0 = new int[4];
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(defaultIntervalCategoryDataset0, intArray0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(subSeriesDataset0, 10);
      subSeriesDataset0.addChangeListener(xYBarDataset0);
      subSeriesDataset0.fireDatasetChanged();
      assertEquals(4, subSeriesDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      int[] intArray0 = new int[5];
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
      DatasetGroup datasetGroup0 = histogramDataset0.getGroup();
      subSeriesDataset0.setGroup(datasetGroup0);
      assertEquals(5, subSeriesDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1136), (-1136), bigInteger0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      waferMapDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals((-1136), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int[] intArray0 = new int[4];
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(taskSeriesCollection0, intArray0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      subSeriesDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(4, subSeriesDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long((-25));
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-25), long0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, (-1));
      waferMapDataset0.addChangeListener(categoryToPieDataset0);
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset((SeriesDataset) null, 3007);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      subSeriesDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        subSeriesDataset0.fireDatasetChanged();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.SubSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(combinedDataset0, 2);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      subSeriesDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        subSeriesDataset0.fireDatasetChanged();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(vectorSeriesCollection0, 4);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      subSeriesDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        subSeriesDataset0.fireDatasetChanged();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, (-352));
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      subSeriesDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        subSeriesDataset0.fireDatasetChanged();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(taskSeriesCollection0, 0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(subSeriesDataset0);
      subSeriesDataset0.addChangeListener(intervalXYDelegate0);
      // Undeclared exception!
      try { 
        subSeriesDataset0.fireDatasetChanged();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.TaskSeriesCollection cannot be cast to org.jfree.data.xy.XYDataset
         //
         verifyException("org.jfree.data.general.SubSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2, (byte)10, bigInteger0);
      boolean boolean0 = waferMapDataset0.hasListener(combinedDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      categoryTableXYDataset0.removeChangeListener(xYDatasetTableModel0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.setGroup((DatasetGroup) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.data.general.AbstractDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedDataset combinedDataset0 = new CombinedDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(combinedDataset0, (byte)10);
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(xYBarDataset0, (byte)5);
      Object object0 = subSeriesDataset0.clone();
      assertNotSame(object0, subSeriesDataset0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.validateObject();
  }
}

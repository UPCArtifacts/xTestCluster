/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:24:38 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathUtils.round(1030.0F, (-1), 6);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathUtils.scalb((-1), (-2147482514));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathUtils.mulAndCheck(9223372036854773805L, (-1L));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MathUtils.mulAndCheck(Integer.MIN_VALUE, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathUtils.lcm(1811, 1811);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.indicator((byte)3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.factorialDouble(69);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.factorialDouble((byte)0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[7];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.equals((double) 1L, (-1.0), 2.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.equals((-1560.4108), (-3035.04859627));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.binomialCoefficientLog(67, (-1139));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.binomialCoefficient(61, (-3833));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.addAndCheck(2147483646, 1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.addAndCheck(0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.subAndCheck((-894L), (-894L));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.subAndCheck(3731L, (-188L));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.subAndCheck(0, (-1074790400));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.subAndCheck(0, 967);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.sinh((-0.5));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.scalb(1, 1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.round(0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.round(1.0F, 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.round(0.0, (-1), 0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round(1365.87504155959, 0, 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round(1885.56589665, (-1802));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.normalizeAngle((-6.769213120412146E125), (-363.108013175));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.normalizeAngle(0.5, 1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.nextAfter((-4.9E-324), 1723969.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.mulAndCheck(129, 67);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.log(1365.87504155959, 1.0F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.log(500.9705773744451, 500.9705773744451);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.log(4550.81731640543, 0.0F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.hash((-1.0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.addAndCheck((-1L), 0L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(4.9E-324, 341, 341);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(2280.9417568817, 7, 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(2146913595);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(2145400734);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficientLog(Integer.MAX_VALUE, (-1132));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.round(Double.NEGATIVE_INFINITY, 0, (-3457));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.nextAfter(1.1102230246251565E-16, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.nextAfter((byte)0, (-444.28002541));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.nextAfter((byte)0, (short)0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.nextAfter(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2925L, 4503599627370496L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathUtils.mulAndCheck((long) (byte)3, (long) (byte)3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MathUtils.mulAndCheck((-1692L), 704L);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147481956), (-2147451158));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.indicator((float) (-3678));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathUtils.gcd(1616, (-1555));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathUtils.factorialLog(3036);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathUtils.factorial((byte)3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathUtils.equals(0.0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MathUtils.binomialCoefficientLog(1030, (byte)16);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(418, (byte)127);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(1121L, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(0, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.subAndCheck(1912, 1912);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2147482514), 1698);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.sign((short) (-1));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathUtils.sign((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MathUtils.sign((short)2368);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathUtils.sign((long) (byte) (-46));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathUtils.sign(1690L);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.sign((int) (byte)3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathUtils.sign((-2072));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathUtils.sign(0.69086087F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathUtils.sign((-99.8F));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathUtils.sign((double) Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.sign((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.sign(2107.312);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.sign((byte)3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathUtils.sign((byte) (-12));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.round((-249.68F), 1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathUtils.round((-2160.341F), 800, (int) (byte)3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathUtils.round((-4272.3374F), (-2147483646), 7);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathUtils.round(1030.0F, (-7), 6);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.round(1030.0F, 807, 2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathUtils.round((float) (byte) (-59), (-349), 1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.round(Double.POSITIVE_INFINITY, (-1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathUtils.round(Double.NaN, 0, 0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathUtils.scalb(0.0F, (-695));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.nextAfter((-1.0), 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathUtils.nextAfter(3761.7663502759337, (-1264.118071621179));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathUtils.round(2298.142F, (-569), (int) (byte)3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathUtils.round((float) 0, 1074790400);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathUtils.mulAndCheck((long) (byte)0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-543L), 1273720035845738052L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathUtils.mulAndCheck((-740L), 0L);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9218868437227405313L), (-9218868437227405313L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathUtils.mulAndCheck((long) Integer.MIN_VALUE, (long) (-1132));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2146706418), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(Integer.MIN_VALUE, 128);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathUtils.lcm(682, 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathUtils.lcm(0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathUtils.indicator((short)2381);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.indicator((short) (-1282));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathUtils.indicator(39916800L);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathUtils.indicator((-1274L));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.indicator(21);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.indicator((-703));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathUtils.round((-1903.517F), 1325, 5);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-1), (-1057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.indicator((double) (-1.0F));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathUtils.indicator(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.indicator(0.001953125);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.indicator((byte) (-64));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.gcd(20, 20);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.gcd((-2143337925), 9981);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathUtils.gcd((-3847), 0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathUtils.gcd(0, (-1721));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.factorialLog(20);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble(Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(84);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.equals((double) (-1.0F), (double) (-2393.24F), 21100.905699478913);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.equals((-3948.54473), (-1713.3953969764361), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.equals(2.2250738585072014E-308, 1.1102230246251565E-16, (-1.0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.equals((double) 39916800L, (-1.0), (-802.9937311));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathUtils.equals((-3947.975061302807), (-3947.975061302807), (-3947.975061302807));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) Float.NaN;
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathUtils.equals(Double.NaN, (double) (-3139L));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathUtils.binomialCoefficientLog(0, (-1305));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathUtils.binomialCoefficientLog(20, 19);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.binomialCoefficientLog((short)1989, (short)1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathUtils.binomialCoefficientLog(257, 0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathUtils.binomialCoefficientLog(1811, 1811);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-178), (-1129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathUtils.binomialCoefficientLog(2030, 1030);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(1721, 1013);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(1016, 1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(128, 0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathUtils.binomialCoefficientDouble((byte)127, (byte)127);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, (-1678));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1379), (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-18), (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathUtils.binomialCoefficient(3126, (-1));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2797, (byte)86);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(14, 12);
      assertEquals(91L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(9, 1);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(61, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient((byte)1, (byte)1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2822), (-2822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-815), 707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (-1), 9223372036853618419L);
      assertEquals((-9223372036853618420L), long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = MathUtils.round((-795.1403454), 0);
      assertEquals((-795.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-3847), 1L);
      assertEquals((-1.690592006093084), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = MathUtils.sinh((byte)1);
      assertEquals(1.1752011936438014, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(3332L, (long) (short)1);
      assertEquals(3333L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-1), 0);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(923521, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = MathUtils.hash(Double.POSITIVE_INFINITY);
      assertEquals(2146435072, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:28:19 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathUtils.subAndCheck(Integer.MAX_VALUE, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathUtils.scalb((-18.59463), (-2146813769));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathUtils.mulAndCheck((-1L), 9223372036854772061L);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MathUtils.mulAndCheck((-14L), 184L);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MathUtils.lcm(1811, 1811);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathUtils.lcm((-2179), (-1691));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathUtils.indicator((short)3570);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.indicator(9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.indicator(3813);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.indicator((byte)3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.gcd((byte)0, (-3195));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.factorialDouble(26);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.factorialDouble((byte)0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.factorialLog(20);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.equals(1.0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.binomialCoefficientLog(61, (-2261));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.binomialCoefficientLog(6, 3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.binomialCoefficientLog(0, (-1097));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.addAndCheck((-2886L), 0L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.addAndCheck(0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.subAndCheck((-2049), (-2049));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.subAndCheck((int) (byte)0, 7);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.sinh(0L);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.sinh((-1.0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.scalb(3610L, (-707));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.round((float) (byte)1, (-1), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.round(0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round((-1419.8225F), 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round(0.0, (-1), 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.round(1365.87504155959, 0, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.round(1885.56589665, (-1802));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.normalizeAngle(2.068949726559036E-210, (-2608.0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.nextAfter((-4.9E-324), 1723969.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.mulAndCheck(3036, 4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.log(0, 1393.018462102);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.log(500.9705773744451, 500.9705773744451);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.log((byte)1, 2.2250738585072014E-308);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 867.20939990349;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.hash((-1447.61399));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.hash((double) (-1313L));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.addAndCheck(1060900L, (-1L));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.addAndCheck(1030, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) 3628800L, (-1895), (-1895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(2145034977);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.round(Double.NEGATIVE_INFINITY, 0, (-3457));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.nextAfter(662.5294, (byte)3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.nextAfter((-1730.9043843789), (-1730.9043843789));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.nextAfter(Float.NaN, 3036);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2925L, 4503599627370496L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.mulAndCheck((long) (byte)3, (long) (byte)3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.mulAndCheck((-2194290L), (long) 0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathUtils.mulAndCheck((-423), 3033);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathUtils.indicator((float) (-3678));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.gcd(3036, 3036);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.gcd(210, 3013);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.factorialLog(3036);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.binomialCoefficientLog(3813, 12);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathUtils.binomialCoefficient(1, (-1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathUtils.sign((short) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathUtils.sign((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathUtils.sign((short)2368);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathUtils.sign((long) (byte)3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MathUtils.sign((-981L));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MathUtils.sign(14);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.sign((-3678));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathUtils.sign((float) (-7));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MathUtils.sign(827.0F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathUtils.sign((-1.1752011936438014));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathUtils.sign(1.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.sign((byte) (-14));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathUtils.sign((byte)3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathUtils.round(977.69696F, (-1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.round((-320.042F), 7, 7);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.round((float) 9L, (int) (byte)3, 5);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathUtils.round(Double.POSITIVE_INFINITY, (-1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathUtils.round((double) Float.NaN, 0, (-3847));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.nextAfter((short)1, (-4.9E-324));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.round((-582.64F), (-1), 0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.nextAfter(0, (-992.50704));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.nextAfter(0, 1623);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathUtils.mulAndCheck(1L, (-2715L));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.mulAndCheck((long) (byte) (-14), (long) (byte) (-14));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147481956), (-2147451158));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathUtils.lcm((byte)127, (byte)0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathUtils.indicator((short) (-1282));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathUtils.indicator((-167L));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.indicator((-364));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-981L), 1948, (int) (byte)79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathUtils.indicator((-424.030042032227));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathUtils.indicator((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathUtils.indicator(97.76969909667969);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathUtils.indicator((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathUtils.gcd((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathUtils.gcd(905, 0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(691);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.factorial(1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathUtils.equals((-450.400054), (double) (-707), (-450.400054));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathUtils.equals((double) (-1), 0.0, (double) 247);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.equals(600.22959067, (double) (-14L), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathUtils.equals(0.0, (double) 2683L, 2249.0001632112);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.equals(Double.NaN, (-2528.91));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.equals((double) 210, (double) 210);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.binomialCoefficientLog(542, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.binomialCoefficientLog(3813, 3036);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathUtils.binomialCoefficientLog(1623, (byte)1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathUtils.binomialCoefficientLog(3813, 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.binomialCoefficientLog(1811, 1811);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((byte) (-1), (byte) (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 3601);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(542, 11);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(8, 1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(7, 0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, 0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1144), (-1144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.binomialCoefficient(3036, (-2146114951));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(66, 13);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.binomialCoefficientLog(21, 19);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2012, 1030);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-952), (-952));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3678), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient((byte)1, (byte)1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-4964L), (long) (-2747));
      assertEquals((-7711L), long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 1030, 1060900L);
      assertEquals((-1059870L), long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3746L, (-876L));
      assertEquals(4622L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-29), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = MathUtils.round((-795.1403454), 0);
      assertEquals((-795.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.0, 3388.230825785563);
      assertEquals(3387.636880569797, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = MathUtils.sinh((byte)1);
      assertEquals(1.1752011936438014, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float float0 = MathUtils.round(1963.6816F, 146);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(961, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      assertEquals(0, int0);
  }
}

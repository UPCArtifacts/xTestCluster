/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:22:55 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenIntToDoubleHashMap_ESTest extends OpenIntToDoubleHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(5, 5);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(5, 5);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(5.0, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double1 = openIntToDoubleHashMap_Iterator0.value();
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(5.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0.5039018405998233);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0.0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.5039018405998233, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      int int0 = openIntToDoubleHashMap_Iterator0.key();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0.3333333333332802);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      boolean boolean0 = openIntToDoubleHashMap_Iterator0.hasNext();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put((-1023), (-2338.0));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(16, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(246, 246);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(1028, Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey((-185));
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0, openIntToDoubleHashMap1.size());
      assertNotNull(openIntToDoubleHashMap1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(5, 5);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(5, (-757.5464));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(5.0, double0, 0.01);
      
      int int0 = openIntToDoubleHashMap0.size();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(371, (-2395.07));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.get(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals((-2395.07), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put((-1023), (-2338.0));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove((-1023));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals((-2338.0), double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(0, (-2338.0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01);
      
      // Undeclared exception!
      openIntToDoubleHashMap0.remove((-1023));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-743));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.remove((-743));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(5452, 2679.7819279423);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      // Undeclared exception!
      openIntToDoubleHashMap0.iterator();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put((-2098), 0.0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      // Undeclared exception!
      openIntToDoubleHashMap0.get(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-1));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(1, (-892));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      // Undeclared exception!
      openIntToDoubleHashMap0.containsKey(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-1623), (-1623));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.containsKey((-1623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = null;
      try {
        openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-2145386495), (-2145386495));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = null;
      try {
        openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(5, 5);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      try { 
        openIntToDoubleHashMap_Iterator0.advance();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put((-2098), Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      double double0 = openIntToDoubleHashMap0.put((-2948), (-2948));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        openIntToDoubleHashMap_Iterator0.advance();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(260, 260);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double1 = openIntToDoubleHashMap_Iterator0.value();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(260.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      double double0 = openIntToDoubleHashMap0.put(1870, 1870);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(10, 10);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      int int0 = openIntToDoubleHashMap_Iterator0.key();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      double double0 = openIntToDoubleHashMap0.put(10, 10);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        openIntToDoubleHashMap_Iterator0.key();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-1945.6877));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      try { 
        openIntToDoubleHashMap_Iterator0.key();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(371, (-2395.07));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(371, Double.NaN);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-2395.07), double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      
      boolean boolean0 = openIntToDoubleHashMap_Iterator0.hasNext();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(782, 782);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(256, Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put((-2183), 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(260, 260);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.remove(213);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(1, (-892));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      // Undeclared exception!
      openIntToDoubleHashMap0.put((-892), (-892));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(246, 794.9);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.remove(246);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(794.9, double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.put(0, Double.NaN);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(246, 246);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(0, (-972.5666702119));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(256, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put((-2183), 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put((-2183), 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.get(0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      int int0 = openIntToDoubleHashMap0.size();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertNotNull(openIntToDoubleHashMap0);
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, Double.NaN);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      openIntToDoubleHashMap0.put(0, 0);
      openIntToDoubleHashMap0.get(17);
      assertEquals(1, openIntToDoubleHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-15));
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.put((-15), (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -235868399
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(12);
      openIntToDoubleHashMap0.put(12, 12);
      double double0 = openIntToDoubleHashMap0.get(12);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(12.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = null;
      try {
        openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((OpenIntToDoubleHashMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap_Iterator0.hasNext();
  }
}

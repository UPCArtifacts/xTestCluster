/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:26:44 GMT 2021
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math.ode.events.CombinedEventsManager;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CombinedEventsManager_ESTest extends CombinedEventsManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      combinedEventsManager0.addEventHandler((EventHandler) null, 3145, 3145, 3145);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        combinedEventsManager0.stepAccepted((-1591.745208614), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      combinedEventsManager0.addEventHandler(eventHandler0, (-1242), (-1242), (-1242));
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, doubleArray0, true);
      combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1242), 0.0, (double)(-1242), 2485.164549139042).when(eventHandler0).g(anyDouble() , any(double[].class));
      combinedEventsManager0.addEventHandler(eventHandler0, (-1242), (-1242), (-1242));
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, doubleArray0, true);
      try { 
        combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.ode.events.CombinedEventsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      combinedEventsManager0.addEventHandler((EventHandler) null, 0.0, 0.0, (-1081));
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      // Undeclared exception!
      try { 
        combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.sampling.DummyStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      combinedEventsManager0.addEventHandler((EventHandler) null, 0.0, 0.0, (-1));
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[9];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, doubleArray1, true);
      // Undeclared exception!
      try { 
        combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      double[] doubleArray0 = new double[7];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      combinedEventsManager0.addEventHandler(eventHandler0, (-152.597013), (-4865.901), (-674));
      boolean boolean0 = combinedEventsManager0.reset((-152.597013), doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)(-1242), 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      combinedEventsManager0.addEventHandler(eventHandler0, (-1242), (-1242), (-1242));
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, doubleArray0, true);
      boolean boolean0 = combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
      assertTrue(boolean0);
      
      combinedEventsManager0.stepAccepted(1164.6498394386, doubleArray0);
      boolean boolean1 = combinedEventsManager0.stop();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      combinedEventsManager0.addEventHandler(eventHandler0, (-152.597013), (-4865.901), (-674));
      boolean boolean0 = combinedEventsManager0.stop();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      double double0 = combinedEventsManager0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      double[] doubleArray0 = new double[7];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-152.597013), 0.0, 0.0, (-1720.3095), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      combinedEventsManager0.addEventHandler(eventHandler0, (-152.597013), 0.0, (-674));
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, doubleArray0, true);
      combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
      double double0 = combinedEventsManager0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      double[] doubleArray0 = new double[7];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-152.597013), 0.0, (-152.597013), 0.0, (-6671.228253533)).when(eventHandler0).g(anyDouble() , any(double[].class));
      combinedEventsManager0.addEventHandler(eventHandler0, (-152.597013), (-4865.901), (-674));
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, doubleArray0, true);
      boolean boolean0 = combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      double[] doubleArray0 = new double[7];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-152.597013), (-1.0), 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      combinedEventsManager0.addEventHandler(eventHandler0, (-152.597013), (-4865.901), (-674));
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, doubleArray0, false);
      combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
      boolean boolean0 = combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      boolean boolean0 = combinedEventsManager0.evaluateStep(dummyStepInterpolator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      boolean boolean0 = combinedEventsManager0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      combinedEventsManager0.addEventHandler(eventHandler0, (-152.597013), (-4865.901), (-674));
      Collection<EventHandler> collection0 = combinedEventsManager0.getEventsHandlers();
      assertTrue(collection0.contains(eventHandler0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      combinedEventsManager0.clearEventsHandlers();
      assertTrue(combinedEventsManager0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      assertTrue(combinedEventsManager0.isEmpty());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      combinedEventsManager0.addEventHandler(eventHandler0, (-152.597013), (-4865.901), (-674));
      boolean boolean0 = combinedEventsManager0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CombinedEventsManager combinedEventsManager0 = new CombinedEventsManager();
      Collection<EventState> collection0 = combinedEventsManager0.getEventsStates();
      assertNotNull(collection0);
  }
}

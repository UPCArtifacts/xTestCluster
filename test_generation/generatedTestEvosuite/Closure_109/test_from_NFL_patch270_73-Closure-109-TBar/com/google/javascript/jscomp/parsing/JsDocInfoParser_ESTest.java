/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:17:54 GMT 2021
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.io.File;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", 3, 3620);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2147483645, (-949), token_CommentType0, "error reporter");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("error reporter", comment0.getValue());
      assertEquals((-949), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(2147483645, comment0.getAbsolutePosition());
      assertEquals(2147483645, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("error reporter"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("error reporter"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("error reporter", comment0.getValue());
      assertEquals((-949), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(2147483645, comment0.getAbsolutePosition());
      assertEquals(2147483645, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("error reporter"));
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("error reporter", comment0.getValue());
      assertEquals((-949), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(2147483645, comment0.getAbsolutePosition());
      assertEquals(2147483645, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("error reporter", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(2147483645, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(hashSet0.contains("error reporter"));
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Yjp|d|%");
      assertNotNull(node0);
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertEquals(301, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Yjp|d|%");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-1091517569), 49, token_CommentType0, "undefined");
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(49, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1091517569), comment0.getPosition());
      assertEquals("undefined", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-1091517569), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Yjp|d|%"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertEquals(301, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(49, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1091517569), comment0.getPosition());
      assertEquals("undefined", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-1091517569), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertFalse(linkedHashSet0.contains("Yjp|d|%"));
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertEquals(301, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(49, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1091517569), comment0.getPosition());
      assertEquals("undefined", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-1091517569), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals((-1091517569), jSDocInfo0.getOriginalCommentPosition());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("undefined", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(linkedHashSet0.contains("Yjp|d|%"));
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("qNU`xr|23*I}M([P!F");
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 4, 55);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains(""));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("msg.jsdoc.desc.extra", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains(""));
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertEquals(302, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getLength());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isVarArgs());
      assertEquals(4, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertEquals(16438, node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(treeSet0.contains(""));
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$GrL", 1, (-1843135050));
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("$GrL"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("$GrL"));
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("$GrL"));
      
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node0);
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(304, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(set0.contains("$GrL"));
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Hf<m/");
      assertNotNull(jsDocTokenStream0);
      
      File file0 = MockFile.createTempFile("function", "Y+X -mqMN`Kyr_K");
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("function0Y+X -mqMN`Kyr_K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/function0Y+X -mqMN`Kyr_K", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("function0Y+X -mqMN`Kyr_K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/function0Y+X -mqMN`Kyr_K", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("function0Y+X -mqMN`Kyr_K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/function0Y+X -mqMN`Kyr_K", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(linkedHashSet0.contains("Hf<m/"));
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("function0Y+X -mqMN`Kyr_K", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/function0Y+X -mqMN`Kyr_K", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(304, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(linkedHashSet0.contains("Hf<m/"));
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "{|xG645V\\uP";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, 309, 309);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(309, 309, token_CommentType0, "FYO(h~(@O");
      //  // Unstable assertion: assertNotNull(comment0);
      //  // Unstable assertion: assertEquals(309, comment0.getPosition());
      //  // Unstable assertion: assertFalse(comment0.hasChildren());
      //  // Unstable assertion: assertEquals("161", comment0.toString());
      //  // Unstable assertion: assertEquals(161, comment0.getType());
      //  // Unstable assertion: assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      //  // Unstable assertion: assertEquals(309, comment0.getLength());
      //  // Unstable assertion: assertEquals(0, comment0.depth());
      //  // Unstable assertion: assertEquals("FYO(h~(@O", comment0.getValue());
      //  // Unstable assertion: assertEquals(309, comment0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals((-1), comment0.getLineno());
      //  // Unstable assertion: assertNull(comment0.getJsDoc());
      //  // Unstable assertion: assertEquals(5, Node.CASEARRAY_PROP);
      //  // Unstable assertion: assertEquals(1, Node.PROPERTY_FLAG);
      //  // Unstable assertion: assertEquals(4, Node.END_RETURNS_VALUE);
      //  // Unstable assertion: assertEquals(3, Node.LOCAL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(1, Node.LEFT);
      //  // Unstable assertion: assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      //  // Unstable assertion: assertEquals(0, Node.END_UNREACHED);
      //  // Unstable assertion: assertEquals(24, Node.JSDOC_PROP);
      //  // Unstable assertion: assertEquals(18, Node.CONTROL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(4, Node.DESCENDANTS_FLAG);
      //  // Unstable assertion: assertEquals(23, Node.DESTRUCTURING_PARAMS);
      //  // Unstable assertion: assertEquals(6, Node.TARGETBLOCK_PROP);
      //  // Unstable assertion: assertEquals(1, Node.SPECIALCALL_EVAL);
      //  // Unstable assertion: assertEquals(2, Node.LOCAL_PROP);
      //  // Unstable assertion: assertEquals(12, Node.OBJECT_IDS_PROP);
      //  // Unstable assertion: assertEquals(15, Node.LABEL_ID_PROP);
      //  // Unstable assertion: assertEquals(14, Node.CATCH_SCOPE_PROP);
      //  // Unstable assertion: assertEquals(13, Node.INCRDECR_PROP);
      //  // Unstable assertion: assertEquals(8, Node.ISNUMBER_PROP);
      //  // Unstable assertion: assertEquals(9, Node.DIRECTCALL_PROP);
      //  // Unstable assertion: assertEquals(2, Node.SPECIALCALL_WITH);
      //  // Unstable assertion: assertEquals(1, Node.END_DROPS_OFF);
      //  // Unstable assertion: assertEquals(8, Node.END_YIELDS);
      //  // Unstable assertion: assertEquals(0, Node.BOTH);
      //  // Unstable assertion: assertEquals(19, Node.PARENTHESIZED_PROP);
      //  // Unstable assertion: assertEquals(17, Node.NAME_PROP);
      //  // Unstable assertion: assertEquals(1, Node.FUNCTION_PROP);
      //  // Unstable assertion: assertEquals(4, Node.REGEXP_PROP);
      //  // Unstable assertion: assertEquals(10, Node.SPECIALCALL_PROP);
      //  // Unstable assertion: assertEquals(16, Node.MEMBER_TYPE_PROP);
      //  // Unstable assertion: assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      //  // Unstable assertion: assertEquals(26, Node.LAST_PROP);
      //  // Unstable assertion: assertEquals(0, Node.NON_SPECIALCALL);
      //  // Unstable assertion: assertEquals(2, Node.END_RETURNS);
      //  // Unstable assertion: assertEquals(1, Node.DECR_FLAG);
      //  // Unstable assertion: assertEquals(2, Node.RIGHT);
      //  // Unstable assertion: assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      //  // Unstable assertion: assertEquals(2, Node.ATTRIBUTE_FLAG);
      //  // Unstable assertion: assertEquals(20, Node.GENERATOR_END_PROP);
      //  // Unstable assertion: assertEquals(2, Node.POST_FLAG);
      //  // Unstable assertion: assertEquals(22, Node.DESTRUCTURING_NAMES);
      //  // Unstable assertion: assertEquals(7, Node.VARIABLE_PROP);
      //  // Unstable assertion: assertEquals(11, Node.SKIP_INDEXES_PROP);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(1, "FYO(h~(@O", 512, 1);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertFalse(node0.isExprResult());
      //  // Unstable assertion: assertEquals(1, node0.getType());
      //  // Unstable assertion: assertFalse(node0.isScript());
      //  // Unstable assertion: assertFalse(node0.hasOneChild());
      //  // Unstable assertion: assertFalse(node0.isObjectLit());
      //  // Unstable assertion: assertFalse(node0.isAnd());
      //  // Unstable assertion: assertFalse(node0.isNot());
      //  // Unstable assertion: assertFalse(node0.isAssignAdd());
      //  // Unstable assertion: assertFalse(node0.isLabelName());
      //  // Unstable assertion: assertFalse(node0.isThrow());
      //  // Unstable assertion: assertFalse(node0.isCast());
      //  // Unstable assertion: assertFalse(node0.isFalse());
      //  // Unstable assertion: assertFalse(node0.isContinue());
      //  // Unstable assertion: assertFalse(node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertFalse(node0.isLabel());
      //  // Unstable assertion: assertFalse(node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertFalse(node0.isInc());
      //  // Unstable assertion: assertFalse(node0.isSwitch());
      //  // Unstable assertion: assertFalse(node0.isCase());
      //  // Unstable assertion: assertFalse(node0.isStringKey());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertFalse(node0.isIn());
      //  // Unstable assertion: assertFalse(node0.isThis());
      //  // Unstable assertion: assertFalse(node0.isNE());
      //  // Unstable assertion: assertFalse(node0.isNumber());
      //  // Unstable assertion: assertFalse(node0.isIf());
      //  // Unstable assertion: assertFalse(node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals((-1), node0.getSourceOffset());
      //  // Unstable assertion: assertFalse(node0.isCatch());
      //  // Unstable assertion: assertFalse(node0.isInstanceOf());
      //  // Unstable assertion: assertFalse(node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertFalse(node0.isWith());
      //  // Unstable assertion: assertFalse(node0.isFor());
      //  // Unstable assertion: assertFalse(node0.isHook());
      //  // Unstable assertion: assertFalse(node0.wasEmptyNode());
      //  // Unstable assertion: assertFalse(node0.isBlock());
      //  // Unstable assertion: assertFalse(node0.isTrue());
      //  // Unstable assertion: assertTrue(node0.mayMutateArguments());
      //  // Unstable assertion: assertFalse(node0.isDebugger());
      //  // Unstable assertion: assertFalse(node0.isFunction());
      //  // Unstable assertion: assertFalse(node0.isVoid());
      //  // Unstable assertion: assertFalse(node0.isRegExp());
      //  // Unstable assertion: assertFalse(node0.isDefaultCase());
      //  // Unstable assertion: assertFalse(node0.isTry());
      //  // Unstable assertion: assertFalse(node0.isLocalResultCall());
      //  // Unstable assertion: assertFalse(node0.isArrayLit());
      //  // Unstable assertion: assertFalse(node0.isGetterDef());
      //  // Unstable assertion: assertFalse(node0.isParamList());
      //  // Unstable assertion: assertFalse(node0.isVarArgs());
      //  // Unstable assertion: assertFalse(node0.isEmpty());
      //  // Unstable assertion: assertEquals(512, node0.getLineno());
      //  // Unstable assertion: assertFalse(node0.isSetterDef());
      //  // Unstable assertion: assertFalse(node0.isVar());
      //  // Unstable assertion: assertFalse(node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(1, node0.getCharno());
      //  // Unstable assertion: assertFalse(node0.isString());
      //  // Unstable assertion: assertFalse(node0.isDo());
      //  // Unstable assertion: assertFalse(node0.isNew());
      //  // Unstable assertion: assertFalse(node0.isAdd());
      //  // Unstable assertion: assertFalse(node0.isName());
      //  // Unstable assertion: assertEquals(2097153, node0.getSourcePosition());
      //  // Unstable assertion: assertFalse(node0.isSyntheticBlock());
      //  // Unstable assertion: assertFalse(node0.isOr());
      //  // Unstable assertion: assertFalse(node0.isNull());
      //  // Unstable assertion: assertFalse(node0.isComma());
      //  // Unstable assertion: assertFalse(node0.isFromExterns());
      //  // Unstable assertion: assertFalse(node0.isTypeOf());
      //  // Unstable assertion: assertTrue(node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertFalse(node0.isDelProp());
      //  // Unstable assertion: assertFalse(node0.isGetElem());
      //  // Unstable assertion: assertFalse(node0.isBreak());
      //  // Unstable assertion: assertFalse(node0.isQuotedString());
      //  // Unstable assertion: assertFalse(node0.isGetProp());
      //  // Unstable assertion: assertFalse(node0.isCall());
      //  // Unstable assertion: assertFalse(node0.isReturn());
      //  // Unstable assertion: assertFalse(node0.isWhile());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertFalse(node0.isDec());
      //  // Unstable assertion: assertFalse(node0.isAssign());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertFalse(node0.hasChildren());
      //  // Unstable assertion: assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      //  // Unstable assertion: assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      //  // Unstable assertion: assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      //  // Unstable assertion: assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      //  // Unstable assertion: assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      //  // Unstable assertion: assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      //  // Unstable assertion: assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      //  // Unstable assertion: assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      //  // Unstable assertion: assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      //  // Unstable assertion: assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      //  // Unstable assertion: assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      //  // Unstable assertion: assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      //  // Unstable assertion: assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      //  // Unstable assertion: assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      //  // Unstable assertion: assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      //  // Unstable assertion: assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      //  // Unstable assertion: assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      //  // Unstable assertion: assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      //  // Unstable assertion: assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      //  // Unstable assertion: assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      //  // Unstable assertion: assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      //  // Unstable assertion: assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      //  // Unstable assertion: assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      //  // Unstable assertion: assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      //  // Unstable assertion: assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      //  // Unstable assertion: assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      //  // Unstable assertion: assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      //  // Unstable assertion: assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      //  // Unstable assertion: assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      //  // Unstable assertion: assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      //  // Unstable assertion: assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      //  // Unstable assertion: assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      //  // Unstable assertion: assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      //  // Unstable assertion: assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      //  // Unstable assertion: assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      //  // Unstable assertion: assertNotNull(jSDocInfo0);
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerInject());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExpose());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNgInject());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesStructs());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesDicts());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isMappedIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isStableIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isHidden());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDisposes());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerProvide());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExterns());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDefine());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isOverride());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isWizaction());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isInterface());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConsistentIdGenerator());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstant());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerModule());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      //  // Unstable assertion: assertNotNull(set0);
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerInject());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExpose());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNgInject());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesStructs());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesDicts());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isMappedIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isStableIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isHidden());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDisposes());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerProvide());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExterns());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDefine());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isOverride());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isWizaction());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isInterface());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConsistentIdGenerator());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstant());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerModule());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      //  // Unstable assertion: assertTrue(set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertFalse(set0.contains(string0));
      
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PRIVATE;
      jSDocInfo0.setVisibility(jSDocInfo_Visibility0);
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerInject());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertEquals(JSDocInfo.Visibility.PRIVATE, jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExpose());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNgInject());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesStructs());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesDicts());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isMappedIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isStableIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isHidden());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDisposes());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerProvide());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExterns());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDefine());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isOverride());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isWizaction());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isInterface());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConsistentIdGenerator());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstant());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerModule());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      //  // Unstable assertion: assertNotNull(config0);
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerInject());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertEquals(JSDocInfo.Visibility.PRIVATE, jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExpose());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNgInject());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesStructs());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesDicts());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isMappedIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isStableIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isHidden());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDisposes());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerProvide());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExterns());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDefine());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isOverride());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isWizaction());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isInterface());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConsistentIdGenerator());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstant());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerModule());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      //  // Unstable assertion: assertTrue(set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertFalse(set0.contains(string0));
      
      Context context0 = Context.enter();
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      //  // Unstable assertion: assertNotNull(errorCollector0);
      
      ErrorReporter errorReporter0 = context0.setErrorReporter(errorCollector0);
      //  // Unstable assertion: assertNotNull(errorReporter0);
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      //  // Unstable assertion: assertEquals(309, comment0.getPosition());
      //  // Unstable assertion: assertFalse(comment0.hasChildren());
      //  // Unstable assertion: assertEquals("161", comment0.toString());
      //  // Unstable assertion: assertEquals(161, comment0.getType());
      //  // Unstable assertion: assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      //  // Unstable assertion: assertEquals(309, comment0.getLength());
      //  // Unstable assertion: assertEquals(0, comment0.depth());
      //  // Unstable assertion: assertEquals("FYO(h~(@O", comment0.getValue());
      //  // Unstable assertion: assertEquals(309, comment0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals((-1), comment0.getLineno());
      //  // Unstable assertion: assertNull(comment0.getJsDoc());
      //  // Unstable assertion: assertFalse(node0.isExprResult());
      //  // Unstable assertion: assertEquals(1, node0.getType());
      //  // Unstable assertion: assertFalse(node0.isScript());
      //  // Unstable assertion: assertFalse(node0.hasOneChild());
      //  // Unstable assertion: assertFalse(node0.isObjectLit());
      //  // Unstable assertion: assertFalse(node0.isAnd());
      //  // Unstable assertion: assertFalse(node0.isNot());
      //  // Unstable assertion: assertFalse(node0.isAssignAdd());
      //  // Unstable assertion: assertFalse(node0.isLabelName());
      //  // Unstable assertion: assertFalse(node0.isThrow());
      //  // Unstable assertion: assertFalse(node0.isCast());
      //  // Unstable assertion: assertFalse(node0.isFalse());
      //  // Unstable assertion: assertFalse(node0.isContinue());
      //  // Unstable assertion: assertFalse(node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertFalse(node0.isLabel());
      //  // Unstable assertion: assertFalse(node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertFalse(node0.isInc());
      //  // Unstable assertion: assertFalse(node0.isSwitch());
      //  // Unstable assertion: assertFalse(node0.isCase());
      //  // Unstable assertion: assertFalse(node0.isStringKey());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertFalse(node0.isIn());
      //  // Unstable assertion: assertFalse(node0.isThis());
      //  // Unstable assertion: assertFalse(node0.isNE());
      //  // Unstable assertion: assertFalse(node0.isNumber());
      //  // Unstable assertion: assertFalse(node0.isIf());
      //  // Unstable assertion: assertFalse(node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals((-1), node0.getSourceOffset());
      //  // Unstable assertion: assertFalse(node0.isCatch());
      //  // Unstable assertion: assertFalse(node0.isInstanceOf());
      //  // Unstable assertion: assertFalse(node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertFalse(node0.isWith());
      //  // Unstable assertion: assertFalse(node0.isFor());
      //  // Unstable assertion: assertFalse(node0.isHook());
      //  // Unstable assertion: assertFalse(node0.wasEmptyNode());
      //  // Unstable assertion: assertFalse(node0.isBlock());
      //  // Unstable assertion: assertFalse(node0.isTrue());
      //  // Unstable assertion: assertTrue(node0.mayMutateArguments());
      //  // Unstable assertion: assertFalse(node0.isDebugger());
      //  // Unstable assertion: assertFalse(node0.isFunction());
      //  // Unstable assertion: assertFalse(node0.isVoid());
      //  // Unstable assertion: assertFalse(node0.isRegExp());
      //  // Unstable assertion: assertFalse(node0.isDefaultCase());
      //  // Unstable assertion: assertFalse(node0.isTry());
      //  // Unstable assertion: assertFalse(node0.isLocalResultCall());
      //  // Unstable assertion: assertFalse(node0.isArrayLit());
      //  // Unstable assertion: assertFalse(node0.isGetterDef());
      //  // Unstable assertion: assertFalse(node0.isParamList());
      //  // Unstable assertion: assertFalse(node0.isVarArgs());
      //  // Unstable assertion: assertFalse(node0.isEmpty());
      //  // Unstable assertion: assertEquals(512, node0.getLineno());
      //  // Unstable assertion: assertFalse(node0.isSetterDef());
      //  // Unstable assertion: assertFalse(node0.isVar());
      //  // Unstable assertion: assertFalse(node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(1, node0.getCharno());
      //  // Unstable assertion: assertFalse(node0.isString());
      //  // Unstable assertion: assertFalse(node0.isDo());
      //  // Unstable assertion: assertFalse(node0.isNew());
      //  // Unstable assertion: assertFalse(node0.isAdd());
      //  // Unstable assertion: assertFalse(node0.isName());
      //  // Unstable assertion: assertEquals(2097153, node0.getSourcePosition());
      //  // Unstable assertion: assertFalse(node0.isSyntheticBlock());
      //  // Unstable assertion: assertFalse(node0.isOr());
      //  // Unstable assertion: assertFalse(node0.isNull());
      //  // Unstable assertion: assertFalse(node0.isComma());
      //  // Unstable assertion: assertFalse(node0.isFromExterns());
      //  // Unstable assertion: assertFalse(node0.isTypeOf());
      //  // Unstable assertion: assertTrue(node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertFalse(node0.isDelProp());
      //  // Unstable assertion: assertFalse(node0.isGetElem());
      //  // Unstable assertion: assertFalse(node0.isBreak());
      //  // Unstable assertion: assertFalse(node0.isQuotedString());
      //  // Unstable assertion: assertFalse(node0.isGetProp());
      //  // Unstable assertion: assertFalse(node0.isCall());
      //  // Unstable assertion: assertFalse(node0.isReturn());
      //  // Unstable assertion: assertFalse(node0.isWhile());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertFalse(node0.isDec());
      //  // Unstable assertion: assertFalse(node0.isAssign());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertFalse(node0.hasChildren());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerInject());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertEquals(JSDocInfo.Visibility.PRIVATE, jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExpose());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNgInject());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesStructs());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertFalse(jSDocInfo0.makesDicts());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isMappedIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isStableIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isHidden());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDisposes());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerProvide());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExterns());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isIdGenerator());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isDefine());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isOverride());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertFalse(jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isWizaction());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isInterface());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConsistentIdGenerator());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isConstant());
      //  // Unstable assertion: assertFalse(jSDocInfo0.isJaggerModule());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      //  // Unstable assertion: assertTrue(set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertFalse(set0.contains(string0));
      //  // Unstable assertion: assertEquals(5, Node.CASEARRAY_PROP);
      //  // Unstable assertion: assertEquals(1, Node.PROPERTY_FLAG);
      //  // Unstable assertion: assertEquals(4, Node.END_RETURNS_VALUE);
      //  // Unstable assertion: assertEquals(3, Node.LOCAL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(1, Node.LEFT);
      //  // Unstable assertion: assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      //  // Unstable assertion: assertEquals(0, Node.END_UNREACHED);
      //  // Unstable assertion: assertEquals(24, Node.JSDOC_PROP);
      //  // Unstable assertion: assertEquals(18, Node.CONTROL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(4, Node.DESCENDANTS_FLAG);
      //  // Unstable assertion: assertEquals(23, Node.DESTRUCTURING_PARAMS);
      //  // Unstable assertion: assertEquals(6, Node.TARGETBLOCK_PROP);
      //  // Unstable assertion: assertEquals(1, Node.SPECIALCALL_EVAL);
      //  // Unstable assertion: assertEquals(2, Node.LOCAL_PROP);
      //  // Unstable assertion: assertEquals(12, Node.OBJECT_IDS_PROP);
      //  // Unstable assertion: assertEquals(15, Node.LABEL_ID_PROP);
      //  // Unstable assertion: assertEquals(14, Node.CATCH_SCOPE_PROP);
      //  // Unstable assertion: assertEquals(13, Node.INCRDECR_PROP);
      //  // Unstable assertion: assertEquals(8, Node.ISNUMBER_PROP);
      //  // Unstable assertion: assertEquals(9, Node.DIRECTCALL_PROP);
      //  // Unstable assertion: assertEquals(2, Node.SPECIALCALL_WITH);
      //  // Unstable assertion: assertEquals(1, Node.END_DROPS_OFF);
      //  // Unstable assertion: assertEquals(8, Node.END_YIELDS);
      //  // Unstable assertion: assertEquals(0, Node.BOTH);
      //  // Unstable assertion: assertEquals(19, Node.PARENTHESIZED_PROP);
      //  // Unstable assertion: assertEquals(17, Node.NAME_PROP);
      //  // Unstable assertion: assertEquals(1, Node.FUNCTION_PROP);
      //  // Unstable assertion: assertEquals(4, Node.REGEXP_PROP);
      //  // Unstable assertion: assertEquals(10, Node.SPECIALCALL_PROP);
      //  // Unstable assertion: assertEquals(16, Node.MEMBER_TYPE_PROP);
      //  // Unstable assertion: assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      //  // Unstable assertion: assertEquals(26, Node.LAST_PROP);
      //  // Unstable assertion: assertEquals(0, Node.NON_SPECIALCALL);
      //  // Unstable assertion: assertEquals(2, Node.END_RETURNS);
      //  // Unstable assertion: assertEquals(1, Node.DECR_FLAG);
      //  // Unstable assertion: assertEquals(2, Node.RIGHT);
      //  // Unstable assertion: assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      //  // Unstable assertion: assertEquals(2, Node.ATTRIBUTE_FLAG);
      //  // Unstable assertion: assertEquals(20, Node.GENERATOR_END_PROP);
      //  // Unstable assertion: assertEquals(2, Node.POST_FLAG);
      //  // Unstable assertion: assertEquals(22, Node.DESTRUCTURING_NAMES);
      //  // Unstable assertion: assertEquals(7, Node.VARIABLE_PROP);
      //  // Unstable assertion: assertEquals(11, Node.SKIP_INDEXES_PROP);
      //  // Unstable assertion: assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      //  // Unstable assertion: assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      //  // Unstable assertion: assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      //  // Unstable assertion: assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      //  // Unstable assertion: assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      //  // Unstable assertion: assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      //  // Unstable assertion: assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      //  // Unstable assertion: assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      //  // Unstable assertion: assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      //  // Unstable assertion: assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      //  // Unstable assertion: assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      //  // Unstable assertion: assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      //  // Unstable assertion: assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      //  // Unstable assertion: assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      //  // Unstable assertion: assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      //  // Unstable assertion: assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      //  // Unstable assertion: assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      //  // Unstable assertion: assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      //  // Unstable assertion: assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      //  // Unstable assertion: assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      //  // Unstable assertion: assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      //  // Unstable assertion: assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      //  // Unstable assertion: assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      //  // Unstable assertion: assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      //  // Unstable assertion: assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      //  // Unstable assertion: assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      //  // Unstable assertion: assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      //  // Unstable assertion: assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      //  // Unstable assertion: assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      //  // Unstable assertion: assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      //  // Unstable assertion: assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      //  // Unstable assertion: assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      //  // Unstable assertion: assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      //  // Unstable assertion: assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      //  // Unstable assertion: assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("\n");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n", 36);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(31, 957, token_CommentType0, "\n");
      assertNotNull(comment0);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(31, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(957, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(31, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("\n", comment0.getValue());
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("\n"));
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("\n"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(31, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(957, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(31, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("\n", comment0.getValue());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("\n"));
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((com.google.javascript.rhino.Node) null);
      assertNull(jSTypeExpression0);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(31, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(957, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(31, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("\n", comment0.getValue());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("\n"));
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("qr_n[[K");
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("qr_n[[K"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, (Set<String>) null, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("qr_n[[K"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isHook());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("qr_n[[K"));
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isHook());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(set0.contains("qr_n[[K"));
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function", (-569), 4);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("function"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("function"));
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(treeSet0.contains("function"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("ERm89W-;JV**e8");
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(10, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(32, 40, token_CommentType0, "ERm89W-;JV**e8");
      assertNotNull(comment0);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(32, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(32, comment0.getPosition());
      assertEquals(40, comment0.getLength());
      assertEquals("ERm89W-;JV**e8", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("ERm89W-;JV**e8"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("ERm89W-;JV**e8"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(10, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(32, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(32, comment0.getPosition());
      assertEquals(40, comment0.getLength());
      assertEquals("ERm89W-;JV**e8", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("ERm89W-;JV**e8"));
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(".W{NK%zzLI=\"MyloU", (-562), (-1789859776));
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(".W{NK%zzLI=\"MyloU"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(".W{NK%zzLI=\"MyloU"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(".W{NK%zzLI=\"MyloU"));
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 313, 313);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-149), 313, token_CommentType0, "{fhiR");
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals("{fhiR", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(313, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-149), comment0.getAbsolutePosition());
      assertEquals((-149), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(6, "{fhiR", 4, 1);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(16385, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals("{fhiR", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(313, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-149), comment0.getAbsolutePosition());
      assertEquals((-149), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(16385, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("LD\"dd[F4@NGfS. ,t", (-1789859776), (-562));
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("&&6r>O)9tNz");
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertEquals(4, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(39, 1, token_CommentType0, "&&6r>O)9tNz");
      assertNotNull(comment0);
      assertEquals("161", comment0.toString());
      assertEquals(39, comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals("&&6r>O)9tNz", comment0.getValue());
      assertEquals(1, comment0.getLength());
      assertEquals(39, comment0.getAbsolutePosition());
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("LD\"dd[F4@NGfS. ,t"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("LD\"dd[F4@NGfS. ,t"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertEquals(4, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals("161", comment0.toString());
      assertEquals(39, comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals("&&6r>O)9tNz", comment0.getValue());
      assertEquals(1, comment0.getLength());
      assertEquals(39, comment0.getAbsolutePosition());
      assertFalse(treeSet0.contains("LD\"dd[F4@NGfS. ,t"));
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "{|xG645V\\uP";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, 309, 309);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-12), 309, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals((-12), comment0.getPosition());
      assertEquals("{|xG645V\\uP", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(309, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-12), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(8, "com.google.common.base.CharMatcher$13", 1782, (-1122313365));
      assertNotNull(node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertEquals(8, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerModule());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals((-12), comment0.getPosition());
      assertEquals("{|xG645V\\uP", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(309, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-12), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertEquals(8, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(set0.contains(string0));
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      
      jsDocTokenStream0.sourceCursor = 3861;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("=k/#{fq!Xv,h", (-555));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-555), (-555), token_CommentType0, "=k/#{fq!Xv,h");
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-555), comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals((-555), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-555), comment0.getPosition());
      assertEquals("=k/#{fq!Xv,h", comment0.getValue());
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, (Config) null, (ErrorReporter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("\n");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n", 36);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("\n"));
      
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("\n"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("\n"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n", 36);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(31, 957, token_CommentType0, "\n");
      //  // Unstable assertion: assertNotNull(comment0);
      //  // Unstable assertion: assertEquals(31, comment0.getPosition());
      //  // Unstable assertion: assertEquals(161, comment0.getType());
      //  // Unstable assertion: assertEquals(0, comment0.depth());
      //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      //  // Unstable assertion: assertEquals((-1), comment0.getLineno());
      //  // Unstable assertion: assertNull(comment0.getJsDoc());
      //  // Unstable assertion: assertEquals("161", comment0.toString());
      //  // Unstable assertion: assertEquals("\n", comment0.getValue());
      //  // Unstable assertion: assertEquals(957, comment0.getLength());
      //  // Unstable assertion: assertEquals(31, comment0.getAbsolutePosition());
      //  // Unstable assertion: assertFalse(comment0.hasChildren());
      //  // Unstable assertion: assertEquals(1, Node.SPECIALCALL_EVAL);
      //  // Unstable assertion: assertEquals(2, Node.END_RETURNS);
      //  // Unstable assertion: assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      //  // Unstable assertion: assertEquals(18, Node.CONTROL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(15, Node.LABEL_ID_PROP);
      //  // Unstable assertion: assertEquals(4, Node.REGEXP_PROP);
      //  // Unstable assertion: assertEquals(5, Node.CASEARRAY_PROP);
      //  // Unstable assertion: assertEquals(1, Node.DECR_FLAG);
      //  // Unstable assertion: assertEquals(24, Node.JSDOC_PROP);
      //  // Unstable assertion: assertEquals(1, Node.PROPERTY_FLAG);
      //  // Unstable assertion: assertEquals(23, Node.DESTRUCTURING_PARAMS);
      //  // Unstable assertion: assertEquals(6, Node.TARGETBLOCK_PROP);
      //  // Unstable assertion: assertEquals(12, Node.OBJECT_IDS_PROP);
      //  // Unstable assertion: assertEquals(19, Node.PARENTHESIZED_PROP);
      //  // Unstable assertion: assertEquals(1, Node.LEFT);
      //  // Unstable assertion: assertEquals(3, Node.LOCAL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(8, Node.END_YIELDS);
      //  // Unstable assertion: assertEquals(2, Node.LOCAL_PROP);
      //  // Unstable assertion: assertEquals(0, Node.NON_SPECIALCALL);
      //  // Unstable assertion: assertEquals(0, Node.BOTH);
      //  // Unstable assertion: assertEquals(2, Node.POST_FLAG);
      //  // Unstable assertion: assertEquals(7, Node.VARIABLE_PROP);
      //  // Unstable assertion: assertEquals(1, Node.END_DROPS_OFF);
      //  // Unstable assertion: assertEquals(9, Node.DIRECTCALL_PROP);
      //  // Unstable assertion: assertEquals(4, Node.DESCENDANTS_FLAG);
      //  // Unstable assertion: assertEquals(14, Node.CATCH_SCOPE_PROP);
      //  // Unstable assertion: assertEquals(26, Node.LAST_PROP);
      //  // Unstable assertion: assertEquals(8, Node.ISNUMBER_PROP);
      //  // Unstable assertion: assertEquals(11, Node.SKIP_INDEXES_PROP);
      //  // Unstable assertion: assertEquals(2, Node.ATTRIBUTE_FLAG);
      //  // Unstable assertion: assertEquals(22, Node.DESTRUCTURING_NAMES);
      //  // Unstable assertion: assertEquals(2, Node.SPECIALCALL_WITH);
      //  // Unstable assertion: assertEquals(4, Node.END_RETURNS_VALUE);
      //  // Unstable assertion: assertEquals(20, Node.GENERATOR_END_PROP);
      //  // Unstable assertion: assertEquals(1, Node.FUNCTION_PROP);
      //  // Unstable assertion: assertEquals(10, Node.SPECIALCALL_PROP);
      //  // Unstable assertion: assertEquals(16, Node.MEMBER_TYPE_PROP);
      //  // Unstable assertion: assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      //  // Unstable assertion: assertEquals(0, Node.END_UNREACHED);
      //  // Unstable assertion: assertEquals(13, Node.INCRDECR_PROP);
      //  // Unstable assertion: assertEquals(2, Node.RIGHT);
      //  // Unstable assertion: assertEquals(17, Node.NAME_PROP);
      //  // Unstable assertion: assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      //  // Unstable assertion: assertNotNull(hashSet0);
      //  // Unstable assertion: assertTrue(hashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, hashSet0.size());
      //  // Unstable assertion: assertFalse(hashSet0.contains("\n"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      //  // Unstable assertion: assertNotNull(config0);
      //  // Unstable assertion: assertTrue(hashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, hashSet0.size());
      //  // Unstable assertion: assertFalse(hashSet0.contains("\n"));
      
      Context context0 = Context.enter();
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      //  // Unstable assertion: assertNotNull(errorReporter0);
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      //  // Unstable assertion: assertEquals(31, comment0.getPosition());
      //  // Unstable assertion: assertEquals(161, comment0.getType());
      //  // Unstable assertion: assertEquals(0, comment0.depth());
      //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      //  // Unstable assertion: assertEquals((-1), comment0.getLineno());
      //  // Unstable assertion: assertNull(comment0.getJsDoc());
      //  // Unstable assertion: assertEquals("161", comment0.toString());
      //  // Unstable assertion: assertEquals("\n", comment0.getValue());
      //  // Unstable assertion: assertEquals(957, comment0.getLength());
      //  // Unstable assertion: assertEquals(31, comment0.getAbsolutePosition());
      //  // Unstable assertion: assertFalse(comment0.hasChildren());
      //  // Unstable assertion: assertTrue(hashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, hashSet0.size());
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertFalse(hashSet0.contains("\n"));
      //  // Unstable assertion: assertEquals(1, Node.SPECIALCALL_EVAL);
      //  // Unstable assertion: assertEquals(2, Node.END_RETURNS);
      //  // Unstable assertion: assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      //  // Unstable assertion: assertEquals(18, Node.CONTROL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(15, Node.LABEL_ID_PROP);
      //  // Unstable assertion: assertEquals(4, Node.REGEXP_PROP);
      //  // Unstable assertion: assertEquals(5, Node.CASEARRAY_PROP);
      //  // Unstable assertion: assertEquals(1, Node.DECR_FLAG);
      //  // Unstable assertion: assertEquals(24, Node.JSDOC_PROP);
      //  // Unstable assertion: assertEquals(1, Node.PROPERTY_FLAG);
      //  // Unstable assertion: assertEquals(23, Node.DESTRUCTURING_PARAMS);
      //  // Unstable assertion: assertEquals(6, Node.TARGETBLOCK_PROP);
      //  // Unstable assertion: assertEquals(12, Node.OBJECT_IDS_PROP);
      //  // Unstable assertion: assertEquals(19, Node.PARENTHESIZED_PROP);
      //  // Unstable assertion: assertEquals(1, Node.LEFT);
      //  // Unstable assertion: assertEquals(3, Node.LOCAL_BLOCK_PROP);
      //  // Unstable assertion: assertEquals(8, Node.END_YIELDS);
      //  // Unstable assertion: assertEquals(2, Node.LOCAL_PROP);
      //  // Unstable assertion: assertEquals(0, Node.NON_SPECIALCALL);
      //  // Unstable assertion: assertEquals(0, Node.BOTH);
      //  // Unstable assertion: assertEquals(2, Node.POST_FLAG);
      //  // Unstable assertion: assertEquals(7, Node.VARIABLE_PROP);
      //  // Unstable assertion: assertEquals(1, Node.END_DROPS_OFF);
      //  // Unstable assertion: assertEquals(9, Node.DIRECTCALL_PROP);
      //  // Unstable assertion: assertEquals(4, Node.DESCENDANTS_FLAG);
      //  // Unstable assertion: assertEquals(14, Node.CATCH_SCOPE_PROP);
      //  // Unstable assertion: assertEquals(26, Node.LAST_PROP);
      //  // Unstable assertion: assertEquals(8, Node.ISNUMBER_PROP);
      //  // Unstable assertion: assertEquals(11, Node.SKIP_INDEXES_PROP);
      //  // Unstable assertion: assertEquals(2, Node.ATTRIBUTE_FLAG);
      //  // Unstable assertion: assertEquals(22, Node.DESTRUCTURING_NAMES);
      //  // Unstable assertion: assertEquals(2, Node.SPECIALCALL_WITH);
      //  // Unstable assertion: assertEquals(4, Node.END_RETURNS_VALUE);
      //  // Unstable assertion: assertEquals(20, Node.GENERATOR_END_PROP);
      //  // Unstable assertion: assertEquals(1, Node.FUNCTION_PROP);
      //  // Unstable assertion: assertEquals(10, Node.SPECIALCALL_PROP);
      //  // Unstable assertion: assertEquals(16, Node.MEMBER_TYPE_PROP);
      //  // Unstable assertion: assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      //  // Unstable assertion: assertEquals(0, Node.END_UNREACHED);
      //  // Unstable assertion: assertEquals(13, Node.INCRDECR_PROP);
      //  // Unstable assertion: assertEquals(2, Node.RIGHT);
      //  // Unstable assertion: assertEquals(17, Node.NAME_PROP);
      //  // Unstable assertion: assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("qNU`xr|23*I}M([P!F");
      assertNotNull(node0);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qNU`xr|23*I}M([P!F", (-5), 51);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("qNU`xr|23*I}M([P!F"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("qNU`xr|23*I}M([P!F"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("qNU`xr|23*I}M([P!F"));
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("qNU`xr|23*I}M([P!F"));
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      
      com.google.javascript.rhino.Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node2);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("qNU`xr|23*I}M([P!F"));
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V");
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(301, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString(";\n");
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("null");
      assertNotNull(node0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[2-U'");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("*=R\u0003D%");
      assertNotNull(node0);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertEquals(302, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Z++!2S6t$7^j>(");
      assertNotNull(node0);
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(3, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(3, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(306, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("3jY~d4?>{\"g");
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(7, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertEquals(304, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("!y3w+l=8euIr~j6O");
      assertNotNull(node0);
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(6, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertEquals(306, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(6, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("FsA}FzO$Vws&-N", 21);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("FsA}FzO$Vws&-N"));
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node0);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertEquals(21, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(86016, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(set0.contains("FsA}FzO$Vws&-N"));
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("$GrL");
      assertNotNull(node0);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$GrL", 1, (-1843135050));
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("$GrL"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("$GrL"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("$GrL"));
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("$GrL"));
      assertFalse(boolean0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("$GrL"));
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("\n");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n", 36);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(31, 957, token_CommentType0, "\n");
      assertNotNull(comment0);
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(957, comment0.getLength());
      assertEquals(31, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(31, comment0.getPosition());
      assertEquals("\n", comment0.getValue());
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("\n"));
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\n"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("\n"));
      assertFalse(treeSet0.contains("\n"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(957, comment0.getLength());
      assertEquals(31, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(31, comment0.getPosition());
      assertEquals("\n", comment0.getValue());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("\n"));
      assertFalse(treeSet0.contains("\n"));
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(957, comment0.getLength());
      assertEquals(31, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(31, comment0.getPosition());
      assertEquals("\n", comment0.getValue());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("\n"));
      assertFalse(treeSet0.contains("\n"));
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(957, comment0.getLength());
      assertEquals(31, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(31, comment0.getPosition());
      assertEquals("\n", comment0.getValue());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("\n"));
      assertFalse(treeSet0.contains("\n"));
      assertFalse(boolean0);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(apM#;da", (-1891), 3515);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(3515, 104, token_CommentType0, "(apM#;da");
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("(apM#;da", comment0.getValue());
      assertEquals(104, comment0.getLength());
      assertEquals(3515, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(3515, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(15, "(apM#;da", 2, 22);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertEquals(22, node0.getCharno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(15, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(8214, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("(apM#;da", comment0.getValue());
      assertEquals(104, comment0.getLength());
      assertEquals(3515, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(3515, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertEquals(22, node0.getCharno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(15, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(8214, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("(apM#;da", comment0.getValue());
      assertEquals(104, comment0.getLength());
      assertEquals(3515, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(3515, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertEquals(22, node0.getCharno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(15, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(8214, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("(apM#;da", comment0.getValue());
      assertEquals(104, comment0.getLength());
      assertEquals(3515, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(3515, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertEquals(22, node0.getCharno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(15, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(8214, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertTrue(boolean0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("$GrL");
      assertNotNull(node0);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$GrL", 1, (-1843135050));
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("$GrL"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("$GrL"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(treeSet0.contains("$GrL"));
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(treeSet0.contains("$GrL"));
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(treeSet0.contains("$GrL"));
      assertFalse(boolean0);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("_", 313, 313);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(313, 313, token_CommentType0, "_");
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("_", comment0.getValue());
      assertEquals(313, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(313, comment0.getAbsolutePosition());
      assertEquals(313, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("_"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("_"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("_", comment0.getValue());
      assertEquals(313, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(313, comment0.getAbsolutePosition());
      assertEquals(313, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(treeSet0.contains("_"));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      
      JsDocToken jsDocToken0 = JsDocToken.RC;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("_", comment0.getValue());
      assertEquals(313, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(313, comment0.getAbsolutePosition());
      assertEquals(313, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(treeSet0.contains("_"));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("_", comment0.getValue());
      assertEquals(313, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(313, comment0.getAbsolutePosition());
      assertEquals(313, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(treeSet0.contains("_"));
      assertFalse(boolean0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("DawzSKth", 534);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(16, 15, token_CommentType0, (String) null);
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getValue());
      assertEquals(16, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(15, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(16, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("DawzSKth"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getValue());
      assertEquals(16, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(15, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(16, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertFalse(treeSet0.contains("DawzSKth"));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      
      JsDocToken jsDocToken0 = JsDocToken.RB;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getValue());
      assertEquals(16, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(15, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(16, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertFalse(treeSet0.contains("DawzSKth"));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getValue());
      assertEquals(16, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(15, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(16, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertFalse(treeSet0.contains("DawzSKth"));
      assertFalse(boolean0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$?,R&t}2", (-2004934586), 38);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(4, 48, token_CommentType0, "3v=B");
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(4, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(48, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals("3v=B", comment0.getValue());
      assertEquals(4, comment0.getAbsolutePosition());
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("3v=B"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(4, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(48, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals("3v=B", comment0.getValue());
      assertEquals(4, comment0.getAbsolutePosition());
      assertFalse(treeSet0.contains("3v=B"));
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(4, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(48, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals("3v=B", comment0.getValue());
      assertEquals(4, comment0.getAbsolutePosition());
      assertFalse(treeSet0.contains("3v=B"));
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(4, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(48, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals("3v=B", comment0.getValue());
      assertEquals(4, comment0.getAbsolutePosition());
      assertFalse(treeSet0.contains("3v=B"));
      assertFalse(boolean0);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(apM#;da", (-1891), 3515);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(3515, 104, token_CommentType0, "(apM#;da");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals("(apM#;da", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(104, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(3515, comment0.getAbsolutePosition());
      assertEquals(3515, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(15, "(apM#;da", 2, 22);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertEquals(8214, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertEquals(15, node0.getType());
      assertFalse(node0.isStringKey());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(22, node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertNull(comment0.getJsDoc());
      assertEquals("(apM#;da", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(104, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(3515, comment0.getAbsolutePosition());
      assertEquals(3515, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isNE());
      assertEquals(8214, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertEquals(15, node0.getType());
      assertFalse(node0.isStringKey());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(22, node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertNull(comment0.getJsDoc());
      assertEquals("(apM#;da", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(104, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(3515, comment0.getAbsolutePosition());
      assertEquals(3515, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isNE());
      assertEquals(8214, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertEquals(15, node0.getType());
      assertFalse(node0.isStringKey());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(22, node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertFalse(boolean0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      
      com.google.javascript.rhino.Node node0 = jSDocInfo0.getAssociatedNode();
      assertNull(node0);
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[2-U'", 12, 48);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(treeSet0.contains("[2-U'"));
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(treeSet0.contains("[2-U'"));
      assertFalse(boolean0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(3515, 104, token_CommentType0, "(apM#;da");
      assertNotNull(comment0);
      assertEquals(3515, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(3515, comment0.getPosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("(apM#;da", comment0.getValue());
      assertEquals(104, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(":");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(3515, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(3515, comment0.getPosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("(apM#;da", comment0.getValue());
      assertEquals(104, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(3515, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(3515, comment0.getPosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("(apM#;da", comment0.getValue());
      assertEquals(104, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertFalse(boolean0);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("_", 309, 309);
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(6, "{fhiR", 4, 1);
      assertNotNull(node0);
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(16385, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isVarArgs());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals(6, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("{fhiR"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("{fhiR"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(16385, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isVarArgs());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals(6, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(set0.contains("{fhiR"));
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(16385, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isVarArgs());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals(6, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertEquals(1265973, node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getLength());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals(309, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(309, node1.getCharno());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(set0.contains("{fhiR"));
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n", 36);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\n"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("\n"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("\n"));
      
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("\n"));
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(treeSet0.contains("\n"));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "{|xG645V\\uP";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-12), 296, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-12), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{|xG645V\\uP", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(296, comment0.getLength());
      assertEquals((-12), comment0.getPosition());
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(8, string0, 1782, (-1122313365));
      assertNotNull(node0);
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(8, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-12), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{|xG645V\\uP", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(296, comment0.getLength());
      assertEquals((-12), comment0.getPosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(8, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-12), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{|xG645V\\uP", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(296, comment0.getLength());
      assertEquals((-12), comment0.getPosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(8, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("qr_n[[K");
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("qr_n[[K"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("qr_n[[K"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(set0.contains("qr_n[[K"));
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(set0.contains("qr_n[[K"));
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(set0.contains("qr_n[[K"));
      assertFalse(boolean0);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Yjp|d|%");
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isSwitch());
      assertEquals(301, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Yjp|d|%", 16, 4);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("Yjp|d|%"));
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isSwitch());
      assertEquals(301, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(set0.contains("Yjp|d|%"));
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertNotNull(jSDocInfo1);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isSwitch());
      assertEquals(301, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertNull(jSDocInfo1.getVersion());
      assertFalse(jSDocInfo1.isWizaction());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.isExpose());
      assertFalse(jSDocInfo1.makesStructs());
      assertFalse(jSDocInfo1.isNoShadow());
      assertNull(jSDocInfo1.getLendsName());
      assertFalse(jSDocInfo1.isNgInject());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertFalse(jSDocInfo1.isConstant());
      assertEquals(0, jSDocInfo1.getOriginalCommentPosition());
      assertTrue(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.isNoCompile());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertNull(jSDocInfo1.getDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertNull(jSDocInfo1.getFileOverview());
      assertFalse(jSDocInfo1.hasThisType());
      assertFalse(jSDocInfo1.isInterface());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertFalse(jSDocInfo1.isConstructor());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertFalse(jSDocInfo1.hasBaseType());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertNull(jSDocInfo1.getReturnDescription());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.hasReturnType());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.isDeprecated());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertFalse(jSDocInfo1.makesDicts());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(set0.contains("Yjp|d|%"));
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{fhiR");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("(apM#;da");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(apM#;da", (-1890), 3515);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("(apM#;da"));
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(hashSet0.contains("(apM#;da"));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("+5A=6OFU6g?Et", 0, 0);
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("+5A=6OFU6g?Et");
      assertNotNull(node0);
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      
      HashSet<String> hashSet0 = new HashSet<String>(0);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("+5A=6OFU6g?Et"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("+5A=6OFU6g?Et"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(hashSet0.contains("+5A=6OFU6g?Et"));
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      
      com.google.javascript.rhino.Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(hashSet0.contains("+5A=6OFU6g?Et"));
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "{|xG645V\\uP";
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo1);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("$GrL|iigQbOZ,}|q");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Ej");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n", 36);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(61, 8, token_CommentType0, "7ZpYafV");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:37:15 GMT 2021
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.SimpleScalarValueChecker;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiDirectional_ESTest extends MultiDirectional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(0.0, (-2074.32));
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[7];
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-304.296093));
      realPointValuePairArray0[0] = realPointValuePair0;
      realPointValuePairArray0[1] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiDirectional0.iterateSimplex(comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.direct.MultiDirectional", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(0.0, (-2074.32));
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[7];
      double[] doubleArray0 = new double[3];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-304.296093));
      realPointValuePairArray0[0] = realPointValuePair0;
      RealPointValuePair realPointValuePair1 = new RealPointValuePair(doubleArray0, (-304.296093));
      realPointValuePairArray0[1] = realPointValuePair1;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiDirectional0.iterateSimplex(comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.direct.MultiDirectional", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(980.6719634, 980.6719634);
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 0.0);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1980), 0).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(980.6719634, 980.6719634);
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 0.0);
      realPointValuePairArray0[0] = realPointValuePair0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      RealPointValuePair realPointValuePair1 = new RealPointValuePair(doubleArray1, 980.6719634, true);
      realPointValuePairArray0[1] = realPointValuePair1;
      SimpleScalarValueChecker simpleScalarValueChecker0 = new SimpleScalarValueChecker();
      multiDirectional0.setConvergenceChecker(simpleScalarValueChecker0);
      RealPointValuePair realPointValuePair2 = new RealPointValuePair(doubleArray1, 980.6719634, true);
      realPointValuePairArray0[2] = realPointValuePair2;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(7, 253, 0, 0).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(2, multiDirectional0.getIterations());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      multiDirectional0.setMaxIterations(0);
      try { 
        multiDirectional0.iterateSimplex((Comparator<RealPointValuePair>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.optimization.direct.DirectSearchOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(980.6719634, 980.6719634);
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 0.0);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1690), 454).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(980.6719634, 980.6719634);
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 0.0);
      realPointValuePairArray0[0] = realPointValuePair0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      RealPointValuePair realPointValuePair1 = new RealPointValuePair(doubleArray1, 980.6719634, false);
      realPointValuePairArray0[1] = realPointValuePair1;
      SimpleScalarValueChecker simpleScalarValueChecker0 = new SimpleScalarValueChecker();
      multiDirectional0.setConvergenceChecker(simpleScalarValueChecker0);
      RealPointValuePair realPointValuePair2 = new RealPointValuePair(doubleArray1, 980.6719634, true);
      realPointValuePairArray0[2] = realPointValuePair2;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1894, (-8), 0, 0).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(2, multiDirectional0.getIterations());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
      double[] doubleArray0 = new double[3];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-455.3496805874948), false);
      realPointValuePairArray0[0] = realPointValuePair0;
      realPointValuePairArray0[1] = realPointValuePair0;
      realPointValuePairArray0[2] = realPointValuePairArray0[0];
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiDirectional0.iterateSimplex(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.optimization.direct.MultiDirectional", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:46:44 GMT 2021
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder0.size = 17;
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      long long0 = strBuilder_StrBuilderReader0.skip(1);
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder0.size = 17;
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(345, 3923, 'J');
      assertEquals(3923, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(3923, strBuilder0.length());
      assertEquals(3923, strBuilder1.size());
      assertEquals(3923, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3923, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      strBuilder0.hashCode();
      assertEquals(3923, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(3923, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder((-1));
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight(405, 31, 'k');
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(31, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(31, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder2.size());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(31, strBuilder1.size());
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      assertEquals(0, strBuilder0.size());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3923, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder2 = new StrBuilder("");
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      
      boolean boolean0 = strBuilder2.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3923, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("startIndex must be valid");
      assertEquals(0, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder1.lastIndexOf("org.apache.commons.lang.text.StrBuilder", 0);
      assertEquals(0, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(3, charArray0.length);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 243);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mp,Rj]~dFM");
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("nLKP%m", 4);
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(919, 'c');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(929, strBuilder0.length());
      assertEquals(929, strBuilder0.size());
      assertEquals(929, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(929, strBuilder1.capacity());
      assertEquals(929, strBuilder1.length());
      assertEquals(929, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(929, strBuilder0.length());
      assertEquals(929, strBuilder0.size());
      assertEquals(929, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(929, strBuilder1.capacity());
      assertEquals(929, strBuilder1.length());
      assertEquals(929, strBuilder1.size());
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(5, 5);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNotNull(string0);
      assertEquals("}0\"/~", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-1), 1553);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-121), 0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startInex ust be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(54, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(0, (-3756));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(54, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(5);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder1.rightString(5);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("start", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Yr");
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("3");
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('=', 'i');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("Index must be valid");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 0, '\"');
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(0, 27, '|');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(51, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      assertEquals(51, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, ')');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "StrTokenizer[not tokenized yet]");
      assertEquals(31, stringBuffer0.length());
      assertEquals("StrTokenizer[not tokenized yet]", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 98);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startInex ust be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("length must be valid", 0, 20);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.size());
      assertEquals(54, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(54, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(42, strBuilder1.size());
      assertEquals(42, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("", 0, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("*x5s}0\"/~", 0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(10, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, 'y');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[8];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(2818);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.validateIndex(1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write("startIndex must be valid");
      assertEquals(48, strBuilder0.length());
      assertEquals(48, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(writer0);
      
      char[] charArray0 = new char[3];
      writer0.write(charArray0, 1, 0);
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(writer0);
      
      writer0.write((String) null, 418, (-859));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.validateRange(0, 0);
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be vald");
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.validateRange(9, Integer.MAX_VALUE);
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.capacity());
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#^Od");
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("#^Od", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.toString();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, true);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder1.substring(0, 8);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("Index must be valid", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("startIndex must be valid");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.size();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null);
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "1.3");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5);
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('e', '\\');
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, "org.apache.commons.lang.text.StrBuilder");
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(39, strBuilder1.size());
      assertEquals(39, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5);
      assertEquals(0, strBuilder0.length());
      assertEquals(5, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll('>', '>');
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(919, 'c');
      assertEquals(929, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(929, strBuilder0.size());
      assertEquals(929, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(929, strBuilder1.size());
      assertEquals(929, strBuilder1.capacity());
      assertEquals(929, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(929, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(929, strBuilder0.size());
      assertEquals(929, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getIgnoredMatcher();
      assertEquals(929, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(929, strBuilder0.size());
      assertEquals(929, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strMatcher0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replace(strMatcher0, "", 115, 919, 115);
      assertEquals(929, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(929, strBuilder0.size());
      assertEquals(929, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(929, strBuilder1.size());
      assertEquals(929, strBuilder1.capacity());
      assertEquals(929, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(929, strBuilder2.length());
      assertEquals(929, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(929, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('1');
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replace(strMatcher0, "user.country", 0, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'; the SystemUtils property value will default to null.");
      assertEquals(87, strBuilder0.capacity());
      assertEquals(55, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(87, strBuilder0.capacity());
      assertEquals(55, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("", 2333);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("s");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("startIndex must be valid");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder0.insert(0, charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(56, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(5, (Object) strBuilder0);
      assertEquals(74, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(74, strBuilder0.capacity());
      assertEquals(74, strBuilder0.length());
      assertEquals(74, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(74, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(74, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("remove() is unsupported");
      assertEquals(55, strBuilder0.capacity());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(8, 25L);
      assertEquals(55, strBuilder0.capacity());
      assertEquals(25, strBuilder0.length());
      assertEquals(25, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(25, strBuilder1.length());
      assertEquals(55, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(25, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, 4);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*T=~l7+rfc'x<nu+");
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("*T=~l7+rfc'x<nu+");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("startIndex must be valid"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("startIndex must be valid");
      assertTrue(linkedList0.contains("startIndex must be valid"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "startIndex must be valid");
      assertTrue(linkedList0.contains("startIndex must be valid"));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(51, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertEquals(51, strBuilder1.size());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("-`j<#8#");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(51, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(51, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(31);
      assertEquals(31, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(31, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.indexOf("", 12);
      assertEquals(31, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(115);
      assertEquals(115, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.size());
      assertEquals(115, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder0 = new StrBuilder("Uz_O<:}/ Un.GDztz");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(",eJkW|>fy");
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(56, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(24, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('G');
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('o');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(932);
      assertEquals(932, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(932, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(932, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(932, strBuilder1.length());
      assertEquals(932, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(932, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char char0 = strBuilder0.charAt(900);
      assertEquals(932, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(932, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(932, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((float) 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char char0 = strBuilder0.charAt(0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('2');
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
      
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      assertFalse(linkedList0.contains(strBuilder0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "gTsQ-d!vbL3jtZO");
      assertFalse(linkedList0.contains(strBuilder1));
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendPadding((-1), '\u0000');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('e');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('G');
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(0, 0, ')');
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains(':');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(56, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.append(stringBuffer0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(56, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(56, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('e');
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.append((String) null, 103, 1184);
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2354));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(116);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(116, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(852);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 852
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(927, 927);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(3, charArray0.length);
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      strBuilder1.size = (-688);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-688), strBuilder0.length());
      assertEquals((-688), strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-688), strBuilder1.size());
      assertEquals((-688), strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder1.replaceFirst((StrMatcher) strMatcher_StringMatcher0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertEquals(0, strBuilder0.size());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 17;
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder0.replaceAll('d', '|');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace((-160), 2383, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -160
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('S');
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder1.size());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      strBuilder1.buffer = charArray0;
      assertEquals(0, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder1.lastIndexOf("Av#", 72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.insert(107, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 107
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1381, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1381
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.util.prefs.PreferencesFactory");
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1496, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1496
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2132);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2132, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2333, (float) (-365));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2333
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-633), (double) (-633));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -633
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(57, 'N');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 57
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.equalsIgnoreCase((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.delete((-364), (-364));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -364
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.encoding");
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[2];
      strBuilder0.buffer = charArray0;
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "file.encoding");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang.text.StrMatcher$CharSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 757;
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(757, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(757, strBuilder0.length());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      stringBuffer0.setLength(667);
      assertEquals(667, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder0.size = 17;
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.append((Object) strBuilder_StrBuilderReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("startIndex must be valid");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 1037);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("\"?p}uvr+OZ\"|Y,x_o", 2333);
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("l#4YPNj;!hkCDe,\"");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('N', 0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null);
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, (-2680));
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#B:Xo%Ot$P/R]6$~A<");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, 11);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("qdy ", 4);
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("U|mjBm(`Ni~$fWU2");
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("startIndex must be valid", 0);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("add() is unsupported", (-708));
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf((String) null, 15);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("", 9);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('e', 0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('e', 31);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NF");
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.delete(0, 979);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(34, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, "h8");
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "user.country", 143, '5');
      assertEquals(143, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(143, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(143, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(143, strBuilder1.capacity());
      assertEquals(143, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(143, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" Veq9.l9L,3A^\"x");
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer0, 39, '(');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, (-1), 'j');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("f");
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 1, '/');
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("startIndex must be valid"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) linkedList0, 1036, '`');
      assertFalse(linkedList0.contains("startIndex must be valid"));
      assertEquals(1060, strBuilder0.capacity());
      assertEquals(1060, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1060, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, linkedList0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1060, strBuilder1.size());
      assertEquals(1060, strBuilder1.length());
      assertEquals(1060, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, (-1), 'z');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 15, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 3
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("", 28, 617);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NF");
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 0, charArray0, 2019);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-17));
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.length();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.size();
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.toString();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("startIndex must be valid", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((-3949L));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(1);
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertArrayEquals(new char[] {'r', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mp,Rj]~dFM");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Mp,Rj]~dFM");
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertEquals("Mp,Rj]~dFM", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1142));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 3127, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 102, (-983));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[3];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NF");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-1856), (-1856));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"rF}X");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = (StrBuilder.StrBuilderTokenizer)strBuilder0.asTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[0];
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 32, 32);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(list0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring(913, 913);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace((StrMatcher) strMatcher_TrimMatcher0, "", (-1451), (-1451), (-1451));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1451
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1094);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(1094, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(1094, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(1094, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) "");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder((-1));
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight(405, 31, '6');
      assertEquals(31, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(31, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(31, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(31, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder1.insert(9, true);
      assertEquals(31, strBuilder0.size());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(31, strBuilder4.length());
      assertEquals(31, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder2);
      assertEquals(31, strBuilder0.size());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(31, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(31, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]4},}\"&/u");
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1669));
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder((-1669));
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]4},}\"&/u");
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("\"?p}uvr+OZ\"|Y,x_o");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(3923, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 3923);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 3);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("IZvalid offset: ");
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("{dXJY;>KDSeXX", 2333);
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("W", 2316);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("i_5 [p\"*oMi}IAP", 2333);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf((String) null, (-2208));
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(3923, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('J', (-821));
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(3923, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startInde2 must be valid");
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('m', (int) 'm');
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("uof-fxq3D?N@g&S)gw@", "K8Y}[|Zs0Sq");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(24, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf((String) null);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("r");
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('X');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('2', (-2382));
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3923, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3923, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(3923, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, charArray0.length);
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3923, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(3923, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("\"?p}uvr+OZ\"|Y,x_o");
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("SunOS");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder1.contains('\u0000');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#^Od");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-121), 1553);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNotNull(string0);
      assertEquals("#^Od", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*T=~l7+rfc'x<nu+");
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(2, 5);
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("=~l7+", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(49, 896);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[2];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(70, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(70, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(70, strBuilder1.size());
      assertEquals(70, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(70, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, objectArray0.length);
      
      String string0 = strBuilder1.rightString(54);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(70, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(70, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(70, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(70, strBuilder1.size());
      assertEquals(70, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(70, strBuilder1.length());
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString((-1));
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(1235);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("start", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1040));
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString((-1040));
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(78);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(78, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(78, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(", '");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]4},}\"&/u");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("]4},}\"&/u");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(78);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(78, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("x=LDu#<68+bdw(");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(78, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("yV");
      assertEquals(17, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("startIndex must be valid");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("W");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(932);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(932, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(932, strBuilder0.length());
      assertEquals(932, strBuilder0.size());
      assertEquals(932, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(932, strBuilder1.capacity());
      assertEquals(932, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(932, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(932, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(102, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("o5L0X-");
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) null);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(38, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vm.vendor");
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("java.vm.vendor", "java.lang.Object");
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('e');
      assertEquals(46, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(15, strBuilder2.size());
      assertEquals(15, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(46, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("uof-fxq3D?N@g&S)gw@", "uof-fxq3D?N@g&S)gw@");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(1, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mp,Rj]~dFM");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "uof-fxq3D?N@g&S)gw@");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("startIndex must be valid", (String) null);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(56, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(3923, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(3923, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('=', '=');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('?', '$');
      assertEquals(49, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder1.size());
      assertEquals(17, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(49, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startI@dex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ".Xs9-G0mk");
      assertEquals(32, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(32, strBuilder1.size());
      assertEquals(32, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("startIndex must be valid", "startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(24, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("[^qpVl&]H9O");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("*x5s}0\"/~");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('\"');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startInde2 must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(345, 345, 'J');
      assertEquals(369, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(369, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(369, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(369, strBuilder1.length());
      assertEquals(369, strBuilder1.size());
      assertEquals(369, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('J');
      assertEquals(51, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(369, strBuilder0.capacity());
      assertEquals(51, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(51, strBuilder1.length());
      assertEquals(369, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(51, strBuilder2.size());
      assertEquals(51, strBuilder2.length());
      assertEquals(369, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("startIndex must be valid");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.insert(0, 'e');
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(56, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.deleteAll('e');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(56, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NF");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strMatcher0);
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(60, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(60, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(60, strBuilder1.size());
      assertEquals(60, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(60, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(44, charArray0, 0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strMatcher0);
      assertEquals(60, strBuilder0.capacity());
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(60, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(60, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.length());
      assertEquals(60, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(44, charArray0, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: 0");
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(11, charArray0, (-3756), 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -3756
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startInex ust be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(4, (char[]) null, 1434, (-3756));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.capacity());
      assertEquals(54, strBuilder1.capacity());
      assertEquals(22, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(22, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(5, charArray0, 31, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 31
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"?p}uvr+OZ\"|Y,x_o");
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1631, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1631
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight(97, 1, 'M');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 48, 'x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 25, 's');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertEquals(132, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(132, strBuilder0.capacity());
      assertEquals(132, strBuilder0.length());
      assertEquals(4, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(3, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(132, strBuilder1.length());
      assertEquals(132, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(132, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strTokenizer0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "BE>K_Z");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("startIndex must be valid"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("startIndex must be valid");
      assertTrue(linkedList0.contains("startIndex must be valid"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "startIndex must be valid");
      assertTrue(linkedList0.contains("startIndex must be valid"));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(51, strBuilder0.length());
      assertEquals(51, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      assertEquals(51, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('@');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(50, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(56, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(50, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(24, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "Invalid offset: ");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, (String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(false);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 1, 1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder0.size());
      assertEquals(25, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(25, strBuilder1.length());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(25, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]4},}\"&/u");
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 12
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 1, (-3551));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -3551
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(114);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 114, (-2759));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(114, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(977);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(977, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 977);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(932);
      assertEquals(932, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(932, strBuilder0.capacity());
      assertEquals(932, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(932, strBuilder1.size());
      assertEquals(932, strBuilder1.capacity());
      assertEquals(932, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, 932, (-34));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("3;n-Hz4|4@%Z&jt`E");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 2365, 1799);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-4225), (-390));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("qe4@j<b");
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      int int0 = strBuilder0.length();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(24, strBuilder1.size());
      assertEquals(24, strBuilder1.length());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("end < start");
      assertEquals("end < start", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1), 66);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 1751, 389);
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(2297);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 1, 661);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(" 5Lm#W}");
      assertEquals(7, stringBuffer0.length());
      assertEquals(" 5Lm#W}", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(7, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, stringBuffer0.length());
      assertEquals(" 5Lm#W}", stringBuffer0.toString());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.size());
      assertEquals(39, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(71, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1245);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("6G|", (-650), (-650));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.size());
      assertEquals(56, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(44);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Irix");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("Irix");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals("Irix", strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals("Irix", strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("Irix", strBuilder0.getNewLineText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder2.size());
      assertEquals(36, strBuilder2.capacity());
      assertEquals("Irix", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1, 1, charArray0, (-1768));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("java.version");
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.length());
      assertEquals(12, strBuilder1.size());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, 5, 2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.length());
      assertEquals(12, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-3616), (-2820), charArray0, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3616
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3923, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(3923, (-1768), (char[]) null, (-14));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1768
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '*', 'x', '5', 's', '}', '0', '\"', '/', '~'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(10, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(4825, 0, charArray0, (-4341));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(48, 971, '(');
      assertEquals(971, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(971, strBuilder0.capacity());
      assertEquals(971, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(971, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(971, strBuilder1.capacity());
      assertEquals(971, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder1.toCharArray(5, 32);
      assertEquals(971, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(971, strBuilder0.capacity());
      assertEquals(971, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(971, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(971, strBuilder1.capacity());
      assertEquals(971, strBuilder1.length());
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(27, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Msh|3My<hsJyh=UY");
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray0);
      assertEquals(16, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 27
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mp,Rj]~dFM");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteCharAt(2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "startIndex must be valid");
      strBuilder1.setCharAt(204, 'w');
      assertEquals(246, strBuilder0.size());
      assertEquals(246, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(1, ']');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-294), '0');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -294
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      char char0 = strBuilder0.charAt(2);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals('x', char0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$CharSetMatcher");
      // Undeclared exception!
      try { 
        strBuilder0.charAt(1532);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1532
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-2756));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2756
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(97);
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(97, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mp,Rj]~dFM");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(56, strBuilder0.capacity());
      
      strBuilder0.contains('e');
      strBuilder0.minimizeCapacity();
      assertEquals(24, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2201));
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-2201));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2201
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=_AjQ;");
      StrBuilder strBuilder1 = strBuilder0.setNullText("[z1}Wr y]4cSp");
      assertEquals(38, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(60);
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(60, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(charArray0);
      strBuilder0.getChars(charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("I!*v+^AQ[K");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(1110);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("remove() is unsupported");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(55, strBuilder0.capacity());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=_AjQ;");
      strBuilder0.append((-1.0));
      assertEquals(10, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("o5L0X-");
      strBuilder0.append('n');
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      int int0 = strBuilder0.lastIndexOf("start");
      assertEquals(0, int0);
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, (double) 0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, (-554.53F));
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.insert(48, 17);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1790), (long) (-1790));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1790
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$|PaHZNb;");
      strBuilder0.getNullText();
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]4},}\"&/u");
      strBuilder0.asReader();
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(3436L);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(3327);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3923);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(345, 3923, 'J');
      strBuilder1.replace(102, 102, "lQ#PPKdI#d)>_|.");
      assertEquals(3939, strBuilder0.capacity());
      assertEquals(3939, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      assertEquals(1, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.clear();
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1183);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(1183, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*x5s}0\"/~");
      int int0 = strBuilder0.lastIndexOf('y');
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("o5L0X-");
      // Undeclared exception!
      try { 
        strBuilder0.substring(3163);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      Writer writer0 = strBuilder0.asWriter();
      writer0.flush();
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("NF");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      strBuilder0.getNewLineText();
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertEquals(1, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, " 5Lm#W}");
      assertEquals(1, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("IZvalid offset: ");
      assertEquals(16, strBuilder0.size());
      
      strBuilder0.trim();
      assertEquals(15, strBuilder0.size());
  }
}

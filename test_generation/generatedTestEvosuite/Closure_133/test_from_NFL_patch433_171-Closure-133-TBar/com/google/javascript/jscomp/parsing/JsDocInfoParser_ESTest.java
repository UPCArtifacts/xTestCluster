/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:18:40 GMT 2021
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("/W\"R+");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(49, 49, token_CommentType0, "]7_IA|x7^1}\"veYp");
      assertNotNull(comment0);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(161, comment0.getType());
      assertEquals(49, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(49, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("]7_IA|x7^1}\"veYp", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(49, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("/W\"R+"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("/W\"R+"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertFalse(treeSet0.contains("/W\"R+"));
      assertEquals(161, comment0.getType());
      assertEquals(49, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(49, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("]7_IA|x7^1}\"veYp", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(49, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertFalse(treeSet0.contains("/W\"R+"));
      assertEquals(161, comment0.getType());
      assertEquals(49, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(49, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("]7_IA|x7^1}\"veYp", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(49, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("j/Uj\"(6)uh /;C/^");
      assertNotNull(node0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("j/Uj\"(6)uh /;C/^"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language version", 30);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertFalse(set0.contains("j/Uj\"(6)uh /;C/^"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node1.equals((Object)node0));
      assertFalse(set0.contains("j/Uj\"(6)uh /;C/^"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(30, node1.getLineno());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isName());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(9, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(122889, node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isVarArgs());
      assertEquals(306, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("~4BmFK TE`I)", 42);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-52), (-51), token_CommentType0, "j/Uj\"");
      assertNotNull(comment0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals("j/Uj\"", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-52), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-52), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-51), comment0.getLength());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("j/Uj\""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("j/Uj\""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.FUNCTION_PROP);
      assertFalse(linkedHashSet0.contains("j/Uj\""));
      assertEquals("j/Uj\"", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-52), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-52), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-51), comment0.getLength());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((com.google.javascript.rhino.Node) null);
      assertNull(jSTypeExpression0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.FUNCTION_PROP);
      assertFalse(linkedHashSet0.contains("j/Uj\""));
      assertEquals("j/Uj\"", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-52), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-52), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-51), comment0.getLength());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.extends.duplicate", 1569);
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(1569, "50e/^HG7.E", (-2687), (-2687));
      assertNotNull(node0);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertEquals(1569, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertNotNull(jSTypeExpression0);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(set0.contains("50e/^HG7.E"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertEquals(1569, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(123, 123, token_CommentType0, "EXPOSE");
      assertNotNull(comment0);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals("EXPOSE", comment0.getValue());
      assertEquals(123, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(123, comment0.getPosition());
      assertEquals(123, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(0, "ADD", 24, 1907);
      assertNotNull(node0);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(100211, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals(24, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertEquals(1907, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("ADD"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(hashSet0.contains("ADD"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertFalse(hashSet0.contains("ADD"));
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals("EXPOSE", comment0.getValue());
      assertEquals(123, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(123, comment0.getPosition());
      assertEquals(123, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(100211, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals(24, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertEquals(1907, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function", (-2058246339));
      assertNotNull(jsDocTokenStream0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(vector0);
      assertNotNull(arrayList0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("function"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(hashSet0.contains("function"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(hashSet0.contains("function"));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(0, 0, token_CommentType0, "msg.unexpected.eof");
      assertNotNull(comment0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("msg.unexpected.eof", comment0.getValue());
      assertEquals(0, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getPosition());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      com.google.javascript.rhino.Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertNotNull(node0);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertEquals(83, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("msg.unexpected.eof"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(hashSet0.contains("msg.unexpected.eof"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("new", 508);
      assertNotNull(jsDocTokenStream0);
      
      jsDocTokenStream0.sourceCursor = 19;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(hashSet0.contains("msg.unexpected.eof"));
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("msg.unexpected.eof", comment0.getValue());
      assertEquals(0, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getPosition());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertEquals(83, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.extends.duplicate");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(192, 192, token_CommentType0, "msg.jsdoc.extends.duplicate");
      assertNotNull(comment0);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.extends.duplicate", comment0.getValue());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(192, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(192, comment0.getLength());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("j/Uj\"(6)uh /;C/^");
      assertNotNull(node0);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.extends.duplicate"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, linkedHashSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(linkedHashSet0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(linkedHashSet0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.extends.duplicate", comment0.getValue());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(192, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(192, comment0.getLength());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[ah'MXCLj0WDIA4%;", 1026, 36);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, (Config) null, (ErrorReporter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!==");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-6227), (-520), token_CommentType0, "!==");
      assertNotNull(comment0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals((-6227), comment0.getPosition());
      assertEquals((-520), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("!==", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(130, "!==", 0, 9);
      assertNotNull(node0);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(9, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertTrue(node0.isExprResult());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(130, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(9, node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("!=="));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("!=="));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertFalse(linkedHashSet0.contains("!=="));
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals((-6227), comment0.getPosition());
      assertEquals((-520), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("!==", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(9, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertTrue(node0.isExprResult());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertEquals(130, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(9, node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("?OCGT");
      assertNotNull(node0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(304, node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[O%jF8DIkn6]vMJ=n");
      assertNotNull(node0);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertEquals(308, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.extends.duplicate", 192);
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getFileOverview());
      assertTrue(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasBaseType());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("attemping superclasses/interfaces.");
      assertNotNull(node0);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(set0.contains("attemping superclasses/interfaces."));
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language version", (-658));
      assertNotNull(jsDocTokenStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("language version"));
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(set0.contains("language version"));
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(set0.contains("language version"));
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(set0.contains("language version"));
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[ah'MXCLj0WDIA4%;");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function", (-2058246377));
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("msg.jsdoc.extends.duplicate");
      assertNotNull(node0);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertFalse(node1.equals((Object)node0));
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getLength());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isThrow());
      assertEquals(302, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("X!qC//5\";`");
      assertNotNull(node0);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertEquals(306, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("at?emping superclasses/interfaces.");
      assertNotNull(node0);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(304, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(2, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.extends.duplicate");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(192, 192, token_CommentType0, "msg.jsdoc.extends.duplicate");
      assertNotNull(comment0);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.extends.duplicate", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(192, comment0.getLength());
      assertEquals(192, comment0.getPosition());
      assertEquals(161, comment0.getType());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("j/Uj\"(6)uh /;C/^");
      assertNotNull(node0);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, linkedHashSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(linkedHashSet0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(linkedHashSet0.contains("msg.jsdoc.extends.duplicate"));
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.extends.duplicate", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(192, comment0.getLength());
      assertEquals(192, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertFalse(node1.equals((Object)node0));
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertFalse(linkedHashSet0.contains("msg.jsdoc.extends.duplicate"));
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.extends.duplicate", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(192, comment0.getLength());
      assertEquals(192, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getLineno());
      assertEquals(304, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isStringKey());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertEquals(26, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qD}?b");
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(5, "nmsM", 150, 1675);
      assertNotNull(node0);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInc());
      assertEquals(150, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertEquals(616075, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertEquals(5, node0.getType());
      assertEquals(1675, node0.getCharno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("nmsM"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("nmsM"));
      assertFalse(linkedHashSet0.contains("nmsM"));
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertFalse(set0.contains("nmsM"));
      assertFalse(linkedHashSet0.contains("nmsM"));
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInc());
      assertEquals(150, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertEquals(616075, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertEquals(5, node0.getType());
      assertEquals(1675, node0.getCharno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(node1.equals((Object)node0));
      assertFalse(set0.contains("nmsM"));
      assertFalse(linkedHashSet0.contains("nmsM"));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInc());
      assertEquals(150, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertEquals(616075, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertEquals(5, node0.getType());
      assertEquals(1675, node0.getCharno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertTrue(node1.isString());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isHook());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertEquals(2, node1.getLength());
      assertFalse(node1.isName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-6227), (-520), token_CommentType0, "!==");
      assertNotNull(comment0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("!==", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals((-520), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals((-6227), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("nmsM", 4);
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(130, "!==", 0, 9);
      assertNotNull(node0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(9, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertEquals(130, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertEquals(9, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("!=="));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("!=="));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(linkedHashSet0.contains("!=="));
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("!==", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals((-520), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals((-6227), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(9, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertEquals(130, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertEquals(9, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!==");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-6227), (-520), token_CommentType0, "!==");
      assertNotNull(comment0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-6227), comment0.getPosition());
      assertEquals((-520), comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals("!==", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoAlias());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(set0.contains("!=="));
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("!=="));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("!=="));
      assertFalse(linkedHashSet0.contains("!=="));
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertFalse(set0.contains("!=="));
      assertFalse(linkedHashSet0.contains("!=="));
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-6227), comment0.getPosition());
      assertEquals((-520), comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals("!==", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertFalse(set0.contains("!=="));
      assertFalse(linkedHashSet0.contains("!=="));
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-6227), comment0.getPosition());
      assertEquals((-520), comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals("!==", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@184RT!ntb~hOdn#T");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-21), 1018, token_CommentType0, "msg.generator.returns");
      assertNotNull(comment0);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals("161", comment0.toString());
      assertEquals(1018, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("msg.generator.returns", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-21), comment0.getAbsolutePosition());
      assertEquals((-21), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(3, "JavaAdapter");
      assertNotNull(node0);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertEquals(3, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("@184RT!ntb~hOdn#T"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("@184RT!ntb~hOdn#T"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(linkedHashSet0.contains("@184RT!ntb~hOdn#T"));
      assertEquals("161", comment0.toString());
      assertEquals(1018, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("msg.generator.returns", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-21), comment0.getAbsolutePosition());
      assertEquals((-21), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertEquals(3, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("U)|7}uV\"Y6A");
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newNumber((double) (-1730508902));
      assertNotNull(node0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qD}?b");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newNumber(8.64E15);
      assertNotNull(node0);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertTrue(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("3M>}lo,yZf.}(IIxV}}");
      assertNotNull(node0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(43, 9, token_CommentType0, "msg.end.annotation.expected");
      assertNotNull(comment0);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, comment0.depth());
      assertEquals("msg.end.annotation.expected", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(9, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(43, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(43, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("3M>}lo,yZf.}(IIxV}}"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(hashSet0.contains("3M>}lo,yZf.}(IIxV}}"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("]\" 9:^&oKj!c", 12);
      assertNotNull(jsDocTokenStream0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(hashSet0.contains("]\" 9:^&oKj!c"));
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(0, comment0.depth());
      assertEquals("msg.end.annotation.expected", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(9, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(43, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(43, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(hashSet0.contains("]\" 9:^&oKj!c"));
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(0, comment0.depth());
      assertEquals("msg.end.annotation.expected", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(9, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(43, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(43, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("U)|7}uV\"Y6A");
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      HashSet<String> hashSet0 = new HashSet<String>(set0);
      assertNotNull(hashSet0);
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertFalse(hashSet0.contains("U)|7}uV\"Y6A"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config config0 = new Config(hashSet0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertFalse(hashSet0.contains("U)|7}uV\"Y6A"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newNumber((double) (-2849));
      assertNotNull(node0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertFalse(hashSet0.contains("U)|7}uV\"Y6A"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertFalse(hashSet0.contains("U)|7}uV\"Y6A"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isExpose());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser1);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(set0.contains("U)|7}uV\"Y6A"));
      assertFalse(hashSet0.contains("U)|7}uV\"Y6A"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser1.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qD}?b");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newNumber(8.64E15);
      assertNotNull(node0);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isHidden());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser1);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      
      boolean boolean0 = jsDocInfoParser1.parse();
      assertFalse(boolean0);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(set0.contains("qD}?b"));
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-292), 50, token_CommentType0, "{KS/04Hq~GQ8");
      assertNotNull(comment0);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(161, comment0.getType());
      assertEquals(50, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{KS/04Hq~GQ8", comment0.getValue());
      assertEquals((-292), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-292), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("{KS/04Hq~GQ8"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(hashSet0.contains("{KS/04Hq~GQ8"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[O%jF8DIkn6]vMJ=n", 2);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertFalse(hashSet0.contains("[O%jF8DIkn6]vMJ=n"));
      assertEquals(161, comment0.getType());
      assertEquals(50, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{KS/04Hq~GQ8", comment0.getValue());
      assertEquals((-292), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-292), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-292), 50, token_CommentType0, "{KS/04Hq~GQ8");
      assertNotNull(comment0);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(50, comment0.getLength());
      assertEquals("{KS/04Hq~GQ8", comment0.getValue());
      assertEquals((-292), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-292), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("{KS/04Hq~GQ8"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(hashSet0.contains("{KS/04Hq~GQ8"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(">");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertFalse(hashSet0.contains(">"));
      assertEquals(50, comment0.getLength());
      assertEquals("{KS/04Hq~GQ8", comment0.getValue());
      assertEquals((-292), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-292), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(":#V");
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newNumber((double) 3, 126, 1271);
      assertNotNull(node0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertEquals(517367, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertEquals(126, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertEquals(1271, node0.getCharno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertFalse(set0.contains(":#V"));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertEquals(517367, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertEquals(126, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertEquals(1271, node0.getCharno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!==");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-6227), (-520), token_CommentType0, "!==");
      assertNotNull(comment0);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-6227), comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals((-520), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("!==", comment0.getValue());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node((-3873));
      assertNotNull(node0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isString());
      assertEquals((-3873), node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      
      Locale locale0 = Locale.forLanguageTag("V}^Pfwy/$");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("!=="));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("!=="));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertFalse(set0.contains("!=="));
      assertEquals((-6227), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-6227), comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals((-520), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("!==", comment0.getValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isString());
      assertEquals((-3873), node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Du#<68+b");
      assertNotNull(node0);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{)gN\"mQI", 19, 55);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(36, 55296, token_CommentType0, "$#=w}}3Qh=}D*EDvr");
      assertNotNull(comment0);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(55296, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(36, comment0.getPosition());
      assertEquals("$#=w}}3Qh=}D*EDvr", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("Du#<68+b"));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertFalse(set0.contains("Du#<68+b"));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(55296, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(36, comment0.getPosition());
      assertEquals("$#=w}}3Qh=}D*EDvr", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.extends.duplicate", 1569);
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertTrue(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo1);
      assertFalse(set0.contains("msg.jsdoc.extends.duplicate"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(192, 192, token_CommentType0, "@184RT!ntb~hOdn#T");
      assertNotNull(comment0);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(192, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("@184RT!ntb~hOdn#T", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(192, comment0.getLength());
      assertEquals(192, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node(1);
      assertNotNull(node0);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("@184RT!ntb~hOdn#T"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("@184RT!ntb~hOdn#T"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@184RT!ntb~hOdn#T");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertFalse(linkedHashSet0.contains("@184RT!ntb~hOdn#T"));
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(192, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("@184RT!ntb~hOdn#T", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(192, comment0.getLength());
      assertEquals(192, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{KS/04Hq~GQ8");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Zb BF.");
      assertNotNull(node0);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExterns());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(set0.contains("Zb BF."));
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExterns());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Zb BF.", 53);
      assertNotNull(jsDocTokenStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("Zb BF."));
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExterns());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertFalse(set0.contains("Zb BF."));
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExterns());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertFalse(set0.contains("Zb BF."));
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExterns());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Zb BF.");
      assertNotNull(node0);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertEquals(2, node0.getLength());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertFalse(set0.contains("Zb BF."));
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Zb BF.", 53);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("Zb BF."));
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertFalse(set0.contains("Zb BF."));
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertEquals(2, node0.getLength());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("vd");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(192, 192, token_CommentType0, "@184RT!ntb~hOdn#T");
      assertNotNull(comment0);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals("@184RT!ntb~hOdn#T", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(192, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(192, comment0.getLength());
      
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node(1);
      assertNotNull(node0);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(1, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("vd"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("vd"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(linkedHashSet0.contains("vd"));
      assertEquals("@184RT!ntb~hOdn#T", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(192, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(192, comment0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(1, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(linkedHashSet0.contains("vd"));
      assertEquals("@184RT!ntb~hOdn#T", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(192, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(192, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(192, comment0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(1, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qD}?b");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("qD}?b"));
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("parser reused");
      assertNotNull(node0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(set0.contains("parser reused"));
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      
      jsDocInfoParser0.setFileLevelJsDocBuilder((com.google.javascript.rhino.Node.FileLevelJsDocBuilder) null);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(set0.contains("parser reused"));
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("BYT~k$-40l|+");
      assertNotNull(node0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertEquals(11, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertEquals(11, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertEquals(11, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertEquals(11, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertEquals(11, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertEquals(11, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("BYT~k$-40l|+");
      assertNotNull(node0);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertEquals(11, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(11, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(301, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertEquals(11, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(11, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(301, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertFalse(treeSet0.contains("BYT~k$-40l|+"));
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertEquals(11, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(11, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(301, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("function");
      assertNull(node0);
  }
}

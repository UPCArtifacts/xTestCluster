/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 22:15:09 GMT 2021
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Month;
import org.jfree.data.time.Year;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(true);
      DateAxis dateAxis0 = new DateAxis();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, dateAxis0, dateAxis0, xYBubbleRenderer0);
      dateAxis0.setLabelURL("");
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Color color0 = Color.DARK_GRAY;
      categoryAxis0.setTickMarkPaint(color0);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'paint' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      extendedCategoryAxis0.setTickLabelInsets(combinedDomainXYPlot0.DEFAULT_INSETS);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3633.237139110243, 1428.03687011);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      cyclicNumberAxis0.setTickLabelPaint(stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("WG");
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      logarithmicAxis0.setTickLabelFont(font0);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(true);
      DateAxis dateAxis0 = new DateAxis();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, dateAxis0, dateAxis0, xYBubbleRenderer0);
      categoryAxis3D0.setAxisLineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("Ry ~S('stOsnZ%%GNz");
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Ry ~S('stOsnZ%%GNz");
      subCategoryAxis0.setAxisLinePaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.general.CombinedDataset");
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      FlowArrangement flowArrangement0 = new FlowArrangement();
      LegendTitle legendTitle0 = new LegendTitle(xYBubbleRenderer0, columnArrangement0, flowArrangement0);
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      extendedCategoryAxis0.setLabelInsets(legendTitle0.DEFAULT_PADDING);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{0}");
      subCategoryAxis0.setLabelPaint(candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=>:z!q-tixB$2M");
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      DateAxis dateAxis0 = new DateAxis("'Oqtb?.OT*bt");
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ZOOM_RESET_BOTH";
      stringArray0[1] = "ZOOM_IN_DOMAIN";
      SymbolAxis symbolAxis0 = new SymbolAxis("SAVE", stringArray0);
      symbolAxis0.setLabelPaint(extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      // Undeclared exception!
      try { 
        symbolAxis0.draw(graphics2D0, 0.05, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[10];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setVisible(false);
      assertFalse(symbolAxis0.isVisible());
      
      symbolAxis0.setVisible(true);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("k b44yui0nz4*;");
      CompassPlot compassPlot0 = new CompassPlot();
      categoryAxis3D0.setPlot(compassPlot0);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("~k{");
      categoryAxis3D0.setAxisLineVisible(true);
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=Z$0");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(symbolAxis0);
      extendedCategoryAxis0.notifyListeners(axisChangeEvent0);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.configure();
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.util.StandardGradientPaintTransformer");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 500);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      periodAxis0.addChangeListener(thermometerPlot0);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("ulyl 'font' rgument.");
      boolean boolean0 = logarithmicAxis0.isVisible();
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(boolean0);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("6c]6LTAws/)");
      boolean boolean0 = dateAxis0.isTickMarksVisible();
      assertTrue(dateAxis0.isVisible());
      assertTrue(boolean0);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("k b44yui0nz4*;");
      boolean boolean0 = categoryAxis3D0.isTickMarksVisible();
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(boolean0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("*5%HjI/XT!7)");
      boolean boolean0 = subCategoryAxis0.isTickLabelsVisible();
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(boolean0);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.general.CombinedDataset");
      Color color0 = (Color)extendedCategoryAxis0.getTickMarkPaint();
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(128, color0.getGreen());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      float float0 = dateAxis0.getTickMarkOutsideLength();
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, float0, 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("( uhEF8Y^");
      Color color0 = (Color)extendedCategoryAxis0.getTickLabelPaint();
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, color0.getGreen());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.util.StandardGradientPaintTransformer");
      RectangleInsets rectangleInsets0 = periodAxis0.getTickLabelInsets();
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Font font0 = categoryAxis0.getTickLabelFont();
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.getPlot();
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(15, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      DateAxis dateAxis0 = new DateAxis("X");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals((-6.484375), rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.getLabel();
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.getFixedDimension();
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("gLY4");
      logarithmicAxis0.getAxisLineStroke();
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("~osB5u^4+");
      Color color0 = (Color)extendedCategoryAxis0.getAxisLinePaint();
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=>:z!q-tixB$2M");
      DateAxis dateAxis0 = new DateAxis("}u,n=xM LX;p");
      ModuloAxis moduloAxis0 = new ModuloAxis("'Oqtb?.OT*bt", dateAxis0.DEFAULT_DATE_RANGE);
      extendedCategoryAxis0.equals(moduloAxis0);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("^a");
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("^a", xYBubbleRenderer0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'percentFormat' argument.");
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = numberAxis3D0.draw(graphics2D0, 4.0, rectangle2D_Float0, rectangle2D_Float0, rectangleEdge0, plotRenderingInfo0);
      extendedCategoryAxis0.drawLabel("l-cs?%}zTH)c", graphics2D0, rectangle2D_Float0, rectangle2D_Float0, rectangleEdge0, axisState0, plotRenderingInfo0);
      assertEquals(3, standardEntityCollection0.getEntityCount());
      assertFalse(valueAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("^a");
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("^a", xYBubbleRenderer0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'percentFormat' argument.");
      RectangleEdge rectangleEdge1 = combinedDomainXYPlot0.getDomainAxisEdge(600);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = numberAxis3D0.draw(graphics2D0, 4.0, rectangle2D_Float0, rectangle2D_Float0, rectangleEdge1, plotRenderingInfo0);
      extendedCategoryAxis0.drawLabel("l-cs?%}zTH)c", graphics2D0, rectangle2D_Float0, rectangle2D_Float0, rectangleEdge0, axisState0, plotRenderingInfo0);
      assertEquals(3, standardEntityCollection0.getEntityCount());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{0}");
      SubCategoryAxis subCategoryAxis1 = (SubCategoryAxis)subCategoryAxis0.clone();
      assertTrue(subCategoryAxis1.isVisible());
      assertEquals(0.0, subCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertNotSame(subCategoryAxis1, subCategoryAxis0);
      assertTrue(subCategoryAxis1.isAxisLineVisible());
      assertFalse(subCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("}u,n=xM LX;p");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(10);
      // Undeclared exception!
      try { 
        dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("~osB5u^4+");
      boolean boolean0 = extendedCategoryAxis0.hasListener(yIntervalSeriesCollection0);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Year year0 = new Year();
      Month month0 = new Month(10, year0);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, month0, month0, year0.DEFAULT_TIME_ZONE);
      double double0 = periodAxis0.getLabelAngle();
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, double0, 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Font font0 = logarithmicAxis0.getLabelFont();
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'state' argument.");
      RectangleInsets rectangleInsets0 = subCategoryAxis0.getLabelInsets();
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'labelAnchor' argument.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis(")\"B<l~UA");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertFalse(boolean0);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertTrue(extendedCategoryAxis1.isVisible());
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("m70$tKt1.u$p&-");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(30, 1, 1.5707963267948966, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.draw(graphics2D0, 1, (Rectangle2D) null, (Rectangle2D) null, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      DateAxis dateAxis0 = new DateAxis("'Oqtb?.OT*bt");
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 1.0, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(30, 1, (double) 10, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("m70u$tKt1.u$-");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      JScrollPane jScrollPane0 = new JScrollPane(jRadioButtonMenuItem0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getDomainAxisEdge();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 25.5, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "=Z$0";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      BufferedImage bufferedImage0 = new BufferedImage(2, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      DateAxis dateAxis0 = new DateAxis("");
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        symbolAxis0.draw(graphics2D0, (-30.0), rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 10, (double) 1.0F, (double) 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle rectangle0 = new Rectangle();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      extendedCategoryAxis0.draw(graphics2D0, (-2446.03157), rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(2409, 500, 12);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      numberAxis0.removeChangeListener(categoryPlot0);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.removeChangeListener(thermometerPlot0);
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
      assertTrue(valueAxis0.isTickMarksVisible());
      assertTrue(valueAxis0.isVisible());
      assertFalse(valueAxis0.isAxisLineVisible());
      assertTrue(valueAxis0.isTickLabelsVisible());
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      // Undeclared exception!
      try { 
        categoryAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Color color0 = (Color)categoryAxis0.getLabelPaint();
      categoryAxis0.setTickMarkPaint(color0);
      assertEquals(0, color0.getGreen());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setTickMarkStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("=>:z!q-tixB$2M");
      subCategoryAxis0.setTickMarkStroke(xYErrorRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickMarksVisible(false);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setTickLabelInsets(categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("~osB5u^4+");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3633.237139110243, 1428.03687011);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("lW`*R(SzKr{,}", stringArray0);
      symbolAxis0.setTickLabelPaint(xYBubbleRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      // Undeclared exception!
      try { 
        valueAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setTickLabelFont(categoryAxis3D0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      
      numberAxis3D0.setTickLabelsVisible(false);
      assertFalse(numberAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      assertTrue(valueAxis0.isTickLabelsVisible());
      
      valueAxis0.setTickLabelsVisible(true);
      assertTrue(valueAxis0.isVisible());
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
      assertTrue(valueAxis0.isTickMarksVisible());
      assertFalse(valueAxis0.isAxisLineVisible());
      assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      // Undeclared exception!
      try { 
        dateAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      categoryAxis3D0.setAxisLinePaint(logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("^a");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      extendedCategoryAxis0.setLabelInsets(valueAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertFalse(valueAxis0.isAxisLineVisible());
      assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
      assertTrue(valueAxis0.isTickMarksVisible());
      assertTrue(valueAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(valueAxis0.isTickLabelsVisible());
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=>:z!q-tixB$2M");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("m70u$tKt1.u$-");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("RectangleAnchor.TOP_LEFT");
      extendedCategoryAxis0.setLabelFont(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.util.ShapeList");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("=>:z!q-tixB$2M");
      logarithmicAxis0.setLabelFont(xYBubbleRenderer0.DEFAULT_VALUE_LABEL_FONT);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis(stringArray0[7], stringArray0);
      symbolAxis0.setLabel((String) null);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("DBjN", stringArray0);
      symbolAxis0.setLabel("DBjN");
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setLabel("*5%HjI/XT!7)");
      assertEquals("*5%HjI/XT!7)", symbolAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis(stringArray0[3], stringArray0);
      symbolAxis0.setLabel("IgS}9^4yTwEu)m\"$t%");
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      assertTrue(symbolAxis0.isVisible());
      
      symbolAxis0.setVisible(true);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setTickMarkInsideLength((-131.912F));
      assertEquals((-131.912F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      symbolAxis0.getLabelToolTip();
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.getLabelURL();
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelToolTip("");
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabelAngle(625.854150322);
      assertEquals(625.854150322, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'state' argument.");
      subCategoryAxis0.setTickMarkOutsideLength((-3480.9F));
      assertEquals((-3480.9F), subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.setFixedDimension((-1865.326854921093));
      assertEquals((-1865.326854921093), categoryAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=>:z!q-tixB$2M");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=>:z!q-tixB$2M", extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 14 21:05:53 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(true);
      DateAxis dateAxis0 = new DateAxis();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, dateAxis0, dateAxis0, xYBubbleRenderer0);
      MockDate mockDate0 = new MockDate();
      dateAxis0.setMaximumDate(mockDate0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0F);
      cyclicNumberAxis0.setTickMarkOutsideLength(4176.2227F);
      assertEquals(4176.2227F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'insets' argument.");
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      
      extendedCategoryAxis0.setTickMarksVisible(true);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      MeterPlot meterPlot0 = new MeterPlot();
      logarithmicAxis0.setTickLabelPaint(meterPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1411.829302891);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = thermometerPlot0.getValueFont();
      cyclicNumberAxis0.setTickLabelFont(font0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("u|dGgKd-");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      categoryAxis0.setAxisLinePaint(candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      AxisState axisState0 = numberAxis3D0.draw(graphics2D0, (-2129.0742), defaultCaret0, defaultCaret0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals((-2143.0742), axisState0.getCursor(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      extendedCategoryAxis0.setLabelInsets(rectangleInsets0);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'font' argument.");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      extendedCategoryAxis0.setLabelPaint(defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("k b44yui0nz4*;");
      CompassPlot compassPlot0 = new CompassPlot();
      categoryAxis3D0.setPlot(compassPlot0);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("~k{");
      categoryAxis3D0.setAxisLineVisible(true);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.notifyListeners(axisChangeEvent0);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.configure();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.util.StandardGradientPaintTransformer");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 500);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      periodAxis0.addChangeListener(thermometerPlot0);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      boolean boolean0 = dateAxis0.isVisible();
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "");
      boolean boolean0 = cyclicNumberAxis0.isTickMarksVisible();
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      boolean boolean0 = extendedCategoryAxis0.isTickMarksVisible();
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      boolean boolean0 = dateAxis0.isTickLabelsVisible();
      assertTrue(boolean0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'state' argument.");
      boolean boolean0 = extendedCategoryAxis0.isAxisLineVisible();
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.getTickMarkStroke();
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Color color0 = (Color)dateAxis0.getTickMarkPaint();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      float float0 = dateAxis0.getTickMarkOutsideLength();
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, float0, 0.01F);
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(";KY0KW");
      float float0 = extendedCategoryAxis0.getTickMarkInsideLength();
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("!Z;Ud\f");
      Color color0 = (Color)logarithmicAxis0.getTickLabelPaint();
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0, color0.getRed());
      assertTrue(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RectangleInsets rectangleInsets0 = dateAxis0.getTickLabelInsets();
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Font font0 = dateAxis0.getTickLabelFont();
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(10, font0.getSize());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("<NH$)dB/>m'jYQ");
      logarithmicAxis0.getPlot();
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(";ELHPwuM", thermometerPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 1720, (double) 2, (double) 0.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      DateAxis dateAxis0 = new DateAxis(";ELHPwuM");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals((-14.138671875), rectangle2D_Double0.y, 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getLabel();
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("RectangleAnchor.TOP_LEFT");
      extendedCategoryAxis0.getLabel();
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("x_O;]yhm#q_t`vj");
      double double0 = logarithmicAxis0.getFixedDimension();
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Hyn~fpI_2u?|q+");
      logarithmicAxis0.getAxisLineStroke();
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Color color0 = (Color)dateAxis0.getAxisLinePaint();
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0F);
      cyclicNumberAxis0.equals(cyclicNumberAxis0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis(":lp6;", stringArray0);
      SymbolAxis symbolAxis1 = (SymbolAxis)symbolAxis0.clone();
      assertEquals(0.0, symbolAxis1.getLabelAngle(), 0.01);
      assertTrue(symbolAxis1.isVisible());
      assertTrue(symbolAxis1.isTickMarksVisible());
      assertEquals(0.0F, symbolAxis1.getTickMarkInsideLength(), 0.01F);
      assertNotSame(symbolAxis1, symbolAxis0);
      assertTrue(symbolAxis1.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("t|IO");
      // Undeclared exception!
      try { 
        logarithmicAxis0.getLabelEnclosure((Graphics2D) null, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("t|IO");
      extendedCategoryAxis0.setLabelPaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertFalse(valueAxis0.isAxisLineVisible());
      assertTrue(valueAxis0.isTickMarksVisible());
      
      Color color0 = (Color)extendedCategoryAxis0.getLabelPaint();
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("t<SBLkY$Bf6`{-V:gPN");
      double double0 = extendedCategoryAxis0.getLabelAngle();
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Font font0 = dateAxis0.getLabelFont();
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0F);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0E-100, "RectangleAnchor.TOP_LEFT");
      cyclicNumberAxis1.equals(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        categoryAxis0.draw(graphics2D0, 0.2, defaultCaret0, defaultCaret0, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 500, (-3028.078), (double) 1.0F, chartRenderingInfo0);
      assertEquals(2, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("RectangleAnchor.TOP_LEFT");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("RectangleAnchor.TOP_LEFT", extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1720, 602, 1.5707963267948966, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DateAxis dateAxis0 = new DateAxis("t|IO");
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertTrue(dateAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.515625, rectangle2D_Double0.x, 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 1, 3044, 2767, 1, (-5), true, false, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 3, (double) (-5), (double) 3, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      DateAxis dateAxis0 = new DateAxis("");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      dateAxis0.setTickLabelInsets(combinedRangeCategoryPlot0.DEFAULT_INSETS);
      dateAxis0.setTickLabelInsets(combinedRangeCategoryPlot0.DEFAULT_INSETS);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      boolean boolean0 = logarithmicAxis0.hasListener(combinedRangeCategoryPlot0);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(boolean0);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Hyn~fpI_2u?|q+");
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction("Hyn~fpI_2u?|q+", 500);
      boolean boolean0 = logarithmicAxis0.hasListener(styledEditorKit_AlignmentAction0);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      PiePlot piePlot0 = new PiePlot();
      dateAxis0.removeChangeListener(piePlot0);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1411.829302891);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      cyclicNumberAxis0.removeChangeListener(combinedRangeXYPlot0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      dateAxis0.setTickMarkPaint(xYBubbleRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(",'9m~@er%");
      float[][] floatArray0 = new float[2][9];
      DateAxis dateAxis0 = new DateAxis(",'9m~@er%");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
      Stroke stroke0 = fastScatterPlot0.getDomainGridlineStroke();
      extendedCategoryAxis0.setTickMarkStroke(stroke0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      extendedCategoryAxis0.setTickMarkStroke(moduloAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      dateAxis0.setTickMarkStroke(categoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isTickMarksVisible());
      
      dateAxis0.setTickMarksVisible(true);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
      RectangleInsets rectangleInsets0 = dateAxis0.getTickLabelInsets();
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stae' argument.");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0);
      cyclicNumberAxis0.setTickLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(false);
      assertFalse(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(true);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("unSLQ`~n\"%-d&");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'periodClass' argument.");
      extendedCategoryAxis0.setAxisLineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      categoryAxis0.setAxisLinePaint(categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{bYMnJ3Uv]");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'state' argument.");
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'font' argument.");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 0.05);
      cyclicNumberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("&m&2i3:A\"8G^");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("RectangleAnchor.TOP_LEFT");
      extendedCategoryAxis0.setLabelFont(extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0F);
      extendedCategoryAxis0.setLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel("b7Q+EwI9~,5c[");
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("_<A4w@Q5");
      dateAxis0.setLabel("_<A4w@Q5");
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("wwC,'hK-%'S5K");
      dateAxis0.setLabel("Invalid 'angle' (");
      assertEquals("Invalid 'angle' (", dateAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel((String) null);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[31];
      SymbolAxis symbolAxis0 = new SymbolAxis("EB T", stringArray0);
      assertTrue(symbolAxis0.isVisible());
      
      symbolAxis0.setVisible(false);
      assertFalse(symbolAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(dateAxis0.isVisible());
      
      dateAxis0.setVisible(true);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarkInsideLength(4169.936F);
      assertEquals(4169.936F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getLabelToolTip();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'state' argument.");
      extendedCategoryAxis0.getLabelURL();
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelToolTip("i]D]hrDP0[Kkj@");
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      cyclicNumberAxis0.setLabelAngle(0.0F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'insets' argument.");
      extendedCategoryAxis0.setAxisLineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelURL("[+#g$fq&ge=L");
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setFixedDimension(500);
      assertEquals(500.0, categoryAxis0.getFixedDimension(), 0.01);
  }
}

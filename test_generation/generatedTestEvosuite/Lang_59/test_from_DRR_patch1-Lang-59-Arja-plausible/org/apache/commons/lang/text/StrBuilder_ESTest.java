/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:49:39 GMT 2021
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append(0.0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip(3925L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append(0.0);
      strBuilder0.hashCode();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = new StrBuilder("/#BXu8");
      strBuilder0.equalsIgnoreCase(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*ANk");
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      strBuilder0.lastIndexOf(strMatcher0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      strBuilder0.lastIndexOf("Mac");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((float) 0);
      strBuilder1.lastIndexOf(' ', 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      strBuilder0.indexOf(strMatcher0, 9);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nvalid offset: ");
      strBuilder0.indexOf("nvalid offset: ", 1129);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      strBuilder0.indexOf('B', 1584);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-102));
      strBuilder0.insert(0, '\u0000');
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      strBuilder0.contains((StrMatcher) strMatcher_TrimMatcher0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.midString(34, 1514);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      strBuilder0.midString(0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(17, 17, '&');
      strBuilder1.rightString(17);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      strBuilder0.rightString(0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.leftString(0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.name");
      strBuilder0.appendFixedWidthPadLeft(15, 9, '4');
      strBuilder0.endsWith("R wyCsOC'1ngDeQHo!");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendPadding(1492, 'i');
      strBuilder0.replaceFirst('A', ')');
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.replaceFirst(')', 'A');
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.replaceAll('@', 'e');
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append(338L);
      strBuilder0.deleteFirst('/');
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append(3.891283767941827);
      strBuilder1.deleteAll('8');
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-102));
      strBuilder0.appendFixedWidthPadRight((-848), 27, 'p');
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight((-1199), 0, '\'');
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      strBuilder0.appendFixedWidthPadLeft((-725), (-725), 'A');
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*ANk");
      strBuilder0.appendPadding(0, 'Z');
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendPadding(115, '|');
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(115, 'e');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 115
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendPadding(995, 'A');
      strBuilder0.validateIndex(44);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-102));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.ready();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.validateRange(0, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      strBuilder0.validateRange(12, 12);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append(0.0);
      strBuilder0.toStringBuffer();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(866);
      Integer integer0 = new Integer(2842);
      strBuilder0.appendFixedWidthPadLeft((Object) integer0, 1304, 'x');
      strBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.substring(0, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*ANk");
      strBuilder0.substring(0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.substring(0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      strBuilder0.setNewLineText("iyqSo,_!n)u");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      strBuilder0.replaceFirst(strMatcher0, "end < start");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      strBuilder0.replaceAll(strMatcher0, "startIndex must be valid");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('%');
      strBuilder0.replace((StrMatcher) strMatcher_CharMatcher0, "[.\"jj/d0~S=", 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      StrBuilder strBuilder1 = strBuilder0.insert(0, (long) 1957);
      strBuilder1.lastIndexOf("", 102);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" <Zh`xf}");
      strBuilder0.lastIndexOf("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendPadding(115, '|');
      strBuilder0.indexOf("", 9);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(4, 4, '9');
      strBuilder1.indexOf("");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[0];
      strBuilder0.getChars(charArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      strBuilder0.ensureCapacity((-1149));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.deleteFirst(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((float) 0);
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      strBuilder0.deleteAll(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      strBuilder0.deleteAll("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-435));
      strBuilder0.deleteAll('.');
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(");
      strBuilder0.charAt(0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      strBuilder0.charAt(0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendWithSeparators((Object[]) null, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((float) 0);
      strBuilder0.appendNull();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1543));
      Object object0 = new Object();
      strBuilder0.appendFixedWidthPadRight(object0, (-1543), 'd');
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      strBuilder0.append((char[]) null, 1060, 1060);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (-3544.891F));
      strBuilder0.append((StringBuffer) null, (-714), (-1199));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("y@OK!J2X2@Cl6");
      strBuilder0.clear();
      StringBuffer stringBuffer0 = new StringBuffer("");
      strBuilder0.append(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      strBuilder0.insert(0, (long) 1957);
      strBuilder0.append((String) null, (-3316), (-3316));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((Object) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nvalid offset: ");
      // Undeclared exception!
      try { 
        strBuilder0.validateRange((-1744), 3531);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1744
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(1577);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1577
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?eb+)JDqQXe");
      char[] charArray0 = new char[6];
      strBuilder0.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder0.reverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      // Undeclared exception!
      try { 
        strBuilder0.replace((-416), 1957, "HJ?{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -416
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(15);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(2279, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2279
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1652), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1652
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-22));
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(17, 17, '&');
      char[] charArray1 = strBuilder0.toCharArray();
      strBuilder0.append(charArray1);
      StrBuilder strBuilder2 = strBuilder0.replace(strMatcher0, "(VccpAZN]<Vvz", 32, 39, 32);
      strBuilder2.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder1.insert(32, "&31F<93");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(1766, (Object) strBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1766
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2367);
      // Undeclared exception!
      try { 
        strBuilder0.insert(2367, (-3072L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2367
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(989, 995, charArray0, 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[0];
      strBuilder0.insert(0, 0);
      strBuilder0.buffer = charArray0;
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      // Undeclared exception!
      try { 
        strBuilder0.deleteAll(strMatcher0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.name");
      strBuilder0.appendFixedWidthPadLeft(2505, 2505, 'J');
      strBuilder0.appendPadding(2505, 'J');
      strBuilder0.replaceAll("mwRGwi=7 Tv.=5h5Z;", "mwRGwi=7 Tv.=5h5Z;");
      // Undeclared exception!
      strBuilder0.deleteAll("java.awt.fonts");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.delete((-3995), (-3995));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3995
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((-809), 1, ')');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      strBuilder0.equals(strBuilder0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.name");
      strBuilder0.lastIndexOf((StrMatcher) null, 0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.lastIndexOf("", 1801);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.lastIndexOf('y', (-2471));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(";>+8RIs`HK8(D2hN3l");
      strBuilder0.indexOf(strMatcher0, (-1800));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      strBuilder0.insert(0, (-3544.891F));
      strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-1558));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      strBuilder0.indexOf("oPJMf.o%AM[Ox'ik~t", (-416));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      strBuilder0.indexOf("", (-416));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0);
      strBuilder0.indexOf("okh\"i-Q&Z", 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.indexOf("okh\"i-Q&Z", 0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (long) 0);
      strBuilder0.delete(0, 2555);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      strBuilder1.insert(1056, "java.vm.specification.name");
      strBuilder0.indexOf("oPJMf.o%AM[Ox'ik~t", (-416));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 44, '!');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      strBuilder0.appendFixedWidthPadRight((Object) "length", (-1314), 'f');
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft((Object) "{}", 18, 'v');
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft((Object) "java.ext.dirs", 0, ')');
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 1, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 44
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-102));
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 5, 1407);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1407
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.append("v8VH^)7", 31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(":-F7n$]#An", (-1), Integer.MAX_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append("7dI78m");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2165));
      strBuilder0.appendNull();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.ensureCapacity(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-102));
      strBuilder0.ensureCapacity(673);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Dn@aaWhI");
      strBuilder0.length();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      // Undeclared exception!
      try { 
        strBuilder0.replace(strMatcher0, "T-\u0006", (-1473), (-1049), (-1473));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1473
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nvalid offset: ");
      // Undeclared exception!
      try { 
        strBuilder0.substring(32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2384));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip((-2384));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      char[] charArray0 = new char[2];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.read(charArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderReader0.read(charArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(771, 1616, 'E');
      char[] charArray0 = new char[5];
      char[] charArray1 = strBuilder1.getChars(charArray0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray1, 1616, 44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      char[] charArray0 = new char[5];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1616, 44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[9];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, Integer.MAX_VALUE, (-34));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2384));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      strBuilder_StrBuilderReader0.read(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.read();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(66);
      strBuilder0.appendPadding(66, '[');
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.read();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.getContent();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*ANk");
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1390));
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray((-1323), 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1323
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append('/');
      strBuilder1.hashCode();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((float) 0);
      StrBuilder strBuilder1 = new StrBuilder("");
      strBuilder1.equals(strBuilder0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      strBuilder0.equals((Object) strBuilder0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder1.equals(strBuilder0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(194);
      StrBuilder strBuilder1 = new StrBuilder((-1));
      strBuilder0.equalsIgnoreCase(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.equalsIgnoreCase(strBuilder0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<e");
      StrBuilder strBuilder1 = new StrBuilder("");
      strBuilder0.equalsIgnoreCase(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      strBuilder0.lastIndexOf(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      strBuilder0.lastIndexOf(strMatcher0, 39);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, (-1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.name");
      strBuilder0.lastIndexOf("user.name", 486);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-102));
      StrBuilder strBuilder1 = strBuilder0.append(35.721170685);
      strBuilder1.lastIndexOf("<}$ci`a?2T-", 51);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((float) 0);
      strBuilder1.lastIndexOf("h,]l~!:Q=stgp)", 0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      strBuilder0.lastIndexOf((String) null, 1584);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nvalid offset: ");
      strBuilder0.lastIndexOf('v', 1834);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append(0.0);
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      strBuilder1.indexOf(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.indexOf((StrMatcher) null, 18);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-1558));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      strBuilder1.replaceAll("v", "eBRZL'bA;P[QBNm");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.indexOf((String) null, (-1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(771, 1616, 'E');
      strBuilder1.indexOf('E', 771);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (-3544.891F));
      strBuilder0.indexOf('\'', (-1558));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.indexOf('\'', (-1558));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      strBuilder0.insert(1557, charArray0);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('9');
      strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      strBuilder0.contains((StrMatcher) strMatcher_NoMatcher0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      strBuilder0.contains("");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      strBuilder0.contains("s5");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      strBuilder0.contains('c');
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      strBuilder0.contains('Q');
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1557, strBuilder0.capacity());
      assertEquals(1557, strBuilder0.size());
      assertEquals(1557, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1557, strBuilder1.capacity());
      assertEquals(1557, strBuilder1.size());
      assertEquals(1557, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder0.midString(117, 829);
      assertEqualsstring0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1557, strBuilder0.capacity());
      assertEquals(1557, strBuilder0.size());
      assertEquals(1557, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      String string0 = strBuilder0.midString((-1876), (-1876));
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = strBuilder0.midString(0, 1945);
      assertEquals("", string0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNotNull(strBuilder0);
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.rightString((-2893));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = strBuilder0.rightString(167);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.leftString(2);
      assertEquals("le", string0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = strBuilder0.leftString((-1390));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7iR j>,_4!");
      assertNotNull(strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.leftString(2664);
      assertEquals("7iR j>,_4!", string0);
      assertNotNull(string0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.endsWith("R wyCsOC'1ngDeQHo!");
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      boolean boolean0 = strBuilder0.endsWith("8&");
      assertFalse(boolean0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertFalse(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.name");
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      
      boolean boolean0 = strBuilder0.startsWith("os.arch");
      assertFalse(boolean0);
      assertEquals(9, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("G~Y0:q! ^?");
      assertNotNull(strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.startsWith("G~Y0:q! ^?");
      assertTrue(boolean0);
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(194);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(194, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.startsWith("^!U}xz-");
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(194, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-435));
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1), 1822, 'g');
      assertNotNull(strBuilder1);
      assertEquals(1846, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1846, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1846, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1846, strBuilder1.length());
      assertEquals(1846, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1846, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1846, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1822, strBuilder0.length());
      assertEquals(1822, strBuilder0.size());
      assertEquals(1822, strBuilder2.size());
      assertEquals(1822, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1846, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(1584, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.capacity());
      assertEquals(12, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(1584, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.reverse();
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nvalid offset: ");
      assertNotNull(strBuilder0);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("nvalid offset: ", "SU+F&H$_&zx");
      assertNotNull(strBuilder1);
      assertEquals(11, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "lGzan@E%wSh_");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7iR j>,_4!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("p*iV6C#", "F~IZOf:DfRYIQX~");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("C~kKk");
      assertNotNull(strBuilder0);
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("U) 'h;e%A+yof|Zu", (String) null);
      assertNotNull(strBuilder1);
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(37, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "Invalid offset: ");
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('A', ')');
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(51);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('.', '.');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(51, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertNotNull(strBuilder0);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('i', 'F');
      assertNotNull(strBuilder1);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertEquals(46, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('V', 'V');
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, "length must be valid");
      assertNotNull(strBuilder1);
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.length());
      assertEquals(52, strBuilder1.capacity());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("pf$%HIPCLm!0T_&O", "pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder1);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      assertNotNull(strBuilder0);
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("org.apache.commons.lang.ArrayUtils");
      assertNotNull(strBuilder1);
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder2 = strBuilder1.append(charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(strBuilder2);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.capacity());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertEquals(4, charArray0.length);
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.capacity());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, int0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.capacity());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1557, strBuilder0.length());
      assertEquals(1557, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1557, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1557, strBuilder1.length());
      assertEquals(1557, strBuilder1.capacity());
      assertEquals(1557, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst('J');
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1556, strBuilder0.length());
      assertEquals(1556, strBuilder0.size());
      assertEquals(1557, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1556, strBuilder1.size());
      assertEquals(1557, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1556, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1556, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1557, strBuilder2.capacity());
      assertEquals(1556, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append((long) (-1));
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('~');
      assertNotNull(strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('\'');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(995, 'A');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1011, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1011, strBuilder0.size());
      assertEquals(1011, strBuilder0.length());
      assertEquals(1011, strBuilder1.capacity());
      assertEquals(1011, strBuilder1.length());
      assertEquals(1011, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('A');
      assertNotNull(strBuilder2);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1011, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(1011, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(16, strBuilder2.size());
      assertEquals(1011, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(16, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(1584, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(5, charArray0.length);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(1584, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1584, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 1584, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 1584
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 97, '}');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(1584, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-2156), '{');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(1584, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(1584, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "US");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(134, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(134, strBuilder0.capacity());
      assertEquals(134, strBuilder0.length());
      assertEquals(4, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(3, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(134, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(134, strBuilder1.length());
      assertEquals(134, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.name");
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2776);
      assertEquals(2776, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "XtjulMME?W_QU!UJ*1");
      assertNotNull(strBuilder1);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(83, strBuilder0.capacity());
      assertEquals(83, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(83, strBuilder0.length());
      assertEquals(2, linkedList0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(83, strBuilder1.length());
      assertEquals(83, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(83, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(strBuilder0));
      assertEquals(0, linkedList0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "length must be valid");
      assertNotNull(strBuilder1);
      assertFalse(linkedList0.contains(strBuilder1));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, linkedList0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "1kP)TJ6]M<..1w");
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "startIndex must be valid");
      assertEquals(2, objectArray0.length);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(24, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(24, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("g}buU@xKWLy\"gjj``M");
      assertNotNull(strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertNotNull(strBuilder1);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(22, strBuilder1.size());
      assertEquals(22, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(false);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(29, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.length());
      assertEquals(56, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(29, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNotNull(strBuilder0);
      assertEquals(1584, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "CD");
      assertEquals(5, charArray0.length);
      assertNotNull(strBuilder1);
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(1584, strBuilder1.capacity());
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 1, (-1508));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1508
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 348);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 348
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1202), (-1202));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1202
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-416), 1557, 'J');
      strBuilder0.append(strBuilder1, 115, 99);
      assertEquals(1656, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-450), 1557, 'J');
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, 995, (-2682));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(12, strBuilder1.size());
      assertEquals(44, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-3), (-3));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      StrBuilder strBuilder1 = new StrBuilder((-1753));
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(48, strBuilder2.capacity());
      assertEquals(16, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?eb+)JDqQXe");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-724));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(9);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 9, 1740);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-3346), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 54, 32);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuffer stringBuffer0 = new StringBuffer("5.0");
      strBuilder0.append(stringBuffer0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("H70#xCiT#$}j[Ut");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", 0, (-1793));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.append("Invalid length: ", 9, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null, (-1), (-1392));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(975);
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 3178, 3178);
      assertEquals(975, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      assertEquals(1, strBuilder0.length());
      
      strBuilder0.deleteAll(strMatcher0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.getChars(39, 0, (char[]) null, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(39, 39, charArray0, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(3029, (-1390), charArray0, 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1390
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1044), (-1), (char[]) null, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1044
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 0, (char[]) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[6];
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, charArray1.length);
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(11, charArray0.length);
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(771, 1616, 'E');
      strBuilder1.deleteCharAt(116);
      assertEquals(1632, strBuilder0.capacity());
      assertEquals(1631, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(340);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 340
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7iR j>,_4!");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, '|');
      assertEquals(10, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(32, 'w');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2814), '0');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2814
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((float) 0);
      char char0 = strBuilder0.charAt(0);
      assertEquals(3, strBuilder0.size());
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-3930));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3930
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) strBuilder0);
      strBuilder1.minimizeCapacity();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      strBuilder0.appendFixedWidthPadRight((Object) "pf$%HIPCLm!0T_&O", (int) '2', '2');
      assertEquals(66, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-435));
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((float) 0);
      assertEquals(3, strBuilder0.size());
      
      strBuilder1.setLength(0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      strBuilder0.setLength(102);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid offset: ");
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nvalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.toCharArray(0, 636);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 636, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.name");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[2];
      Writer writer0 = strBuilder0.asWriter();
      writer0.write(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0.0\u0000");
      strBuilder_StrBuilderWriter0.append((CharSequence) charBuffer0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark((-1));
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      // Undeclared exception!
      try { 
        strBuilder0.insert(26, '(');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 26
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append(0.0);
      String string0 = strBuilder1.rightString(1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.insert(1561, (double) (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1561
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      // Undeclared exception!
      try { 
        strBuilder0.insert(98, (float) (-2711));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 98
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1079), (-1079));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1079
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      strBuilder0.getNullText();
      assertEquals(11, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asTokenizer();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      strBuilder0.asReader();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, "o8E|:Di");
      assertEquals(24, strBuilder0.length());
      assertEquals(56, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-22), 0, '|');
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(866);
      String string0 = strBuilder0.toString();
      assertEquals("", string0);
      assertEquals(866, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      int int0 = strBuilder0.lastIndexOf('P');
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.substring(12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Writer writer0 = strBuilder0.asWriter();
      writer0.write("");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.indexOf('~');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.size();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m|CJ;@;c^\"");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) null);
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("l~}=c");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("me)]V2oX");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, "@0bUU\"'*a4!i");
      assertEquals(40, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1390));
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("nvalid offset: ");
      assertEquals(15, strBuilder0.size());
      
      strBuilder0.trim();
      assertEquals(14, strBuilder0.size());
  }
}

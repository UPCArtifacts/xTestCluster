/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:54:50 GMT 2021
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Predicate;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ma)ZoUqV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ma)ZoUqV
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayLanguage();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Japanese");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      linkedList0.removeIf(predicate2);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode1);
      locale0.getDisplayName();
      locale0.stripExtensions();
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      Locale locale1 = Locale.CHINESE;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list4 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list3, locale_FilteringMode1);
      List<String> list5 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list4);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list5);
      locale0.getUnicodeLocaleKeys();
      LocaleUtils.countriesByLanguage("OA4Od:BK");
      LocaleUtils.countriesByLanguage("Japanese");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils.availableLocaleList();
      LocaleUtils.availableLocaleList();
      List list6 = LocaleUtils.countriesByLanguage("th");
      assertFalse(list6.equals((Object)list2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocaleUtils.countriesByLanguage((String) null);
      LocaleUtils.isAvailableLocale((Locale) null);
      LocaleUtils.toLocale((String) null);
      LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      LocaleUtils.toLocale((String) null);
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("JP");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocaleUtils.languagesByCountry("");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("]fBX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ]fBX
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("TfapakA(<");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ar");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("pt");
      LocaleUtils.availableLocaleSet();
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = new Locale("W", "c@lLyZ)\"a#", "4-iD@RuMA#k0!-S");
      Locale locale1 = Locale.CANADA;
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ut_%ssK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ut_%ssK
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("g~+.DU#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: g~+.DU#
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("d#-df(7w}s[/z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d#-df(7w}s[/z
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("}4Fs@x/n.##s(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: }4Fs@x/n.##s(
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("=F$[J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: =F$[J
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zh-CN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zh-CN
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("tz!(coFqOK@iAzuw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: tz!(coFqOK@iAzuw
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.countriesByLanguage("mi0J5=V0H?VE_ pQ");
      Locale locale0 = LocaleUtils.toLocale("pt");
      locale0.getDisplayName();
      LocaleUtils localeUtils1 = new LocaleUtils();
      List list1 = LocaleUtils.languagesByCountry("mi0J5=V0H?VE_ pQ");
      assertNotSame(list1, list0);
  }
}

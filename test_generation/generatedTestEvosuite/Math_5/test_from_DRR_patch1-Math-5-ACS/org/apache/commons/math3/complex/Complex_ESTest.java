/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:40:36 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.negate();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      // Undeclared exception!
      complex1.nthRoot(2146085614);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(1747.425045, 1747.425045);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1747.425045, complex0.getImaginary(), 0.01);
      assertEquals(1747.425045, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tanh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.3438240331106108E-153);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.3438240331106108E-153, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.3438240331106108E-153, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.3438240331106108E-153, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add((-2043.5288035851959));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-2043.5288035851959), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotNull(complex2);
      
      Complex complex3 = complex2.tan();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-2043.5288035851959), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertNotNull(complex3);
      
      Complex complex4 = complex3.sqrt();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-2043.5288035851959), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals((-0.7071067811865475), complex4.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertNotNull(complex4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.reciprocal();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sinh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.545539007875769E25, 1.545539007875769E25);
      assertEquals(1.545539007875769E25, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.545539007875769E25, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.multiply(1006);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.545539007875769E25, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.545539007875769E25, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5548122419230237E28, complex1.getImaginary(), 0.01);
      assertEquals(1.5548122419230237E28, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.multiply((-3636));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-3636.0), complex1.getReal(), 0.01);
      assertNotNull(complex1);
      
      complex1.hashCode();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-3636.0), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = Complex.valueOf(1434.7119, 1434.7119);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1434.7119, complex1.getReal(), 0.01);
      assertEquals(1434.7119, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.I.add(1434.7119);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1434.7119, complex2.getReal(), 0.01);
      assertNotNull(complex2);
      
      boolean boolean0 = complex1.equals(complex2);
      assertFalse(boolean0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1434.7119, complex1.getReal(), 0.01);
      assertEquals(1434.7119, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1434.7119, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1030897183911054E-8), (-1.1030897183911054E-8));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertEquals((-1.1030897183911054E-8), complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.I.add(1651.4887);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertEquals((-1.1030897183911054E-8), complex0.getImaginary(), 0.01);
      assertEquals(1651.4887, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertEquals((-1.1030897183911054E-8), complex0.getImaginary(), 0.01);
      assertEquals(1651.4887, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-479.354), (-1683.597));
      assertEquals((-1683.597), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-479.354), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.reciprocal();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-1683.597), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-479.354), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1.564328776514166E-4), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(5.494267775282819E-4, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(491.123, 491.123);
      assertFalse(complex0.isInfinite());
      assertEquals(491.123, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(491.123, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.reciprocal();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(491.123, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(491.123, complex0.getReal(), 0.01);
      assertEquals(0.0010180749018066757, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-0.0010180749018066757), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-3590.620430142), 2395.36823846621);
      assertEquals((-3590.620430142), complex0.getReal(), 0.01);
      assertEquals(2395.36823846621, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide(3557.0269);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-3590.620430142), complex0.getReal(), 0.01);
      assertEquals(2395.36823846621, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.6734186459107774, complex1.getImaginary(), 0.01);
      assertEquals((-1.009444272165049), complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(491.123, 491.123);
      assertFalse(complex0.isNaN());
      assertEquals(491.123, complex0.getReal(), 0.01);
      assertEquals(491.123, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.conjugate();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(491.123, complex0.getReal(), 0.01);
      assertEquals(491.123, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(491.123, complex1.getReal(), 0.01);
      assertEquals((-491.123), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.atan();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertEquals(491.123, complex0.getReal(), 0.01);
      assertEquals(491.123, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(491.123, complex1.getReal(), 0.01);
      assertEquals((-491.123), complex1.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals((-0.0010180741983319222), complex2.getImaginary(), 0.01);
      assertEquals(1.569778251189617, complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = Complex.I;
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.divide(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertNotNull(complex2);
      
      Complex complex3 = complex0.divide(complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1030897183911054E-8), Double.POSITIVE_INFINITY);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1030897183911054E-8), 1535.074566);
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tanh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals((-7.053972419612063E-8), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-2.3226580526513048), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = Complex.I;
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.I.subtract(complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.createComplex(0.0, (-944.916));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-944.916), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.subtract(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-944.916), complex1.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1683.597));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract((-1683.597));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-1.1030897183911054E-8), (-1.7198866036687559E90));
      assertEquals((-1.7198866036687559E90), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract(1535.9945412598522);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-1.7198866036687559E90), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1535.994541270883), complex1.getReal(), 0.01);
      assertEquals((-1.7198866036687559E90), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1091.32662250817));
      assertEquals((-1091.32662250817), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-1091.32662250817), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1091.3261643500946, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2415.010877743), (-443.44309559));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-2415.010877743), complex0.getReal(), 0.01);
      assertEquals((-443.44309559), complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.sqrt1z();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-2415.010877743), complex0.getReal(), 0.01);
      assertEquals((-443.44309559), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.log();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sqrt();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1683.597));
      assertFalse(complex0.isInfinite());
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sinh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sinh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.545539007875769E25, 1.545539007875769E25);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.545539007875769E25, complex0.getReal(), 0.01);
      assertEquals(1.545539007875769E25, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sinh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.545539007875769E25, complex0.getReal(), 0.01);
      assertEquals(1.545539007875769E25, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.3438240331106108E-153);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.3438240331106108E-153, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sin();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.3438240331106108E-153, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.3438240331106108E-153, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add((-2043.5288035851959));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sin();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(0.09065603331244382, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1.5384825694651276), complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sin();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.8414709848078965, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.acos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sin();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.414213562373095, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-6.123233995736765E-17), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = Complex.valueOf((-20.0));
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-20.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.pow(complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-20.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-0.04275503922651272), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.006280871949606081, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1683.597));
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.negate();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(1683.597, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.pow(complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(1683.597, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.801), (-478.801));
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.exp();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(3.299039266279239E-209, complex1.getReal(), 0.01);
      assertEquals((-1.097992523409303E-208), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.pow(5.5996586041611455E262);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(3.299039266279239E-209, complex1.getReal(), 0.01);
      assertEquals((-1.097992523409303E-208), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.I.pow(478.801);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.3075226976726249), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-0.9515407455364964), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1030897183911054E-8), 1535.074566);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.pow(1535.074566);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.multiply(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add((-2043.5288035851959));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2043.5288035851959), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
      
      Complex complex3 = complex2.sin();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-2043.5288035851959), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2043.5288035851959), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertTrue(complex3.isInfinite());
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.multiply((-1));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.multiply(0.0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.pow(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.20787957635076193, complex1.getReal(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.multiply((-75.56969842));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.20787957635076193, complex1.getReal(), 0.01);
      assertEquals((-15.709396892504442), complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-3590.620430142), 2395.36823846621);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-3590.620430142), complex0.getReal(), 0.01);
      assertEquals(2395.36823846621, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.multiply((-1496.331869));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-3590.620430142), complex0.getReal(), 0.01);
      assertEquals(2395.36823846621, complex0.getImaginary(), 0.01);
      assertEquals(5372759.779103963, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3584265.8332073824), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.801), (-478.801));
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ONE.log();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1683.597));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.sin();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotNull(complex1);
      
      boolean boolean0 = complex1.isNaN();
      assertTrue(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.createComplex(1482.5478112964618, 6.283185307179586);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1482.5478112964618, complex1.getReal(), 0.01);
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.exp();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1482.5478112964618, complex1.getReal(), 0.01);
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
      
      Complex complex3 = complex2.log();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1482.5478112964618, complex1.getReal(), 0.01);
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.7853981633974483), complex3.getImaginary(), 0.01);
      assertNotNull(complex3);
      
      boolean boolean0 = complex3.isInfinite();
      assertTrue(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1482.5478112964618, complex1.getReal(), 0.01);
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.7853981633974483), complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-988.42192236016), (-988.42192236016));
      assertEquals((-988.42192236016), complex0.getImaginary(), 0.01);
      assertEquals((-988.42192236016), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ONE.sqrt();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-988.42192236016), complex0.getImaginary(), 0.01);
      assertEquals((-988.42192236016), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      double double0 = complex1.getReal();
      assertEquals(1.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-988.42192236016), complex0.getImaginary(), 0.01);
      assertEquals((-988.42192236016), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3819.119709205));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-3819.119709205), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      double double0 = complex0.getReal();
      assertEquals((-3819.119709205), double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-3819.119709205), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cosh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(267.7467614837482, complex1.getReal(), 0.01);
      assertEquals((-6.55785854950756E-14), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      double double0 = complex1.getArgument();
      assertEquals((-2.449276515303664E-16), double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(267.7467614837482, complex1.getReal(), 0.01);
      assertEquals((-6.55785854950756E-14), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2651.319124), (-2043.5288035851959));
      assertEquals((-2043.5288035851959), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2651.319124), complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.exp();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-2043.5288035851959), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2651.319124), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.createComplex(249.48901168145875, 249.48901168145875);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(249.48901168145875, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(249.48901168145875, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.exp();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(249.48901168145875, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(249.48901168145875, complex1.getImaginary(), 0.01);
      assertEquals((-2.1675118856327917E108), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals((-5.942897492912702E107), complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.acos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.divide(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.4841829729864344, complex2.getImaginary(), 0.01);
      assertEquals((-0.2716749946478336), complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide((-942.26563209));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide((-3043.016070289875));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide((-1945.56292829382));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-5.139900567888388E-4), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.reciprocal();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-5.139900567888388E-4), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1945.5629282938198, complex2.getImaginary(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-504.805734825763), (-504.805734825763));
      assertFalse(complex0.isNaN());
      assertEquals((-504.805734825763), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-504.805734825763), complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ONE.createComplex(Double.NaN, 0.0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals((-504.805734825763), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-504.805734825763), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.createComplex((-1.4669965113042639E-8), (-1.4669965113042639E-8));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.4669965113042639E-8), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.4669965113042639E-8), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cosh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-61.455181831), (-61.455181831));
      assertFalse(complex0.isInfinite());
      assertEquals((-61.455181831), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-61.455181831), complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cosh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals((-61.455181831), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-61.455181831), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(4.720270486416578E25, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-2.4009402015441803E26), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1238.33813866326, 1238.33813866326);
      assertEquals(1238.33813866326, complex0.getReal(), 0.01);
      assertEquals(1238.33813866326, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract(436.5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1238.33813866326, complex0.getReal(), 0.01);
      assertEquals(1238.33813866326, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1238.33813866326, complex1.getImaginary(), 0.01);
      assertEquals(801.83813866326, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.cos();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(1238.33813866326, complex0.getReal(), 0.01);
      assertEquals(1238.33813866326, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1238.33813866326, complex1.getImaginary(), 0.01);
      assertEquals(801.83813866326, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertTrue(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2055.54464218865), (-2055.54464218865));
      assertEquals((-2055.54464218865), complex0.getReal(), 0.01);
      assertEquals((-2055.54464218865), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-2055.54464218865), complex0.getReal(), 0.01);
      assertEquals((-2055.54464218865), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-504.805734825763), (-504.805734825763));
      assertFalse(complex0.isInfinite());
      assertEquals((-504.805734825763), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-504.805734825763), complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.conjugate();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals((-504.805734825763), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-504.805734825763), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.I.conjugate();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      double double0 = complex1.getImaginary();
      assertEquals((-1.0), double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(892.728, 1706.0301288122237);
      assertEquals(892.728, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1706.0301288122237, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.atan();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(892.728, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1706.0301288122237, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-103.83345));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-0.1622952662989125), complex1.getReal(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.atan();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-0.1622952662989125), complex1.getReal(), 0.01);
      assertEquals((-5.551115123125783E-17), complex2.getImaginary(), 0.01);
      assertEquals((-0.16089243153682228), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.I.add(0.0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.asin();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.8813735870195428, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ONE.asin();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.801), (-478.801));
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.asin();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-7.211005833076721), complex1.getImaginary(), 0.01);
      assertEquals((-0.7853976181421236), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.801), (-478.801));
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals((-957.602), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-957.602), complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(2.0, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-103.83345));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.log();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.add((-679.925091));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2415.010877743), (-443.44309559));
      assertEquals((-443.44309559), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2415.010877743), complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add((-1528.49306254));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-443.44309559), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2415.010877743), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3943.503940283), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-443.44309559), complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1.1030897183911054E-8), (-1.7198866036687559E90));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertEquals((-1.7198866036687559E90), complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.acos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertEquals((-1.7198866036687559E90), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1030897183911054E-8), 1535.074566);
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.3438240331106108E-153);
      assertEquals(1.3438240331106108E-153, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.801), (-478.801));
      assertFalse(complex0.isInfinite());
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertEquals((-478.801), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals((-24.040880473453964), complex1.getImaginary(), 0.01);
      assertEquals(9.958058743495148, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.NaN.sqrt();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.NaN.exp();
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.subtract(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1535.074566, 1535.074566);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1535.074566, complex0.getReal(), 0.01);
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = Complex.NaN;
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.ZERO.subtract(complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1535.074566, complex0.getReal(), 0.01);
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-103.83345));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.log();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.multiply((-103.83345));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.reciprocal();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-103.83345));
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.createComplex(1048.5783321359484, (-103.83345));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1048.5783321359484, complex1.getReal(), 0.01);
      assertEquals((-103.83345), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex1.cosh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1048.5783321359484, complex1.getReal(), 0.01);
      assertEquals((-103.83345), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
      
      Complex complex3 = complex2.multiply(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1048.5783321359484, complex1.getReal(), 0.01);
      assertEquals((-103.83345), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.NaN.log();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.multiply(complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(6.283185307179586, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(6.283185307179586, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.createComplex(1482.5478112964618, 6.283185307179586);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
      assertEquals(1482.5478112964618, complex1.getReal(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.exp();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
      assertEquals(1482.5478112964618, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotNull(complex2);
      
      Complex complex3 = complex2.divide(complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
      assertEquals(1482.5478112964618, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.divide(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.INF.divide(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = Complex.NaN;
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.add(complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.I.add(complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
      
      double double0 = complex1.abs();
      assertEquals(1.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-2122.66211));
      assertFalse(complex0.isInfinite());
      assertEquals((-2122.66211), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      double double0 = complex0.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2122.66211), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.reciprocal();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertNotNull(complex1);
      
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.ZERO.sqrt();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-1049.9), Double.NaN);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals((-1049.9), complex0.getReal(), 0.01);
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      double double0 = complex0.getReal();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotNull(complex0);
      
      double double0 = complex0.getImaginary();
      assertEquals(1.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5704.280376158168, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-5032.326052415138));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(1552);
      assertTrue(list0.contains(complex0));
      assertEquals(1552, list0.size());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1332);
      assertEquals(1, list0.size());
      assertTrue(complex0.isInfinite());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.nthRoot((-2139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,139
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex((-2048.555440544503));
      Complex complex1 = complex0.tanh();
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2048.555440544503), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-103.83345));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tanh();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex((-3590.620430142), 2395.36823846621);
      Complex complex1 = new Complex(1157.52266879335, 478.801);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tanh();
      assertTrue(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.557407724654902, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tanh();
      assertNotSame(complex3, complex2);
      assertFalse(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex((-103.35316401849559));
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.3307164906472731, complex1.getReal(), 0.01);
      assertEquals((-103.35316401849559), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1030897183911054E-8), 1535.074566);
      Complex complex1 = complex0.tan();
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.1030897183911054E-8), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1535.074566, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex((-2122.66211));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
      assertEquals((-2122.66211), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.subtract(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(6639.286582351);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      assertFalse(complex1.isInfinite());
      assertTrue(complex0.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = new Complex(8.765347592998296E-5, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(0.527290940284729);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(8.765347592998296E-5, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NaN);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(982);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.multiply((-1683.597));
      assertTrue(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex((-24.173095962704053), (-24.173095962704053));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-24.173095962704053), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
      assertEquals((-24.173095962704053), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = new Complex(8.765347592998296E-5, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      complex1.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(8.765347592998296E-5, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.801), (-478.801));
      Complex complex1 = new Complex((-478.801));
      boolean boolean0 = complex0.equals(complex1);
      assertEquals((-478.801), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals((-478.801), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-478.801), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = new Complex((-103.35316401849559));
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-103.35316401849559), complex0.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = new Complex((-1.5821896727910552E-8), (-1.5821896727910552E-8));
      boolean boolean0 = complex0.equals(" s-/LKn0Y\"+VW&Ac\"\"");
      assertEquals((-1.5821896727910552E-8), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.5821896727910552E-8), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = new Complex((-2048.555440544503));
      Complex complex1 = complex0.reciprocal();
      assertEquals((-2048.555440544503), complex0.getReal(), 0.01);
      assertEquals((-4.8814885856064574E-4), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = new Complex(8.765347592998296E-5, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.reciprocal();
      assertTrue(complex2.isNaN());
      assertNotSame(complex2, complex1);
      assertEquals(8.765347592998296E-5, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(boolean0);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex((-103.83345));
      Complex complex1 = complex0.divide(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-103.83345), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-3043.0));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1683.597));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex2.isNaN());
      assertEquals((-1683.597), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.divide(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.conjugate();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1683.597));
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1683.597), complex0.getReal(), 0.01);
      assertEquals((-1683.597), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = new Complex((-1455.3149), 0.6032907962799072);
      Complex complex1 = complex0.add(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6032907962799072, complex0.getImaginary(), 0.01);
      assertEquals((-1455.3149), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = new Complex((-3590.620430142), 2395.36823846621);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.add(complex1);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(complex0);
      Complex complex2 = complex1.sinh();
      assertNotSame(complex2, complex1);
      assertTrue(complex2.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex(8.765347592998296E-5, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(2.483811732227808E-8);
      assertTrue(complex2.isNaN());
      assertNotSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(8.765347592998296E-5, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.atan();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      List<Complex> list0 = complex0.nthRoot(1018);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = new Complex((-103.83345));
      boolean boolean0 = complex0.isNaN();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals((-103.83345), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      assertEquals("(0.0, 1.0)", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:19:59 GMT 2021
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import java.io.PrintStream;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(44, 27, token_CommentType0, "msg.undef.prop.read");
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(44, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertFalse(comment0.isParsed());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals(27, comment0.getLength());
      assertNotNull(comment0);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("msg.undef.prop.read"));
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@Z)zpYABl!", 1, 4);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      assertFalse(set0.contains("@Z)zpYABl!"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, (PrintStream) null);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      toolErrorReporter0.setIsReportingWarnings(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "9y>{aB(", config0, toolErrorReporter0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(44, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertFalse(comment0.isParsed());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals(27, comment0.getLength());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertFalse(set0.contains("@Z)zpYABl!"));
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(44, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertFalse(comment0.isParsed());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals(27, comment0.getLength());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertFalse(set0.contains("@Z)zpYABl!"));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!X}", 1, 2);
      assertNotNull(jsDocTokenStream0);
      
      jsDocTokenStream0.sourceCursor = 26;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      assertFalse(set0.contains("!X}"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, (PrintStream) null);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "K<Rk", config0, toolErrorReporter0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("K<Rk"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(0, 0, token_CommentType0, "");
      assertFalse(comment0.isParsed());
      assertEquals(0, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals("", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNotNull(comment0);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "", (Config) null, (ErrorReporter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("!");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[Rg$S'JSAq5b *o]i(");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;");
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(301, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, node0.getSourcePosition());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("wCfE#i4V|V,=4GJTs|");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertNotNull(node0);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("null");
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("*'c^L\"0}@");
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasOneChild());
      assertEquals(302, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertNotNull(node0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("v!>T@");
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(306, node0.getType());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("9?.n");
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(304, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertEquals(1, node0.getCharno());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("?n41Oio{J3/k~w");
      assertEquals(7, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(7, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(304, node0.getType());
      assertNotNull(node0);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(19, 19, token_CommentType0, "[p{wNWxX]lLDt");
      assertEquals(19, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals("[p{wNWxX]lLDt", comment0.getValue());
      assertEquals(19, comment0.getAbsolutePosition());
      assertEquals(19, comment0.getPosition());
      assertFalse(comment0.isParsed());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNotNull(comment0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("[p{wNWxX]lLDt"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      assertFalse(set0.contains("[p{wNWxX]lLDt"));
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*'c^L\"0}@", (-318));
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "J#HDWj^_Q", config0, toolErrorReporter0);
      assertEquals(19, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals("[p{wNWxX]lLDt", comment0.getValue());
      assertEquals(19, comment0.getAbsolutePosition());
      assertEquals(19, comment0.getPosition());
      assertFalse(comment0.isParsed());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(set0.contains("[p{wNWxX]lLDt"));
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(19, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals("[p{wNWxX]lLDt", comment0.getValue());
      assertEquals(19, comment0.getAbsolutePosition());
      assertEquals(19, comment0.getPosition());
      assertFalse(comment0.isParsed());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(set0.contains("[p{wNWxX]lLDt"));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1215, (-285), token_CommentType0, "msg.undef.prop.read");
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-285), comment0.getLength());
      assertFalse(comment0.isParsed());
      assertFalse(comment0.hasChildren());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(1215, comment0.getPosition());
      assertEquals(1215, comment0.getAbsolutePosition());
      assertNotNull(comment0);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("msg.undef.prop.read"));
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@Z)zpYABl!", 1, 16);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      assertFalse(set0.contains("@Z)zpYABl!"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, (PrintStream) null);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "@Z)zpYABl!", config0, toolErrorReporter0);
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-285), comment0.getLength());
      assertFalse(comment0.isParsed());
      assertFalse(comment0.hasChildren());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(1215, comment0.getPosition());
      assertEquals(1215, comment0.getAbsolutePosition());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertFalse(set0.contains("@Z)zpYABl!"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?n41Oio{J3/k~w", 2);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("?n41Oio{J3/k~w"));
      
      Context context0 = new Context();
      assertFalse(context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertNotNull(errorReporter0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "?n41Oio{J3/k~w", config0, errorReporter0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertNotNull(jsDocInfoParser0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(linkedHashSet0.contains("?n41Oio{J3/k~w"));
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(linkedHashSet0.contains("?n41Oio{J3/k~w"));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(dN/'@YA0ts10K\u001Fn2", 7, (-1883328464));
      assertNotNull(jsDocTokenStream0);
      
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      assertFalse(set0.contains("(dN/'@YA0ts10K\u001Fn2"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, (PrintStream) null);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "9y>{aB(", config0, toolErrorReporter0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("(dN/'@YA0ts10K\u001Fn2"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(44, 27, token_CommentType0, "msg.undef.prop.read");
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(27, comment0.getLength());
      assertFalse(comment0.isParsed());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(44, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertNotNull(comment0);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[Rg$S'JSAq5b *o]i(", 2);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "u", config0, toolErrorReporter0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(27, comment0.getLength());
      assertFalse(comment0.isParsed());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(44, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertFalse(linkedHashSet0.contains("[Rg$S'JSAq5b *o]i("));
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(27, comment0.getLength());
      assertFalse(comment0.isParsed());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(44, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertFalse(linkedHashSet0.contains("[Rg$S'JSAq5b *o]i("));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(44, 27, token_CommentType0, "msg.undef.prop.read");
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals(44, comment0.getPosition());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(27, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.isParsed());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertNotNull(comment0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(">*o[3", 21);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "%FEHGR`:mb3y", config0, toolErrorReporter0);
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals(44, comment0.getPosition());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(27, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.isParsed());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertFalse(linkedHashSet0.contains("%FEHGR`:mb3y"));
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals(44, comment0.getPosition());
      assertEquals(44, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(27, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.isParsed());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertFalse(linkedHashSet0.contains("%FEHGR`:mb3y"));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-904), 190, token_CommentType0, "%+Na");
      assertEquals(161, comment0.getType());
      assertEquals((-904), comment0.getAbsolutePosition());
      assertEquals("%+Na", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-904), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(190, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertFalse(comment0.isParsed());
      assertNotNull(comment0);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("%+Na"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("%+Na"));
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",", 0, 22);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "", config0, (ErrorReporter) null);
      assertEquals(161, comment0.getType());
      assertEquals((-904), comment0.getAbsolutePosition());
      assertEquals("%+Na", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-904), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(190, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertFalse(comment0.isParsed());
      assertNotNull(jsDocInfoParser0);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertFalse(treeSet0.contains("%+Na"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!X}", 7, (-1883328464));
      assertNotNull(jsDocTokenStream0);
      
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      assertFalse(set0.contains("!X}"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, (PrintStream) null);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "9y>{aB(", config0, toolErrorReporter0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("!X}"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*'c^L\"0}@", 4);
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "*'c^L\"0}@", config0, errorCollector0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("*'c^L\"0}@"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1215, (-285), token_CommentType0, "msg.undef.prop.read");
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(1215, comment0.getPosition());
      assertFalse(comment0.isParsed());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-285), comment0.getLength());
      assertEquals(1215, comment0.getAbsolutePosition());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertNotNull(comment0);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("msg.undef.prop.read"));
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@Z)zpYABl!", 1, 16);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      assertFalse(set0.contains("msg.undef.prop.read"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, (PrintStream) null);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "@Z)zpYABl!", config0, toolErrorReporter0);
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(1215, comment0.getPosition());
      assertFalse(comment0.isParsed());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-285), comment0.getLength());
      assertEquals(1215, comment0.getAbsolutePosition());
      assertEquals("msg.undef.prop.read", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertFalse(set0.contains("@Z)zpYABl!"));
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("%2O/F4RMF>cXE=rfL", 190);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-904), 190, token_CommentType0, "%+Na");
      assertNull(comment0.getJsDoc());
      assertEquals("%+Na", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals((-904), comment0.getAbsolutePosition());
      assertEquals((-904), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(190, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNotNull(comment0);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("%+Na"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("%+Na"));
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "", config0, (ErrorReporter) null);
      assertNull(comment0.getJsDoc());
      assertEquals("%+Na", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals((-904), comment0.getAbsolutePosition());
      assertEquals((-904), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(190, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNotNull(jsDocInfoParser0);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertFalse(treeSet0.contains("%+Na"));
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(comment0.getJsDoc());
      assertEquals("%+Na", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals((-904), comment0.getAbsolutePosition());
      assertEquals((-904), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(190, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(jSDocInfo0);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertFalse(treeSet0.contains("%+Na"));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("(w5Pe31FF NBG1}t");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("TRIM", 16, 2);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2, 2, token_CommentType0, "Lf;P{{[Q6Xq'R");
      assertEquals(0, comment0.depth());
      assertEquals("Lf;P{{[Q6Xq'R", comment0.getValue());
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getAbsolutePosition());
      assertFalse(comment0.isParsed());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertNotNull(comment0);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("Lf;P{{[Q6Xq'R"));
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNotNull(jSDocInfo0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(treeSet0.contains("Lf;P{{[Q6Xq'R"));
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "Lf;P{{[Q6Xq'R", config0, errorCollector0);
      assertEquals(0, comment0.depth());
      assertEquals("Lf;P{{[Q6Xq'R", comment0.getValue());
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getAbsolutePosition());
      assertFalse(comment0.isParsed());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertNotNull(jsDocInfoParser0);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertFalse(treeSet0.contains("Lf;P{{[Q6Xq'R"));
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(0, comment0.depth());
      assertEquals("Lf;P{{[Q6Xq'R", comment0.getValue());
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getAbsolutePosition());
      assertFalse(comment0.isParsed());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertFalse(treeSet0.contains("Lf;P{{[Q6Xq'R"));
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals(0, comment0.depth());
      assertEquals("Lf;P{{[Q6Xq'R", comment0.getValue());
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getAbsolutePosition());
      assertFalse(comment0.isParsed());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertFalse(jSDocInfo1.isDefine());
      assertNull(jSDocInfo1.getVersion());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertNull(jSDocInfo1.getLicense());
      assertNull(jSDocInfo1.getReturnDescription());
      assertNull(jSDocInfo1.getMeaning());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.isOverride());
      assertNull(jSDocInfo1.getSourceName());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertFalse(jSDocInfo1.isExterns());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertNull(jSDocInfo1.getLendsName());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isDeprecated());
      assertFalse(jSDocInfo1.isNoShadow());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertFalse(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.hasModifies());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(jSDocInfo1.isConstructor());
      assertFalse(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.hasThisType());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isNoCompile());
      assertFalse(jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getTemplateTypeName());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertNull(jSDocInfo1.getVisibility());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.hasBaseType());
      assertFalse(jSDocInfo1.hasReturnType());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertNotNull(jSDocInfo1);
      assertSame(jSDocInfo1, jSDocInfo0);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertFalse(treeSet0.contains("Lf;P{{[Q6Xq'R"));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("D|N?2}\u0006{+#eZZBJ.|h", 0);
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("D|N?2}\u0006{+#eZZBJ.|h"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("D|N?2}\u0006{+#eZZBJ.|h"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "8", config0, toolErrorReporter0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      assertFalse(linkedHashSet0.contains("8"));
      
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node(0);
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      
      com.google.javascript.rhino.Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(18, com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);
      assertEquals(21, com.google.javascript.rhino.Node.LOCALCOUNT_PROP);
      assertEquals(10, com.google.javascript.rhino.Node.VARS_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.DESCENDANTS_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals((-3), com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.Node.CASES_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(0, com.google.javascript.rhino.Node.LABEL_ID_PROP);
      assertEquals(41, com.google.javascript.rhino.Node.BRACELESS_TYPE);
      assertEquals(8, com.google.javascript.rhino.Node.CODEOFFSET_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(2, com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, com.google.javascript.rhino.Node.TARGETBLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.Node.TEMP_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, com.google.javascript.rhino.Node.USES_PROP);
      assertEquals(19, com.google.javascript.rhino.Node.LABEL_PROP);
      assertEquals(33, com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(44, com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(34, com.google.javascript.rhino.Node.NAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.Node.FUNCTION_PROP);
      assertEquals(7, com.google.javascript.rhino.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals((-1), com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);
      assertEquals(14, com.google.javascript.rhino.Node.DEFAULT_PROP);
      assertEquals(28, com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.CASEARRAY_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.Node.DIRECTCALL_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(24, com.google.javascript.rhino.Node.LASTUSE_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, com.google.javascript.rhino.Node.FINALLY_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.ENUM_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(17, com.google.javascript.rhino.Node.TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.Node.CONTINUE_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.TARGET_PROP);
      assertEquals(27, com.google.javascript.rhino.Node.SPECIALCALL_PROP);
      assertEquals(35, com.google.javascript.rhino.Node.PARENTHESIZED_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.BREAK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.NON_SPECIALCALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(16, com.google.javascript.rhino.Node.SOURCENAME_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.LEFT);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(2, com.google.javascript.rhino.Node.SPECIALCALL_WITH);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(25, com.google.javascript.rhino.Node.ISNUMBER_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(23, com.google.javascript.rhino.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.Node.FIXUPS_PROP);
      assertEquals(45, com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, com.google.javascript.rhino.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.RIGHT);
      assertEquals((-2), com.google.javascript.rhino.Node.OBJECT_IDS_PROP);
      assertFalse(linkedHashSet0.contains("8"));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.undef.prop.read");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, "msg.undef.prop.read", config0, toolErrorReporter0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNull(jSDocInfo0);
      assertFalse(linkedHashSet0.contains("msg.undef.prop.read"));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("&|bZ7Jc 0");
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(2, node0.getCharno());
      assertEquals(301, node0.getType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("TRIM", 16, 2);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2, 2, token_CommentType0, "Lf;P{{[Q6Xq'R");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, "Lf;P{{[Q6Xq'R", config0, errorCollector0);
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("function");
      assertNull(node0);
  }
}

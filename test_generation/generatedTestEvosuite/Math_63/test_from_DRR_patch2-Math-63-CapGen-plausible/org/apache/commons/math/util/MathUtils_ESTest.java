/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:22:33 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 3.8128763008339;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 3.813)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.058823529411764705;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.059 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-88083433);
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) (-2147483648L);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-61);
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)100;
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.pow((BigInteger) null, 0L);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-453.412331668);
      MathUtils.normalizeArray(doubleArray0, (-2526.0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.scalb((-1.0), 2716);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.mulAndCheck(725L, 725L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.lcm(69L, 479001600L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.lcm((-1L), 69L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.indicator((long) 1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.indicator(2878);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1684.7627904426436), (-1684.7627904426436), Integer.MAX_VALUE);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2081.6403, 3045.73909, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.equals(0.0, (-1.9841269659586505E-4), 2.17333333333333325E18);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.equals(0.5, 72.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(508494437, (-775));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.addAndCheck((long) (short)10, 1043456L);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.subAndCheck((-666L), (-2147483648L));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.subAndCheck((-1424L), (-1L));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.subAndCheck((-566), (-566));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.subAndCheck(4, 1045494);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.sinh(104);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.scalb(6.283185307179586, 1275);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.round((float) (-2127300699), 8, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.round(0.0F, 7958);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.round(0.058823529411764705, 204, 1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.round(6.283185307179586, (-837));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 6402373705728000L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) 11);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 11);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.pow(0L, 113236205062349959L);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.pow(104, 104);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.pow(13, 14);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.normalizeAngle((short)13, 0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.normalizeAngle((-0.8101469078493473), (-0.8101469078493473));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.mulAndCheck((-513), (-2038));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.log((short)10, (short)1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathUtils.log(5.0, 14);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 124;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.hash((double) 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.hash((double) (byte)1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1045494;
      double[] doubleArray1 = new double[6];
      MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[8];
      MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.addAndCheck((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.addAndCheck((-757L), 0L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.addAndCheck((-2386), (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1571.8187219315, (-2035), 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(4194304);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(109, 113);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 109, k = 113
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathUtils.mulAndCheck((long) (-2385), 109L);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MathUtils.mulAndCheck(72L, (-923L));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1093658635, 2045);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MathUtils.mulAndCheck(52, (-3655));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathUtils.indicator(1931.9661F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.gcd(549715968, 120);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathUtils.gcd(9, 9);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.factorialLog(2770);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathUtils.factorial(16);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MathUtils.equals((double) 0.0F, (double) (byte)105, (int) (byte)105);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(3.834E-20, 3.834E-20, (-2626));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathUtils.equals((-765.44590518012), Double.NaN, 120);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(3465.8036013492633, (double) (byte)1, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.equals(0.058823529411764705, 0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2660.3349218;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,781.819)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 104;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1,781.819 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2508.0);
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(511L);
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-36,893,488,147,419,103,232^-36,893,488,147,419,103,232)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-833L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-833)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(511L);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3480L);
      BigInteger bigInteger2 = BigInteger.ZERO;
      // Undeclared exception!
      MathUtils.pow(bigInteger2, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-694)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 1806);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.pow((-1353L), 1454L);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        MathUtils.pow(7174L, (-444L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (7,174^-444)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.pow((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathUtils.pow((long) 493, 2771);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        MathUtils.pow(2147483648L, (-3069));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,147,483,648^-3,069)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.pow(0, 1490668L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathUtils.pow(77, 2047L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        MathUtils.pow(2878, (long) (-2757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,878^-2,757)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathUtils.pow(9, (long) 0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathUtils.pow((-3256), 6);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        MathUtils.pow(2147479552, (-4418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,147,479,552^-4,418)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathUtils.subAndCheck(0, (-107));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathUtils.sign((short) (byte)100);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathUtils.sign((short) (-1160));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MathUtils.sign((-784L));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathUtils.sign(2156L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathUtils.sign((-2038));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathUtils.sign(15);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathUtils.sign(2500.628F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathUtils.sign(0.19999954120254515);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathUtils.sign((double) (-1423L));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.sign((byte) (-23));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.sign((byte)100);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.round(2166.3562F, 1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) 3, 4, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 8, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.round(1.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1275;
      MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-1161.2145611150834));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathUtils.scalb(0.167, (byte)1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 18, 4577762542105553359L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.mulAndCheck((long) 0, 255L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), 7910884519577875640L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.mulAndCheck((-9223372036854775808L), 0L);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1706, 2146435072);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathUtils.lcm((long) (short)10, (-1L));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.lcm((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.indicator((short)10);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.indicator((-1423L));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathUtils.indicator((-513));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathUtils.indicator((-3653.79F));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathUtils.indicator((double) (-1423L));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.indicator(1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathUtils.indicator((byte)16);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathUtils.indicator((byte) (-94));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathUtils.gcd((-2586L), (-1L));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathUtils.gcd(24L, 4499201580859392L);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathUtils.gcd(0L, (long) (short)13);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.gcd((-322), (-1099));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathUtils.gcd(160, 0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathUtils.lcm(20, 4);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathUtils.gcd(0, (-1073741823));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathUtils.factorialDouble(180);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,428
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1693);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,431,655,764
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathUtils.factorialDouble(11);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[6];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 0, (double) 0, 28);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-2089.271286889), (double) (-1424L), 2864);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.equals((double) 1, (-1251.4293521835168), (double) 1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, 1.4456468917292502E-16, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathUtils.equalsIncludingNaN(72.0, 4060.3312518252, 1.0E-6);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathUtils.equals((double) 0, 0.058823529411764705, 0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathUtils.equals(0.058823529411764705, 0.058823529411764705, 0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathUtils.equalsIncludingNaN(Double.NaN, 161.88266912455);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathUtils.equalsIncludingNaN(19191.571469649498, 566.0, 19191.571469649498);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathUtils.equals((double) 2156L, (double) 15);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathUtils.compareTo((-1.7168146928204135), 5648769086999809661L, (-5648769086999809661L));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, Float.NaN, 1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 91
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MathUtils.binomialCoefficientLog(2771, 2771);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MathUtils.binomialCoefficientLog(85, 63);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(2145780647, 0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(189, 3);
      assertEquals(1107414.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(160, (-1));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(8, (-2147483518));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4194304, 4194304);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(781L, 781L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3979, 3979);
      assertEquals(7958, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double double0 = MathUtils.round(2.145386515E9, (int) (short)2432);
      assertEquals(2.145386515E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MathUtils.sinh((-735.82354715));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = MathUtils.hash(1.4456468917292502E-16);
      assertEquals((-568994748), int0);
  }
}

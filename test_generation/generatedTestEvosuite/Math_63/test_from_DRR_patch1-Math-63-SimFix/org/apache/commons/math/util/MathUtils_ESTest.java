/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:25:23 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 3.834E-20;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(3.834E-20, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1431.72263;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1431.72263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.8943738585576;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 1,781.894)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 18;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {18, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1789569705;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.789569705E9, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-566);
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-566)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1008.584223);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-61);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-61.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-566);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-566)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.pow((long) 2147483646, (long) 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.pow((long) 0, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.sinh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 734.59493626;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 734.59493626);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {734.59493626, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {734.5949362600002, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 231, 4607182418800017408L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(4060);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1), 17.0, (short)1316);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4731L, (-33554431L));
      assertEquals(33559162L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-566), (-566));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, (-654));
      assertEquals(654, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.sinh(0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.sinh(2997.6);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.scalb(3394.7013, (-4808));
      assertEquals(1.5755952176565468E-211, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 7958);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 13);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.round(3091.72, 838);
      assertEquals(3091.72, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 15);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-126);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short) (-32256), bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte) (-126), (byte)0}, byteArray1);
      assertNotNull(bigInteger1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short) (-32256), bigInteger1.shortValue());
      assertEquals((byte)9, bigInteger2.byteValue());
      assertEquals((short) (-247), bigInteger2.shortValue());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte) (-126), (byte)0}, byteArray1);
      assertNotNull(bigInteger2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      BigInteger bigInteger3 = MathUtils.pow(bigInteger2, (int) (byte)55);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short) (-32256), bigInteger1.shortValue());
      assertEquals((byte)9, bigInteger2.byteValue());
      assertEquals((short) (-247), bigInteger2.shortValue());
      assertEquals((short) (-27655), bigInteger3.shortValue());
      assertEquals((byte) (-7), bigInteger3.byteValue());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte) (-126), (byte)0}, byteArray1);
      assertNotNull(bigInteger3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.pow((-1353L), 1454L);
      assertEquals(8531128896131581361L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = MathUtils.pow((-3495L), 54L);
      assertEquals((-5239926504833065391L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.pow((long) 2147483646, 2147483646);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.pow((-1L), 4194269);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.pow((int) (byte)16, (long) 1099);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.pow(13, 7910884519577875640L);
      assertEquals((-287918367), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.pow(180, 180);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.pow(13, 14);
      assertEquals((-523170343), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(498.079270585, 498.079270585);
      assertEquals(498.079270585, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1217.7962815092, 0L);
      assertEquals((-1.1416680836396154), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-513), (-2038));
      assertEquals(1045494, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.log((short)10, (short)1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.log(3986.1409, 1436.8537698);
      assertEquals(0.8769244286412781, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4256.395463;
      doubleArray0[2] = 3091.72;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(2066468046, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {4256.395463, 0.0, 3091.72}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-2038056289), int0);
      assertEquals(21, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.hash((double) 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.hash(1651.488724);
      assertEquals(881442529, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathUtils.distance1(doubleArray1, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-757L), 0L);
      assertEquals((-757L), long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, (-2038));
      assertEquals((-2038), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.375, (-911), 1139);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(1062783533);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1674), (-2622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,674
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4658214041444863777L, 4658214041444863777L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1L, (long) 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2147483648L), (long) (short)1316);
      assertEquals((-2826088480768L), long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2082408385, 2147481536);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(7958, (-1668));
      assertEquals((-13273944), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = MathUtils.indicator((-3653.79F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = MathUtils.indicator(1223.2806F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.gcd(18, 18);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.gcd(2147481584, (-1099));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.factorial(16);
      assertEquals(20922789888000L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2300.17704, (-218.0), 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((-376.1009135958197), 1718.3151, (-1733));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) (-218), (double) 1, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 0, 1.494140625, 1.494140625);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(389.0420392832, (double) (-689), (-2237.6737828));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-453.412331668), (-453.412331668));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,781.819)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1431.7226304;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4256.395463;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (4,256.395 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 64;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (64 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 6402373705728000L);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        MathUtils.pow((BigInteger) null, (-2511L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-2,511)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      try { 
        MathUtils.pow(bigInteger0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-694)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1806);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        MathUtils.pow((-127L), (long) (-513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-127^-513)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.pow((-1762L), 4577762542105553359L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        MathUtils.pow((-34106988767L), (-904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-34,106,988,767^-904)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        MathUtils.pow((-1215), (-3867L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,215^-3,867)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        MathUtils.pow((-2713), (-2713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,713^-2,713)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.pow(1333, 1333);
      assertEquals(508494437, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1739, 3186);
      assertEquals((-1447), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-25));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = MathUtils.sign((short)1316);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.sign((-1497L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.sign((long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.sign(2156L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.sign((-1789569705));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.sign(2478);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = MathUtils.sign((float) (short)1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = MathUtils.sign((-237.34604F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.sign(418.6);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.sign((-1161.560494615069));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-35));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) 13, 13, (-2146339542));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,146,339,542, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1497L));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1497.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathUtils.normalizeArray(doubleArray0, Float.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1497L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.scalb(2300.17704, (-1449));
      assertEquals((-4.772310219331299E183), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.scalb(0, 61);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 4658918838933389312L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4625478292286210048L, (-4574959444220840005L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-9223372036854775808L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-322L), (-131071L));
      assertEquals(42204862L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) (-1563746761), (-302932621132653753L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(61, (-1789569705));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.lcm(4001L, (-1728L));
      assertEquals(6913728L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.lcm(191L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 18, 4577762542105553359L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.lcm(1, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2432);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-771));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.indicator((long) 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = MathUtils.indicator((long) (-1025));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = MathUtils.indicator(2878);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = MathUtils.indicator((-1025));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 2147483646, (int) (short)0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = MathUtils.indicator((double) (-1));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathUtils.indicator((double) Float.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathUtils.indicator(1446.7705531);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)16);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-115));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = MathUtils.gcd(4312L, (-1L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = MathUtils.gcd(93L, 2L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = MathUtils.gcd(4625478292286210048L, (long) 0);
      assertEquals(4625478292286210048L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long long0 = MathUtils.gcd((-142L), (-142L));
      assertEquals(142L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-142L));
      assertEquals(142L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1073741804, 1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = MathUtils.lcm((-43), (-43));
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = MathUtils.gcd(160, 0);
      assertEquals(160, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = MathUtils.gcd(0, (-1099));
      assertEquals(1099, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = MathUtils.factorialLog(4057);
      assertEquals(29654.436658034017, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,448
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(16);
      assertEquals(2.0922789888E13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(1073703627);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,504
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1693);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-222.84787236121167), (-222.84787236121167), 132);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1900.21003598587), 298.67, 68);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = MathUtils.compareTo(Float.NaN, Float.NaN, 1.4456468917292502E-16);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 362880L, 0.0, 1431655765);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-222.84787236121167), (-222.84787236121167), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (-1), 734.59493626);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.0, 1017242.1348845137, (-1008.584223));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1473.4), (-1473.4), 2533.098909503278);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(389.0420392832, 389.0420392832, 389.0420392832);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1161.560494615069), (-543.796821473));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2366.987993), (-2366.987993));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1161.560494615069), 1.1102230246251565E-16);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1567.17455863), (-1008.584223), (-2.957007209750105E-8));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2334), (-2334));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,334
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(508494437, 1333);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(508494437, (-775));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(137, 137);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(Integer.MAX_VALUE, 2147407251);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(165, (-1));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1426L), 1834L);
      assertEquals((-3260L), long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(781L, 781L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3, 3);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double double0 = MathUtils.round((-222.84787236121167), 132);
      assertEquals((-222.84787236121167), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MathUtils.sinh((-735.82354715));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2156L, 2156L);
      assertEquals(4312L, long0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = MathUtils.hash(3247.9352930694154);
      assertEquals((-1642926721), int0);
  }
}

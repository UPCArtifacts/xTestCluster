/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:44:12 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4194304;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,194,304 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 18;
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 450;
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) Float.NaN;
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-61);
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)16;
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.scalb((-801), 2336);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.mulAndCheck((-1995L), (-1363L));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.mulAndCheck(72L, 72L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, Integer.MAX_VALUE);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.equals((double) 0, 1.494140625, 1.494140625);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.equals(1732.1351, (double) (byte)19);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.cosh(0.05);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.subAndCheck((long) 174, (-4571746064154768913L));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.subAndCheck((-1424L), (-1L));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.subAndCheck((-2514), (-2514));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.subAndCheck((-1241), 1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.sinh(104);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.scalb(6.283185307179586, 1275);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.round((float) (-2127300699), 8, 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.round(0.0F, 7958);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round((float) 6402373705728000L, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round(87.0, 125);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.round((-993.309744), 505);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-79);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      MathUtils.pow(bigInteger1, 877L);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 9);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.pow((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.pow(897L, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.pow((long) (-837), 5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.pow(82, 40320L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.pow(19, 201L);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.pow((int) (short)1, 145);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.pow(13, 14);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.normalizeAngle(8.0E298, 62.0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.normalizeAngle(3979, 7958);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.mulAndCheck(1732, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.mulAndCheck(7958, (-1668));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.log((short)10, (short)1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathUtils.log(21.0, 3096.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.log(1025.0, 2.2250738585072014E-308);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 124;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.hash((double) 0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.hash(1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[8];
      MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.addAndCheck((-757L), 0L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.addAndCheck((-2306), (-2306));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1486.86071375, 0, 221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) (short)1316);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-1508.54497));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2935890503282001226L, (long) (byte)110);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[4];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(31, 166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 31, k = 166
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1311), 66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,311, k = 66
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathUtils.mulAndCheck(72L, (-923L));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.mulAndCheck(7958, 7958);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathUtils.indicator((float) (-2147483647));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MathUtils.indicator((float) 10);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathUtils.gcd(120L, 120L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathUtils.gcd(8, 871);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathUtils.gcd(15, (int) (short)3096);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.gcd((-2306), (-4612));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.equals((double) (-1449), (-2014.474207), 38);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathUtils.equals((double) (-218), (double) 1, 1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(296.49181, (double) 0, (-665));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.equals((double) 636L, 1486.86071375, (double) (-1015683981));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.equals(0.05882352941176, 0.05882352941176, 0.05882352941176);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathUtils.equalsIncludingNaN(1979.15, (-453.412331668));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-453.412331668), (-453.412331668));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.equals((-453.412331668), (-453.412331668));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) Float.NaN;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1008.584223);
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,781.819)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.4456468917292502E-16;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-4035746434778044925L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-4,035,746,434,778,044,925)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-694)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 1806);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        MathUtils.pow((-1706L), (-420L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,706^-420)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathUtils.pow((-16258L), 676L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        MathUtils.pow(2285L, (-2585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,285^-2,585)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathUtils.pow((long) (byte)100, (int) (byte)100);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        MathUtils.pow(8, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (8^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        MathUtils.pow((-848), (-848));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-848^-848)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathUtils.pow(104, 104);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathUtils.subAndCheck(0, (-107));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathUtils.sign((short)13);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MathUtils.sign((short) (-3251));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathUtils.sign((-784L));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathUtils.sign(2156L);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.sign((-1));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathUtils.sign(15);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathUtils.sign(3497.708F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.sign((double) 3979);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.sign((double) (-1423L));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.sign((byte) (-41));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.sign((byte)16);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) 20922789888000L, (-849), (-1049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,049, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.round(1.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5057.63;
      doubleArray0[2] = (double) Float.NaN;
      MathUtils.normalizeArray(doubleArray0, 5057.63);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1008.584223);
      MathUtils.normalizeArray(doubleArray0, (-1008.584223));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) Float.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, 5057.63);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-993.309744));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.scalb(381.9805877327938, (-22));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-1316L), 2935890503282001226L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathUtils.mulAndCheck((-9223372036854775808L), 0L);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1706, 2146435072);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(125, (-2109135724));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.indicator((short)3096);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.indicator((short) (-1390));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.indicator((long) 124);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.indicator((-501L));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathUtils.indicator(150);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathUtils.indicator((-310));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathUtils.indicator((double) (byte) (-71));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathUtils.indicator(1.1921056801463227E-8);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathUtils.indicator((byte)16);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.indicator((byte) (-71));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathUtils.lcm((long) 458660586, (long) 10);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathUtils.lcm(6402373705728000L, (-119L));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathUtils.gcd((-1L), (long) 1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathUtils.gcd(357L, (-4267615245585081135L));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathUtils.lcm((-387), 4);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.gcd(1030, 0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathUtils.gcd(0, (-1099));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -180
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathUtils.factorialDouble(11);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1693);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,431,655,764
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathUtils.factorial(13);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[7];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[8];
      MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 1, 0.0, 1706);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, (double) 1, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 1, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.0, (double) (-1), 734.59493626);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathUtils.equals(482.8886579, 0.0, 1781.819183711);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1473.4), (-5.64876908699981E18), (double) (byte)1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) Float.NaN;
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1473.4), (-1473.4), 2533.098909503278);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathUtils.equals((-3035.048596266612), (double) 2714L);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathUtils.compareTo(1.4456468917292502E-16, 2354.869962411999, (-485.10353831));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathUtils.compareTo((-1008.584223), (-1008.584223), 3096.0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, Float.NaN, 1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 11
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(189, 3);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(10, 10);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathUtils.binomialCoefficient(105, (-3114));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1706, 66);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(9, (byte)1);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(10, (-1879048191));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4194304, 4194304);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-797L), (-797L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3979, 3979);
      assertEquals(7958, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double double0 = MathUtils.round(6.283185307179586, (-837));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.167, (-500.211));
      assertEquals((-502.4878245743669), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MathUtils.sinh((-735.82354715));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 458660586, (long) 10);
      assertEquals(458660596L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1742810335, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = MathUtils.hash((-2318.5466));
      assertEquals(458660586, int0);
  }
}

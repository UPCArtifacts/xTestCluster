/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 20:02:08 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 3.834E-20;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 148;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[1] = (double) 125;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 125)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-40.018409);
      doubleArray0[2] = (-40.018409);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -40.018)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 18;
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2271;
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3979;
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.pow((BigInteger) null, 0L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.pow((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.pow((long) (-566), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.pow(420, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.round(Float.NaN, 797);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.lcm((long) (-1), 4697227937169014784L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.lcm((-1025), 164);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.indicator((long) 1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.indicator((double) (short)0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.058823529411764705, 0.058823529411764705, 2147483086);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2081.6403, 3045.73909, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.equals(0.0036, (-1.0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.subAndCheck(396L, (-770L));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.subAndCheck((-566), (-566));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.subAndCheck((-2026), 5);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.sinh(104);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.scalb((-1221.332530870096), 2422);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round((float) (-2127300699), 8, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.round(0.0F, 7958);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.round((double) 1099, 4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.round((-1.0), 1030);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 6402373705728000L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(5, mockRandom0);
      MathUtils.pow(bigInteger0, (long) 5);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger1.flipBit(9);
      MathUtils.pow(bigInteger2, 2660);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 1806);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.pow(0L, 113236205062349959L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.pow(251L, 251L);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.pow((long) 71, 197);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.pow((long) (-1403), 518);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.pow(82, 40320L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.pow(19, 201L);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.pow(5, 5);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.pow(13, 14);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.normalizeAngle(0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathUtils.normalizeAngle(0, (-380.669262812));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.mulAndCheck(1732, 0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.mulAndCheck((int) (short)2432, 61);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.log(100.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.log(1766.687F, 0.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 124;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.hash((double) 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.hash((double) (byte)1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[5];
      MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 18;
      int[] intArray1 = new int[5];
      MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[8];
      MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1030;
      double[] doubleArray1 = new double[7];
      MathUtils.distance(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.addAndCheck((-757L), 0L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.addAndCheck((int) (short)0, 0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathUtils.addAndCheck(431, (-925));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte) (-1), 4194304, (-1668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (int) (byte)5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(2135812541);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(93, (byte)100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 93, k = 100
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 14
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 1045494, 6722166367014452318L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathUtils.mulAndCheck(5040L, 5040L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.mulAndCheck((-9223372036854775808L), 0L);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.mulAndCheck((-2810L), (-839L));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathUtils.mulAndCheck((-1L), 5040L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(3003, (-2130440125));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.mulAndCheck(7958, (-1668));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1045494, 2013265920);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.indicator((float) 0L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.gcd((-792L), (long) 2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MathUtils.gcd((long) 125, (long) 125);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathUtils.gcd((-2142), 5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.gcd(2879, 605);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathUtils.factorialLog(460);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathUtils.factorial(16);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathUtils.equals((double) (-218), (double) 1, 1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.333333333333333, (double) (-1L), (-566));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathUtils.equals(0.333333333333333, (double) (-2038), 1045494);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.equals((-1008.584223), (-1008.584223), (-1008.584223));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathUtils.equals((double) 0, 1.494140625, 1.494140625);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathUtils.equals((double) 636L, 1486.86071375, (double) (-1015683981));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.equals((-1129.4042506625), (double) 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathUtils.equals((-453.412331668), (-453.412331668));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathUtils.binomialCoefficient(8, 3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.NaN;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = 2.2250738585072014E-308;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4.3466666666666665E18;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,781.819)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1838L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-9L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-9)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) 109);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-694)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        MathUtils.pow((long) 5476, (-606L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (5,476^-606)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        MathUtils.pow((long) 153, (-2147483518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (153^-2,147,483,518)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathUtils.pow(3560L, 821);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        MathUtils.pow((-803), (-3958705157555305932L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-803^-3,958,705,157,555,305,932)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        MathUtils.pow((-2713), (-2713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,713^-2,713)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.pow(104, 104);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.subAndCheck(0, (-107));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.sign((short) (-4211));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.sign((short)2450);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathUtils.sign((-923L));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.sign(2156L);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathUtils.sign((-2145159530));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.sign(248);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.sign(441.4F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.sign(0.19999954120254515);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.sign((double) (-1423L));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.sign((byte)100);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathUtils.sign((byte) (-84));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathUtils.round(1766.687F, 0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(966.8214F, 11, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 11, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathUtils.round((float) 104L, 104, 5);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathUtils.round(1.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.round(Double.POSITIVE_INFINITY, (-925), 1217);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[8] = (double) Float.NaN;
      doubleArray0[1] = (double) 125;
      MathUtils.normalizeArray(doubleArray0, 489.74642);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-1);
      MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[8] = (double) Float.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, 489.74642);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 3.834E-20);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.scalb(436.9774931425339, 71);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathUtils.scalb(0.0, (-837));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(4607182418800017408L, (-3472L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathUtils.mulAndCheck(2156L, (long) (-2757));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) (-2038), (-2644281811660520851L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1062783533, 2878);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(2906, (-2130440125));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathUtils.lcm((long) 1, (long) 0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathUtils.lcm(20, 4);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathUtils.indicator((short)2432);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathUtils.indicator((short) (-248));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathUtils.indicator((-3093L));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathUtils.indicator(1041);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathUtils.indicator((-218));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.indicator((float) (-513));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathUtils.indicator((-812.4334303034057));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathUtils.indicator(1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathUtils.indicator((byte)5);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathUtils.indicator((byte) (-5));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathUtils.gcd(848L, (-2644281811660520851L));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathUtils.gcd((long) 104, (long) 0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathUtils.gcd((long) 0, 0L);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathUtils.gcd((-2535), 0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathUtils.gcd(0, (-1099));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MathUtils.factorialDouble(66);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,431,655,764
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(67);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathUtils.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-4238.085314), (-4238.085314), 1024);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-21.6591), (double) 2156L, 16);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, (double) 124, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 125, (double) 1567, 3.462655149E7);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MathUtils.equalsIncludingNaN(2083.88761, (-1458.05277035), 1265.9020033862998);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1473.4), (-1473.4), (-1473.4));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MathUtils.compareTo((-487.064909), 3, 2548.77396);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 0L, (double) 0L);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) (-923L), 1.3642795597510057E11);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MathUtils.compareTo((-1359.21191), 1.0F, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, Float.NaN, Float.NaN);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-105), (-2757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -105
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MathUtils.binomialCoefficientLog(119, (-2265));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MathUtils.binomialCoefficientLog(88, 1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MathUtils.binomialCoefficientLog(5, 5);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(361, 104);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(15, (short)1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(3, (-2757));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(124, 124);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MathUtils.binomialCoefficient((short)2432, 5);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MathUtils.binomialCoefficientLog(63, (-793));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MathUtils.binomialCoefficient(18, 16);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MathUtils.binomialCoefficient(63, 1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1334, 16);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-9218868437227405313L), 918L);
      assertEquals((-9218868437227406231L), long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(781L, 781L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(Integer.MAX_VALUE, 233506);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2,147,483,647 + 233,506
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(124, 1);
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double double0 = MathUtils.log(5.0, 14);
      assertEquals(1.6397385131955606, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = MathUtils.round((-2028.4227), (-305));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(110.0, 1215.311920573874);
      assertEquals(1215.840614063607, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MathUtils.sinh((-735.82354715));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2156L, 2156L);
      assertEquals(4312L, long0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(961, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = MathUtils.hash(2015.89234037);
      assertEquals((-2127300699), int0);
  }
}

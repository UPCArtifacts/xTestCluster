/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:41:40 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2192;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.8943738585576;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 1,781.894)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1203;
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 119;
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-61);
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2147483646;
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.pow((BigInteger) null, 0L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.pow((-1), (long) 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.sinh(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1008.584223);
      MathUtils.normalizeArray(doubleArray0, (-1008.584223));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.scalb((-446.881267463039), 1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.factorialLog(21);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[8];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-222.84787236121167), (-222.84787236121167), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.equals(1294.981334399059, (-994.0), 1017242.1348845137);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.cosh(1.0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, (-2502));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.subAndCheck(362880L, (-3667L));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.subAndCheck((-566), (-566));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.subAndCheck((-513), (-2038));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.sinh(2997.6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.scalb(2300.17704, (-1449));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.round(0.0F, 7958);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round(1045494.0, (-513));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round((double) (byte)1, 9);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 5319L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 1806);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)3;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MathUtils.pow(bigInteger0, 511);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.pow((long) 3814500, 0L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.pow(3116L, (long) 7);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.pow(1L, 63);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.pow(61, (long) 61);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.pow((-1448), (long) (short)1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.pow(18, 527);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.pow(1565, 1565);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.normalizeAngle(498.079270585, 498.079270585);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.normalizeAngle(0.0, (-3655));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.mulAndCheck(0, (-1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.mulAndCheck((-513), (-2038));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.log((short)10, (short)1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.log(3986.1409, 1436.8537698);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 124;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.hash(1025.7166);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[8];
      MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int[] intArray1 = new int[9];
      MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.addAndCheck((long) (-2038), (long) 1093658635);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.addAndCheck(0, (-2038));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1965.13493626, (-108), (-370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(2146737734);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[14];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 20
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((byte)19, 1203);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 19, k = 1,203
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4499201580859392L, 9218868437227405312L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MathUtils.mulAndCheck((-2147483648L), (-18L));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MathUtils.mulAndCheck(72L, (-923L));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2135205885, 26);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathUtils.mulAndCheck(7958, (-1668));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.indicator((-1902.1F));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathUtils.indicator((float) 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.gcd(6L, 6L);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathUtils.gcd((-4581327257830174012L), 291L);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MathUtils.gcd(2147481584, (-1099));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathUtils.gcd((-2034458191), 16);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathUtils.gcd(394, 394);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathUtils.factorial(16);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.equals((-1123.2), (-2361.82423724652), 3850);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.equals((double) (-218), (double) 1, 1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(3.834E-20, 3.834E-20, (-2626));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathUtils.equals(1.1102230246251565E-16, (double) 118, 118);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.equals(1.0, 1.0, 75.26827499);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.equals((-3922.395463), (double) (-43), (-3922.395463));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathUtils.binomialCoefficient(10, (-2943));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1.7750766630145202E-248);
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1008.584223);
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[2] = 1431.7226304;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 1,431.723)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 394;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (394 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 933.2390610969735;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (933.239 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[1];
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (-2249));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,249)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-2585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,585)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        MathUtils.pow((-3713L), (-3713L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,713^-3,713)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.pow((long) 2192, 30L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        MathUtils.pow((-1L), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathUtils.pow(39916800L, 2147483646);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        MathUtils.pow((-1), (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathUtils.pow(2147483646, (long) 1013);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        MathUtils.pow((-1102), (-1102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,102^-1,102)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathUtils.pow(1333, 1333);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathUtils.subAndCheck((-566), 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathUtils.sign((short)1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MathUtils.sign((short) (-20852));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathUtils.sign((-587L));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathUtils.sign(2156L);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.sign((int) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathUtils.sign(19);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.sign((float) 1838L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.sign((float) 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathUtils.sign((-237.34604F));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.sign(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathUtils.sign((-1258.635669424));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.sign((byte) (-8));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.sign((byte)104);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) 3979, 596, 7958);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 7,958, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.round((float) 0, 10, 0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.scalb(802.05289, 10);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 18, 4577762542105553359L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.mulAndCheck((long) (byte)0, (long) (byte)19);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.mulAndCheck((-9223372036854775808L), 0L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (-3843L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.mulAndCheck(1L, (long) 1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2144560290), (-285));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathUtils.lcm((long) 9, 0L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.lcm(1, 0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.indicator((short)2432);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.indicator((short) (-1338));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathUtils.indicator((long) 1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathUtils.indicator((long) (-218));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathUtils.indicator(1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathUtils.indicator((-43));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathUtils.round((float) (-1L), 2782);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.round(Float.NaN, 2147483646);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathUtils.indicator(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathUtils.indicator((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathUtils.indicator(1446.7705531);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathUtils.indicator((byte)16);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathUtils.indicator((byte) (-48));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.lcm((long) 2147483646, (-867L));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathUtils.lcm((-3016L), (-3016L));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathUtils.gcd((-4571289220389555055L), (-3713L));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathUtils.gcd((long) (byte)0, (long) (byte)104);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathUtils.lcm(16, (-1096));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathUtils.lcm(334, 7);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathUtils.gcd(160, 0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathUtils.gcd(0, (-1099));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-78800831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -78,800,831
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathUtils.factorialDouble(16);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-81));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -81
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathUtils.factorialDouble(94);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1693);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,504
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 201L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.041666666666666664);
      MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NaN;
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[1];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathUtils.equalsIncludingNaN(1025.7166, 1025.7166, 26);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1900.21003598587), 298.67, 68);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (double) 2147400226, 2147400226);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.0, (double) (-1), 734.59493626);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 18, (-1312.814909484), (double) 18);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1473.4), (-1473.4), 2533.098909503278);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathUtils.equals((double) 0, 1.494140625, 1.494140625);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.0, (-1236.973294446));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MathUtils.equalsIncludingNaN(9.313225746154785E-10, 9.313225746154785E-10);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MathUtils.equals(1446.7705531, (-7.44321345601866E-11));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MathUtils.equals((-453.412331668), (-453.412331668));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MathUtils.compareTo((-237.34604F), (-62.43765), 1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MathUtils.compareTo((-62.43765), (-62.43765), 1.25);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, Float.NaN, 1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1013, 2147400240);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,013, k = 2,147,400,240
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MathUtils.binomialCoefficientLog(39, (-6));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(237, 13);
      assertEquals(8.549379941031336E20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(508494437, (-775));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2144815966, 2144815966);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(558, (-3667));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1876L), 3952090531849364496L);
      assertEquals((-3952090531849366372L), long0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3979, 3979);
      assertEquals(7958, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double double0 = MathUtils.round((-43.0), 8);
      assertEquals((-43.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MathUtils.sinh((-735.82354715));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) (-43), 0L);
      assertEquals((-43L), long0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = MathUtils.hash((-62.43765));
      assertEquals(705016849, int0);
  }
}

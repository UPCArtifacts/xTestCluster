/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:03:13 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1431.7226304;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 8.22283865417801E33;
      doubleArray0[2] = 8.22283865417801E33;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 8,222,838,654,178,010,000,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 8.22283865417801E33;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (8,222,838,654,178,010,000,000,000,000,000,000 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1072;
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3979;
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-61);
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-566);
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.pow((-1479L), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.pow((-1), (long) 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.sinh((-1L));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2039.7456);
      MathUtils.normalizeArray(doubleArray0, (-23.610928753));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.scalb((-1272.7370825162318), (-1822));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.gcd(0, (-1099));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.factorialDouble((short)0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.49999999999999994, 0.5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.equals(0.036, (double) (short) (-609));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.binomialCoefficientLog(0, (-106));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.subAndCheck((long) 0, (-1L));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.subAndCheck((-566), (-566));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.subAndCheck(16, 46);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.sinh(2.2250738585072014E-308);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.sinh(2997.6);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round(0.0F, 7958);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round(1.0F, (int) (short)31);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.round((float) (-1560), 15);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.round(4.0, 4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.round((-1390.03525862), (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(31);
      MathUtils.pow(bigInteger0, (long) 31);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit((short)1);
      MathUtils.pow(bigInteger1, 2153);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.pow(5114214153064428528L, (long) 124);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.pow((-1L), (int) (short)10);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.pow(323L, 14);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.pow(82, 40320L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.pow(19, 201L);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.pow(1520, 14);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.pow(1333, 1333);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.normalizeAngle(0.0036, 2753.6372);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.normalizeAngle((-1424L), Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.mulAndCheck(0, (int) (short)10);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathUtils.mulAndCheck(7958, (-1668));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.log((short)10, (short)1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.log(1.4456468917292502E-16, 1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.log(2023.2, 0.5);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.058823529411764705;
      doubleArray0[1] = 0.058823529411764705;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.hash((double) 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.hash(4221.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 168;
      int[] intArray1 = new int[3];
      MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 24L;
      MathUtils.distanceInf(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 168;
      int[] intArray1 = new int[3];
      MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-513);
      MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 124;
      int[] intArray1 = new int[9];
      MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.addAndCheck((-757L), 0L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.addAndCheck((-3507), (-3507));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(13.0, (-779), (-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2075948061);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-784L), (-5034868814120038111L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(1045494);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[3];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-604), 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -604, k = 16
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(4522, 15);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 262.0536590859519;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (262.054 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.mulAndCheck((long) 124, 1838L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathUtils.mulAndCheck((long) 0, 622L);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathUtils.mulAndCheck((-119L), 1838L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.mulAndCheck((int) (short)13, (int) (short)13);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.indicator((float) 1L);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathUtils.gcd(9218868437227405312L, 9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathUtils.gcd(14, 3782);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.gcd((-665572559), (-3655));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.factorialLog(124);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.equals(620.1941295334087, 620.1941295334087, 168);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.equals((double) (-218), (double) 1, 1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(3.834E-20, 3.834E-20, (-2626));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(2.2250738585072014E-308, (-1.0), 1994091958);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.equals((double) 0, 1.494140625, 1.494140625);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathUtils.equals((-1779.52748893), (-733.61475075), 1.494140625);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathUtils.equals((-453.412331668), (-453.412331668));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(189, 3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(152, (-2394));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.binomialCoefficient(15, (-423));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 8.22283865417801E33;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1008.8114512001414);
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,781.819)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 8.22283865417801E33;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1423L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(124L);
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(31);
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) 11);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (long) (-1692154371));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,692,154,371)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-694)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, 1806);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathUtils.pow(835L, 835L);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        MathUtils.pow((long) 3066, (-2181L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,066^-2,181)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathUtils.pow((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        MathUtils.pow((-2041L), (-1073741823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,041^-1,073,741,823)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.pow((long) 4, 238);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        MathUtils.pow((-1863), (long) (-1863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,863^-1,863)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        MathUtils.pow((-2713), (-2713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,713^-2,713)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathUtils.pow((-15), 1520);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.subAndCheck(0, (-107));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathUtils.sign((short) (-779));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.sign((short)1503);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.sign(2156L);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.sign((-1353L));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathUtils.sign((-5909));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.sign(1806);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathUtils.sign((float) (short)10);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.sign((double) (-1423L));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathUtils.sign((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.sign(0.16666666666666666);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.sign((byte) (-85));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.sign((byte)6);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.round((float) 3, 1046, 3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-868.7F), 11, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 11, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathUtils.round((-2357.7844F), 1, 3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathUtils.round(1.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4194304;
      MathUtils.normalizeArray(doubleArray0, (byte)112);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      try { 
        MathUtils.normalizeArray(doubleArray0, (byte)112);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-1346.1115031762));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathUtils.scalb(Double.POSITIVE_INFINITY, 9);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(244L, 9218868437227405312L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathUtils.mulAndCheck((long) 1046, (long) 0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-5034868814120038111L), 5040L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.mulAndCheck((-9223372036854775808L), 0L);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-302932621132653753L), (-302932621132653753L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathUtils.mulAndCheck((-420L), (long) (byte) (-86));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(3979, 4194304);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2563), 1717986918);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathUtils.indicator((short)2432);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathUtils.indicator((short) (-1110));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathUtils.indicator(1279L);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathUtils.indicator((long) (-7014));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathUtils.indicator((int) (short)13);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathUtils.indicator((-1399));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathUtils.indicator((-1.0F));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathUtils.indicator(1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathUtils.indicator((-1423.0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathUtils.indicator((byte)11);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.indicator((byte) (-45));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathUtils.gcd(10L, (-1L));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathUtils.lcm(1022L, 684L);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathUtils.gcd((long) (-837), (-1L));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathUtils.lcm(1647, (-2772));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathUtils.gcd((-2178), 5);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathUtils.gcd((-1356), 0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -180
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathUtils.factorialDouble(31);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1442));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,442
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathUtils.factorialDouble(11);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1045494);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,431,655,764
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MathUtils.factorial(16);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) Float.NaN;
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathUtils.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 3979, (double) 3979, 3979);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1.0), (-5032.326052415138), 244);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, 124.0, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2081.6403, 3045.73909, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.0, (double) (-1), 734.59493626);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MathUtils.equalsIncludingNaN(6.283185307179586, 6.283185307179586, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MathUtils.equals(0.058823529411764705, 0.058823529411764705, 0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MathUtils.equalsIncludingNaN(Double.NaN, 2.2250738585072014E-308, (double) (short)0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (double) Float.NaN;
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1236.973294446), 0.0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 72L;
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, Float.NaN, 1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MathUtils.compareTo(112.0, 1L, 320356.0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MathUtils.compareTo(Double.NEGATIVE_INFINITY, 2797.0, 3.26E18);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2394), (-2475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,394
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 3782);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 3,782
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MathUtils.binomialCoefficientLog(1072, 231);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MathUtils.binomialCoefficientLog(238, 238);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(12, 3);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(202, 124);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(4, 3);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(4418, 1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MathUtils.binomialCoefficientLog(238, 20);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(9, 9);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MathUtils.binomialCoefficientLog(14, (short)10);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(238, 8);
      assertEquals(226702541072007L, long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4194304, 4194304);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1424L), (long) (short)10);
      assertEquals((-1434L), long0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(781L, 781L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1, 5);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double double0 = MathUtils.round(6.283185307179586, (-837));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = MathUtils.cosh((-385.69432612));
      assertEquals(1.599143877429266E167, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 168, 891L);
      assertEquals(1059L, long0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1742810335, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = MathUtils.hash(1.4456468917292502E-16);
      assertEquals((-568994748), int0);
  }
}

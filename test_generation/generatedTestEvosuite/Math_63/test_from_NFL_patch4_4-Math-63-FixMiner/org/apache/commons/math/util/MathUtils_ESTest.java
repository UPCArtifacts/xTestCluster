/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:48:09 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1275;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 1,275)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1631);
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-523170343);
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-61);
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[4] = 17;
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.pow((BigInteger) null, 0L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.pow((-1353L), 1454L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.sinh(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.round(Float.NaN, 17);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-566);
      MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.scalb((-3339.7523607763806), 224);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.mulAndCheck((-1409L), (-1409L));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.lcm((-5L), (long) (-523170343));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.lcm((-335), (-80));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.indicator((double) 124);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.gcd(0, (-1099));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.factorialDouble((short)0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2081.6403, 3045.73909, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.equals((-566.0), (double) 1, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.equals(6.283185307179586, (-566.0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.cosh((-291.320698));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(3, (-2274));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.subAndCheck(781L, 781L);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.subAndCheck((-1424L), (-1L));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.subAndCheck((-566), 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.sinh((short)0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.sinh(1.2368618440239511E187);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.scalb(2714.0, 1275);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.round(0.0F, 7958);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.round((-1293.0F), 1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.round((-751.0266309), (-2038));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.round(1587.6, 2080);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.xor(bigInteger0);
      MathUtils.pow(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = BigInteger.ONE;
      MathUtils.pow(bigInteger1, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, 6402373705728000L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      MathUtils.pow(bigInteger1, (int) (short)3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.pow((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.pow((long) (-748), 2822);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathUtils.pow((long) 639827968, 0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.pow(82, 40320L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.pow(19, 201L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.pow(104, 104);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.pow(177, 177);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.normalizeAngle((-180.95953792), (-1423.0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.mulAndCheck(1732, 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.mulAndCheck((-1060), 3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.log((short)10, (short)1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathUtils.log(12.889503270191014, 14);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathUtils.log(1010.7194069057679, 0.5);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 124;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.hash((-4767.38712762287));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.factorialLog(17);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-566);
      double[] doubleArray1 = new double[7];
      MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[8];
      MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 41;
      int[] intArray1 = new int[5];
      MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1008.584223);
      double[] doubleArray1 = new double[4];
      MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MathUtils.addAndCheck(83, (-1066));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-368.64719893035), 4806, (-603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.074, (-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Underflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) (short)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1706, 2146435072);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(2126221433);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[8];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(508, 4194304);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 508, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.mulAndCheck((long) 0, 213L);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathUtils.mulAndCheck((-894L), (long) 2146982016);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathUtils.mulAndCheck((-9223372036854775808L), 0L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.mulAndCheck(479001600L, (long) 2146982016);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.mulAndCheck((int) (byte) (-1), (-324));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.indicator((float) 1610612736);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.gcd(7910884519577875640L, 7910884519577875640L);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MathUtils.gcd((-748), 17);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathUtils.gcd((-748), (-748));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.factorial((short)0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathUtils.equals((-1350.23), 22.13, 1837);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(1.0, 3073.4278997033, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathUtils.equals(3.141592653589793, (-960.64706), 183);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.equals((double) 0, 1.494140625, 1.494140625);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathUtils.equals((double) 636L, 1486.86071375, (double) (-1015683981));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 1, (double) 1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathUtils.equals((double) 4, (double) 4);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(2146435072, 1993);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(1075, (-1396));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-566);
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,781.819)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1,781.819 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,781.819 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-1424L));
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,424^-1,424)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) 11);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-694)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 1806);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        MathUtils.pow((-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathUtils.pow(5040L, 5040L);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        MathUtils.pow((-1365L), (-3353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,365^-3,353)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathUtils.pow((long) 3, 308);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        MathUtils.pow(1978, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,978^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathUtils.pow(1610612736, (-1094));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,610,612,736^-1,094)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.pow(13, 14);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.subAndCheck((long) 7958, (long) 3979);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.subAndCheck(0, (-107));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.sign((short) (-688));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathUtils.sign((short)914);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.sign(2156L);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathUtils.sign((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.sign((-4233L));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.sign((-1852));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.sign(1806);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathUtils.sign((float) 124);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.sign((-1623.4F));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.sign((double) (-1423L));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.sign(0.19999954120254515);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathUtils.sign((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathUtils.sign((byte)3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathUtils.round(1806.0F, (-1));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-1025), 2590, 670);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 670, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathUtils.round(1697.593F, (-699), 3);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.round(1.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 734.59493626;
      MathUtils.normalizeArray(doubleArray0, 734.59493626);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1013.881788);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 681.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathUtils.scalb(1.6517397100630264E126, 142);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(2147483661L, 1307674368000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathUtils.mulAndCheck(355687428096000L, 0L);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9218868437227405313L), 2350L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2142181218), (-2142181218));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-1074790400), 31);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathUtils.lcm((-5L), 0L);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathUtils.lcm(0L, 549L);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathUtils.indicator((short)2432);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathUtils.indicator((short) (-1437));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathUtils.indicator(1671L);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathUtils.indicator((-1424L));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathUtils.indicator(2878);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathUtils.indicator((-1025));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathUtils.indicator((-2553.608F));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathUtils.indicator((-1501.142));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathUtils.indicator((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathUtils.indicator((byte)115);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathUtils.indicator((byte) (-53));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathUtils.lcm(2147483648L, 1307674368000L);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathUtils.gcd(5040L, 1L);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathUtils.gcd(4233L, (-4035746434778044925L));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathUtils.gcd(39L, 0L);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathUtils.gcd((-4233L), (-4233L));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathUtils.gcd((long) 0, (-1285L));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathUtils.gcd(3, (-748));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathUtils.gcd(160, 0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,771
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MathUtils.factorialDouble((byte)127);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,590
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(9970);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,431,655,764
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[9];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 4194304, 3.99168E7, 132);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, 124.0, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-2274), (double) 5040L, (-629595912));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.0, (double) (-1), 734.59493626);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-3031.018331), (double) Float.NaN, (double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MathUtils.equals(0.058823529411764705, 0.058823529411764705, 0.058823529411764705);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) 5, (double) 5, 2.85040095144011776E17);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, (-1501.142));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-0.2499999701976776), 1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MathUtils.compareTo((-1.7168146928204135), 0.0, (-5648769086999809661L));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MathUtils.compareTo(11, 1.4456468917292502E-16, 11);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, Float.NaN, 1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-570), (-570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -570
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(1215, 1075);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(11, 11);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(41, 14);
      assertEquals(3.524015272E10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4194304, 4194304);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1365L), (-1365L));
      assertEquals((-2730L), long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(3005L, 6L);
      assertEquals(3011L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(3979, 3979);
      assertEquals(7958, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = MathUtils.round((-4075.183449), 20);
      assertEquals((-4075.183449), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(41, 41);
      assertEquals(41.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MathUtils.sinh((-735.82354715));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 0, (-4280L));
      assertEquals((-4280L), long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = MathUtils.hash((double) 41);
      assertEquals(1078231040, int0);
  }
}

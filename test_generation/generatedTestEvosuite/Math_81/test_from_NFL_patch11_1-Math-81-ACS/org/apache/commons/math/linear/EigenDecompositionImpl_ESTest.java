/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:57:16 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(17);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertEquals(20, realVector0.getDimension());
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(13, (-2731.8));
      assertEquals(1.11894528E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9849.644974312525, arrayRealVector0.getNorm(), 0.01);
      assertEquals(35513.4, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(13, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(1.11894528E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9849.644974312525, arrayRealVector0.getNorm(), 0.01);
      assertEquals(35513.4, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(13, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(13, realMatrix0.getRowDimension());
      assertEquals(13, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3835.652109202);
      assertEquals(1.11894528E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9849.644974312525, arrayRealVector0.getNorm(), 0.01);
      assertEquals(35513.4, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(13, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(13, realMatrix0.getRowDimension());
      assertEquals(13, realMatrix0.getColumnDimension());
      assertEquals((-7.716010683569584E-231), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-7.716010683569584E-231), double0, 0.01);
      assertEquals(1.11894528E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9849.644974312525, arrayRealVector0.getNorm(), 0.01);
      assertEquals(35513.4, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(13, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(13, realMatrix0.getRowDimension());
      assertEquals(13, realMatrix0.getColumnDimension());
      assertEquals((-7.716010683569584E-231), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 2732.1245401434);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1413.5622184));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2108, 2108);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2108, blockRealMatrix0.getColumnDimension());
      assertEquals(2108, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2108);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 9);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(9, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2380.8104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 39x9 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 742);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(742, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1881.088);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (39, 0) in a 39x742 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 17);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 8.222305044337987E-38;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 738.502811844963);
      assertArrayEquals(new double[] {8.222305044337987E-38, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertArrayEquals(new double[] {8.222305044337987E-38, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(6, (-2731.8));
      assertEquals(6691.516079335086, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(87417.6, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16390.8, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(6691.516079335086, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(87417.6, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16390.8, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2731.8));
      assertEquals(6691.516079335086, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(87417.6, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16390.8, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 52;
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 52;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {20.0, 52.0, 20.0, 52.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(288.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.79086241436883, arrayRealVector0.getNorm(), 0.01);
      assertEquals(144.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {20.0, 52.0, 20.0, 52.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(288.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.79086241436883, arrayRealVector0.getNorm(), 0.01);
      assertEquals(144.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1017.455006679));
      assertArrayEquals(new double[] {20.0, 52.0, 20.0, 52.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(288.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.79086241436883, arrayRealVector0.getNorm(), 0.01);
      assertEquals(144.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals((-1.1284743152065787E-36), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(13, (-2731.8));
      assertEquals(35513.4, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.11894528E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9849.644974312525, arrayRealVector0.getNorm(), 0.01);
      assertEquals(13, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(35513.4, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.11894528E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9849.644974312525, arrayRealVector0.getNorm(), 0.01);
      assertEquals(13, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(13, realMatrix0.getRowDimension());
      assertEquals(13, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2731.8));
      assertEquals(35513.4, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.11894528E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9849.644974312525, arrayRealVector0.getNorm(), 0.01);
      assertEquals(13, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(13, realMatrix0.getRowDimension());
      assertEquals(13, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(4);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 17);
      assertEquals(1114112.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(70.09279563550022, arrayRealVector0.getNorm(), 0.01);
      assertEquals(289.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1114112.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(70.09279563550022, arrayRealVector0.getNorm(), 0.01);
      assertEquals(289.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1114112.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(70.09279563550022, arrayRealVector0.getNorm(), 0.01);
      assertEquals(289.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(17, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(17, realMatrix0.getRowDimension());
      assertEquals(17, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2283.403944162;
      doubleArray1[1] = (-2092.641124);
      doubleArray1[2] = 8.222305044337987E-38;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 738.502811844963);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2283.403944162, (-2092.641124), 8.222305044337987E-38, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2283.403944162;
      doubleArray1[1] = (-2092.641124);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 738.502811844963);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2283.403944162, (-2092.641124), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2283.403944162;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 738.502811844963);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2283.403944162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2283.403944162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
      assertNotSame(decompositionSolver1, decompositionSolver0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver1.isNonSingular());
      assertNotNull(decompositionSolver1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(31, 31);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(31, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(31, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 31);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(31, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(31, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(31);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3.879855294589337);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(20, realMatrix0.getColumnDimension());
      assertEquals(20, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(10, 10);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(10, realMatrix0.getColumnDimension());
      assertEquals(10, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(10, realMatrix1.getColumnDimension());
      assertEquals(10, realMatrix1.getRowDimension());
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(39, realMatrix0.getRowDimension());
      assertEquals(39, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(39, realMatrix1.getRowDimension());
      assertEquals(39, realMatrix1.getColumnDimension());
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(20, realMatrix0.getRowDimension());
      assertEquals(20, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 738.502811844963);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getRowDimension());
      assertEquals(8, realMatrix1.getColumnDimension());
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2731.8);
      doubleArray0[6] = 1.7E-11;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {(-2731.8), 0.0, 0.0, 0.0, 0.0, 0.0, 1.7E-11, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2731.800000000017, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(349670.4, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2731.8, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 17.0);
      assertArrayEquals(new double[] {(-2731.8), 0.0, 0.0, 0.0, 0.0, 0.0, 1.7E-11, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(17.0, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {(-2731.8), 0.0, 0.0, 0.0, 0.0, 0.0, 1.7E-11, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2731.800000000017, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(349670.4, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2731.8, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.125, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(17.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-4272.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, (-1413.5622184));
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17, realMatrix0.getRowDimension());
      assertEquals(17, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3149.24));
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17, realMatrix0.getRowDimension());
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(17, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17, realMatrix0.getRowDimension());
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(7, 7);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -673
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 738.502811844963);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(18, (-1413.5622184));
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1413.5622184));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}

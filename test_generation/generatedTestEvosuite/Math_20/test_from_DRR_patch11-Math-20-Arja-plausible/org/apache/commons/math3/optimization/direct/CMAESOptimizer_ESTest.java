/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:13:25 GMT 2021
 */

package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][8];
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937c0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 30000, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      cMAESOptimizer0.optimize(313, microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, doubleArray0, 0, 0, false, 0, 0, well19937a0, false);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertNotNull(cMAESOptimizer0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937a0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      double[][] doubleArray1 = new double[1][3];
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertNotNull(convergenceChecker0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer((-1067), doubleArray0, 0, 2114.2, false, (-4427), (-1655), cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, false, convergenceChecker0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertNotNull(cMAESOptimizer1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer1.optimize(786, microsphereInterpolatingFunction0, goalType0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      double[][] doubleArray1 = new double[1][1];
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(13, microsphereInterpolatingFunction0, goalType0, doubleArray0);
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(pointValuePair0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (13) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer0);
      
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      double[][] doubleArray1 = new double[1][1];
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 987, 13, unitSphereRandomVectorGenerator0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(3, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][7];
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 525516065, 0, (UnitSphereRandomVectorGenerator) null);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, doubleArray0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertNotNull(cMAESOptimizer0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(639, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      doubleArray0[0] = (double) (-6934);
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, doubleArray0, 0, (-6934.0), false, 0, 0, well19937a0, false);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(cMAESOptimizer0);
      assertArrayEquals(new double[] {(-6934.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[][] doubleArray1 = new double[1][8];
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937c0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 30000, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {(-6934.0)}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(0, microsphereInterpolatingFunction0, goalType0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -6,934 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, doubleArray0, 0, 0.0, false, 0, 0, well19937a0, false);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(cMAESOptimizer0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[][] doubleArray1 = new double[1][8];
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937c0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 3431, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(0, microsphereInterpolatingFunction0, goalType0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertNotNull(cMAESOptimizer0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937a0);
      assertEquals(0, intArray0.length);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[][] doubleArray1 = new double[1][1];
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(1126, microsphereInterpolatingFunction0, goalType0, doubleArray0);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(pointValuePair0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937a0);
      assertEquals(0, intArray0.length);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[][] doubleArray1 = new double[1][1];
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2365, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(pointValuePair0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937a0);
      double[][] doubleArray1 = new double[1][1];
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(840, doubleArray0, 904, 3.0, false, (-1178), 1, well19937a0, false);
      // Undeclared exception!
      cMAESOptimizer0.optimize(454, microsphereInterpolatingFunction0, goalType0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Well19937a well19937a0 = new Well19937a();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, doubleArray0, 0, 0, false, 0, 0, well19937a0, false);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937a0);
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 786, 16, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(16, microsphereInterpolatingFunction0, goalType0, doubleArray0);
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Well19937a well19937a0 = new Well19937a();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(64, doubleArray0, 64, (-0.3058015757857271), false, 0, 0, well19937a0, false);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertFalse(list0.contains((-0.3058015757857271)));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      Well19937c well19937c0 = new Well19937c();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well19937c0);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 30000, 0, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MINIMIZE;
      cMAESOptimizer0.optimize(305, microsphereInterpolatingFunction0, goalType0, doubleArray0);
      cMAESOptimizer0.doOptimize();
  }
}

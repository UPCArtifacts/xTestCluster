/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:48:25 GMT 2021
 */

package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Well512a well512a0 = new Well512a();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(746.0, (-700.2163));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(746, doubleArray0, (-43), 746.0, false, 2179, (-43), well512a0, true, simpleValueChecker0);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1321), doubleArray0, 0, 0, true, 0, 1, (RandomGenerator) null, false);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(135);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-854), (double[]) null);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, doubleArray0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-462547200), doubleArray0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(0, list0.size());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:40:24 GMT 2021
 */

package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 30000;
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNull(cMAESOptimizer1.getGoalType());
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotNull(cMAESOptimizer1);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 30000.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1903, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
      assertNull(cMAESOptimizer0.getGoalType());
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNull(cMAESOptimizer0.getGoalType());
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertNotNull(microsphereInterpolatingFunction0);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 30000.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      cMAESOptimizer1.optimize(0, microsphereInterpolatingFunction0, goalType0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(746.0, (-700.2163));
      assertEquals((-700.2163), simpleValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(746.0, simpleValueChecker0.getRelativeThreshold(), 0.01);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(746, doubleArray0, (-43), 746.0, false, 2179, (-43), well512a0, true, simpleValueChecker0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-700.2163), simpleValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(746.0, simpleValueChecker0.getRelativeThreshold(), 0.01);
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1321), doubleArray0, 0, 0, true, 0, 1, (RandomGenerator) null, false);
      assertEquals(8, doubleArray0.length);
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(135);
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      
      double[] doubleArray0 = new double[5];
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNull(cMAESOptimizer1.getGoalType());
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotNull(cMAESOptimizer1);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1904, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
      assertNull(cMAESOptimizer0.getGoalType());
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNull(cMAESOptimizer0.getGoalType());
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertNotNull(microsphereInterpolatingFunction0);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        cMAESOptimizer1.optimize(1161, microsphereInterpolatingFunction0, goalType0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertNull(cMAESOptimizer0.getGoalType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertNull(cMAESOptimizer0.getGoalType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1903, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      cMAESOptimizer0.optimize(0, microsphereInterpolatingFunction0, goalType0, doubleArray0);
  }
}

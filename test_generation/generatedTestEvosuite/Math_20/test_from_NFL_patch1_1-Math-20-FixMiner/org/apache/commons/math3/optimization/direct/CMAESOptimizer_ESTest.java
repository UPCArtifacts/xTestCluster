/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:45:56 GMT 2021
 */

package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 30000;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 145, 723, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(0, microsphereInterpolatingFunction0, goalType0, doubleArray0[0]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer((-15), doubleArray1, (-15), 2004, true, 12, (-15), cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNull(cMAESOptimizer0.getGoalType());
      assertNull(cMAESOptimizer1.getGoalType());
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer1.optimize(1019, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[] doubleArray0 = new double[1];
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1437.6284, (-15));
      assertNotNull(simpleValueChecker0);
      assertEquals(1437.6284, simpleValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals((-15.0), simpleValueChecker0.getAbsoluteThreshold(), 0.01);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(2, doubleArray0, 17, 0, false, (-344), 16, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true, simpleValueChecker0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(1437.6284, simpleValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals((-15.0), simpleValueChecker0.getAbsoluteThreshold(), 0.01);
      assertNull(cMAESOptimizer1.getGoalType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 30000;
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(10, doubleArray1, 10, 2018, true, 12, 10, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNull(cMAESOptimizer0.getGoalType());
      assertNull(cMAESOptimizer1.getGoalType());
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(37, microsphereInterpolatingFunction0, goalType0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(pointValuePair0);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 30000;
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(4, doubleArray1, 4, 2004, true, 12, 4, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNull(cMAESOptimizer0.getGoalType());
      assertNull(cMAESOptimizer1.getGoalType());
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(1574, microsphereInterpolatingFunction0, goalType0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(pointValuePair0);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
      
      List<Double> list0 = cMAESOptimizer1.getStatisticsFitnessHistory();
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(list0);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 882, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(882, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(pointValuePair0);
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(632);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNull(cMAESOptimizer1.getGoalType());
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 632, 1497, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2004;
      // Undeclared exception!
      try { 
        cMAESOptimizer1.optimize(632, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(4, doubleArray1, 4, 2004, true, 12, 4, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNull(cMAESOptimizer0.getGoalType());
      assertNull(cMAESOptimizer1.getGoalType());
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = microsphereInterpolatingFunction0.value(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(1574, microsphereInterpolatingFunction0, goalType0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertNotNull(pointValuePair0);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
      
      System.setCurrentTimeMillis(37);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 30000;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(4, doubleArray1, 4, 2004, true, 12, 4, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(cMAESOptimizer1);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertNull(cMAESOptimizer0.getGoalType());
      assertNull(cMAESOptimizer1.getGoalType());
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {30000.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer1.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 30,000 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertTrue(CMAESOptimizer.DEFAULT_ISACTIVECMA);
      assertEquals(0, CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);
      assertEquals(0, CMAESOptimizer.DEFAULT_DIAGONALONLY);
      assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01);
      assertEquals(30000, CMAESOptimizer.DEFAULT_MAXITERATIONS);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, (-1780), 589, unitSphereRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(779, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, (double[]) null);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 30000;
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(4, doubleArray1);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(1574, microsphereInterpolatingFunction0, goalType0, doubleArray1);
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(4, doubleArray1, 4, 2004, true, 12, 4, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(1019, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(4, doubleArray1);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 37, 0, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(1574, microsphereInterpolatingFunction0, goalType0, doubleArray1);
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
      PointValuePair pointValuePair1 = cMAESOptimizer0.doOptimize();
      assertFalse(pointValuePair1.equals((Object)pointValuePair0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(0, list0.size());
  }
}

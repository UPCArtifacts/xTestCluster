/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:17:36 GMT 2021
 */

package org.apache.commons.math.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1891.19094, relationship0, openMapRealVector0, (-337.97137756157565));
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList0.contains(linearConstraint0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2061.13204);
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1059.09396595811));
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      simplexTableau0.hashCode();
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1891.19094, relationship0, openMapRealVector0, (-337.97137756157565));
      assertEquals(8, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList0.contains(linearConstraint0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(8, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2061.13204);
      assertEquals(8, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1059.09396595811));
      assertEquals(8, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      simplexTableau0.hashCode();
      assertEquals(8, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.hashCode();
      assertEquals(2, doubleArray0.length);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3983.836010696945));
      assertEquals(0, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-3983.836010696945), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2292.0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-3983.836010696945), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2292.0, (-1));
      assertEquals(0, doubleArray0.length);
      assertNotNull(simplexTableau1);
      assertEquals((-3983.836010696945), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals((-3983.836010696945), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2250.5990775615755);
      assertEquals(2, doubleArray0.length);
      assertNotNull(simplexTableau1);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1891.19094, relationship0, openMapRealVector0, (-337.97137756157565));
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList0.contains(linearConstraint0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2061.13204);
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2253.70889662, 1500);
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList1.contains(linearConstraint0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, true, 2061.13204);
      assertEquals(5, doubleArray0.length);
      assertFalse(linkedList1.contains(linearConstraint0));
      assertNotNull(simplexTableau1);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList1.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean1 = simplexTableau0.equals(simplexTableau1);
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertFalse(linkedList1.contains(linearConstraint0));
      assertFalse(boolean1);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList1.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4837.24778);
      assertEquals(4, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2979.11828);
      assertEquals(4, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 4837.24778, 2);
      assertEquals(4, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(10, 2849, 2849);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (10)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1.0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertEquals(1.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList0.contains(linearConstraint0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(1.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(18, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-797.9896392815979));
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(18, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-797.9896392815979), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 5161.426880257998);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(18, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-797.9896392815979), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, linkedList0.size());
      assertEquals(18, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-797.9896392815979), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1323.9509785062226));
      assertEquals(8, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 772.9721217, 0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.initializeColumnLabels();
      assertEquals(8, doubleArray0.length);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1103.75617);
      assertEquals(2, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2670.05023), 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.subtractRow(0, 0, 1860.394589613);
      assertEquals(2, doubleArray0.length);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 871.95);
      assertEquals(7, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 5013.5138);
      assertEquals(7, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.setEntry(0, 0, 1.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), (-1));
      assertEquals(0, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(list0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-337.97137756157565));
      assertEquals(5, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getWidth();
      assertEquals(5, doubleArray0.length);
      assertEquals(8, int0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getSlackVariableOffset();
      assertEquals(9, doubleArray0.length);
      assertEquals(10, int0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 67.909);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(67.909, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 67.909);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(67.909, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getRhsOffset();
      assertEquals(9, doubleArray0.length);
      assertEquals(11, int0);
      assertEquals(67.909, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3983.98050243));
      assertEquals(0, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-3983.98050243), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3983.98050243));
      assertEquals(0, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-3983.98050243), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, int0);
      assertEquals((-3983.98050243), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1636.339);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1636.339, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 402.44, 2281);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(1636.339, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertEquals(9, doubleArray0.length);
      assertEquals(9, int0);
      assertEquals(1636.339, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(45.83521666156615);
      assertEquals(45.83521666156615, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = doubleArray1[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertNotNull(arrayRealVector0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 21.907261279742507);
      assertEquals(2, doubleArray1.length);
      assertNotNull(linearConstraint0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(21.907261279742507, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(2, doubleArray1.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(21.907261279742507, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, int0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 44.22995528595993);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(44.22995528595993, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-518.5756617311841), (-29));
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(44.22995528595993, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumObjectiveFunctions();
      assertEquals(9, doubleArray0.length);
      assertEquals(1, int0);
      assertEquals(44.22995528595993, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1251.31161, 2);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(9, doubleArray0.length);
      assertEquals(9, int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), (-1));
      assertEquals(0, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, int0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1891.19094, relationship0, openMapRealVector0, (-337.97137756157565));
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList0.contains(linearConstraint0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2229.1623175615755), linearConstraint0.getValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2061.13204);
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2253.70889662, 1500);
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(5, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals(2061.13204, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-2919.50294));
      assertEquals((-2919.50294), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      
      double double1 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      assertEquals(11678.01176, double1, 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1980, 1980);
      assertNotNull(arrayRealVector0);
      assertEquals(1980, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      assertEquals((-3920400.0), double0, 0.01);
      assertEquals(1980, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(896, 896);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(896, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1227.0924687));
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(896, openMapRealVector0.getDimension());
      assertEquals((-1227.0924687), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1259.78940389389));
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(896, openMapRealVector0.getDimension());
      assertEquals((-1227.0924687), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      int int0 = simplexTableau0.getHeight();
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(896, openMapRealVector0.getDimension());
      assertEquals((-1227.0924687), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(21.907261279742507, linearConstraint0.getValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(21.907261279742507, linearConstraint0.getValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = simplexTableau0.getEntry(1, 1);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4837.24778);
      assertEquals(4, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2979.11828);
      assertEquals(4, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 4837.24778, 2);
      assertEquals(4, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      Integer integer0 = simplexTableau0.getBasicRow(0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = simplexTableau0.getBasicRow(2);
      assertEquals(2, doubleArray0.length);
      assertNull(integer0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 67.909);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(67.909, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 67.909);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(67.909, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getArtificialVariableOffset();
      assertEquals(9, doubleArray0.length);
      assertEquals(11, int0);
      assertEquals(67.909, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = simplexTableau0.createTableau(false);
      assertEquals(2, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 2498.049557790203);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(2498.049557790203, linearConstraint0.getValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(2498.049557790203, linearConstraint0.getValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3230, 4.6097680405580995E-243);
      assertNotNull(arrayRealVector0);
      assertEquals(3230, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-2356.023708226));
      assertNotNull(linearObjectiveFunction0);
      assertEquals(3230, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-2356.023708226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(3230, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-2356.023708226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      
      // Undeclared exception!
      simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-397));
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-397), openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(47, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (47)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1209.80389062));
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1209.80389062), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1209.80389062));
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals((-1209.80389062), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow(1657);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (1,657)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow((-10), (-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-10)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(896, 896);
      assertNotNull(openMapRealVector0);
      assertEquals(896, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1227.0924687));
      assertNotNull(linearObjectiveFunction0);
      assertEquals(896, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1227.0924687), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1259.78940389389));
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals(896, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1227.0924687), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2.0919226941745448E-8, 2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1030), 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1030), openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1030));
      assertNotNull(linearObjectiveFunction0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1030), openMapRealVector0.getDimension());
      assertEquals((-1030.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 35.032539, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,027 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, 1294.79807916647, 217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector2);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(18, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector2, (-1476.1), relationship0, arrayRealVector2, 1375.4526424840512);
      assertEquals(9, doubleArray0.length);
      assertNotNull(linearConstraint0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(18, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2851.552642484051, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      
      linkedList0.push(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertEquals(1, linkedList0.size());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(18, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2851.552642484051, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1884.731471354074, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.008336750013465571);
      assertEquals(5, doubleArray0.length);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.008336750013465571, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.LEQ;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2177, 2177);
      assertNotNull(openMapRealVector0);
      assertEquals(2177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, (-2450.699999999999));
      assertNotNull(linearConstraint0);
      assertEquals(2177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-2450.699999999999), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(2177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-2450.699999999999), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2630.9523132122126);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1073741823));
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1073741823), openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1073741823));
      assertNotNull(linearObjectiveFunction0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1073741823), openMapRealVector0.getDimension());
      assertEquals((-1.073741823E9), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1879.82));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,073,741,820 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, 3294.59305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), 21.907261279742507);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0E-12, relationship0, openMapRealVector0, 21.907261279742507);
      linkedList0.addFirst(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 21.907261279742507);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 21.907261279742507);
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1892.035788241));
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 44.22995528596);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 44.22995528596);
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 44.22995528596, (-89));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertTrue(list0.contains(linearConstraint0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, true, 21.907261279742507);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507, 11);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 21.907261279742507);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 21.907261279742507);
      linkedList0.push(linearConstraint0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 21.907261279742507);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 21.907261279742507);
      boolean boolean0 = linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      boolean boolean1 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3983.98050243));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3983.98050243));
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2370.75253329151, 855);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3365.4630050552028));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3365.4630050552028));
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1912.6277, 1749);
      boolean boolean0 = simplexTableau1.equals(simplexTableau0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      boolean boolean0 = simplexTableau0.equals(simplexTableau0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      boolean boolean0 = simplexTableau0.equals("h'#;o4+:N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3983.836010696945));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2292.0);
      simplexTableau0.divideRow(0, (-2188.0250629));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 44.22995528595993);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-518.5756617311841), (-29));
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(44.22995528595993, realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1879.82);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1879.82));
      boolean boolean0 = simplexTableau0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 21.907261279742507);
      boolean boolean0 = simplexTableau0.isOptimal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-67.909));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, (-67.909));
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-67.909));
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals((-67.909), realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1209.80389062));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-1209.80389062), relationship0, doubleArray0, (-1209.80389062));
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1209.80389062));
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1251.31161, 2);
      // Undeclared exception!
      try { 
        simplexTableau0.subtractRow(0, 3532, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (3,532)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1048.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      simplexTableau0.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0));
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, 44.22995528596);
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0);
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(1.0, realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 44.22995528595993);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 44.22995528595993);
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-518.5756617311841), (-29));
      simplexTableau0.dropPhase1Objective();
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(44.22995528595993, realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 44.22995528595993);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-518.5756617311841), (-29));
      double[][] doubleArray1 = simplexTableau0.getData();
      assertEquals(1, doubleArray1.length);
  }
}

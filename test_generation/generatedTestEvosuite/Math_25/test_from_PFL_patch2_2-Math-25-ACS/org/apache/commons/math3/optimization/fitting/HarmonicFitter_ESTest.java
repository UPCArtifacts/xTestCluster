/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:18:16 GMT 2021
 */

package org.apache.commons.math3.optimization.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizer;
import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
import org.apache.commons.math3.optimization.PointVectorValuePair;
import org.apache.commons.math3.optimization.fitting.HarmonicFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.apache.commons.math3.random.NormalizedRandomGenerator;
import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HarmonicFitter_ESTest extends HarmonicFitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-2834.51697004015), (-2834.51697004015), 6.283185307179586);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-2834.51697004015), 6.283185307179586, (-2931.98661403834));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(79.702, 9.223372036854776E18, 0.0);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPointArray0[0];
      weightedObservedPointArray0[4] = weightedObservedPointArray0[3];
      weightedObservedPointArray0[5] = weightedObservedPointArray0[0];
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-2834.51697004015), (-2834.51697004015), 6.283185307179586);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-2834.51697004015), 6.283185307179586, (-2931.98661403834));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      weightedObservedPointArray0[2] = weightedObservedPointArray0[1];
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(360.8329, (-478.57), (-478.57));
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-3575.03), 0.0, (-1307.362471569));
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPointArray0[1];
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      weightedObservedPointArray0[4] = weightedObservedPoint0;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorOptimizer0);
      harmonicFitter0.fit(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      doReturn(0, 0, 0, 0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();
      Well44497a well44497a0 = new Well44497a((long) 1834);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1834, well44497a0);
      DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 1834, unitSphereRandomVectorGenerator0);
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      harmonicFitter0.fit(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(3532.472792, 3532.472792, 3532.472792);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      weightedObservedPointArray0[4] = weightedObservedPointArray0[1];
      weightedObservedPointArray0[5] = weightedObservedPointArray0[3];
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      doReturn(0, 0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(3, (NormalizedRandomGenerator) null);
      DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 3, uncorrelatedRandomVectorGenerator0);
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
      // Undeclared exception!
      try { 
        harmonicFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      doReturn(0, 0, 0, 0, 0).when(differentiableMultivariateVectorOptimizer0).getEvaluations();
      Well1024a well1024a0 = new Well1024a();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-2285), well1024a0);
      DifferentiableMultivariateVectorMultiStartOptimizer differentiableMultivariateVectorMultiStartOptimizer0 = new DifferentiableMultivariateVectorMultiStartOptimizer(differentiableMultivariateVectorOptimizer0, 32, unitSphereRandomVectorGenerator0);
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorMultiStartOptimizer0);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        harmonicFitter0.fit(doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.UnitSphereRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[0];
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = null;
      try {
        harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-3575.03), 0.0, (-1307.362471569));
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(8.43527683868743E-8, (-1.4265564976097062E122), (-1.4265564976097062E122));
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorOptimizer0);
      // Undeclared exception!
      try { 
        harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-1.0), (-1.0), (-0.5));
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      weightedObservedPointArray0[4] = weightedObservedPoint0;
      weightedObservedPointArray0[5] = weightedObservedPoint0;
      weightedObservedPointArray0[6] = weightedObservedPoint0;
      weightedObservedPointArray0[7] = weightedObservedPoint0;
      weightedObservedPointArray0[8] = weightedObservedPoint0;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter((DifferentiableMultivariateVectorOptimizer) null);
      // Undeclared exception!
      try { 
        harmonicFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.CurveFitter", e);
      }
  }
}

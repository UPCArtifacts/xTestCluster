/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:58:30 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-30), (byte) (-89), (byte) (-30));
      assertEquals((byte) (-30), byte0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short short0 = NumberUtils.max((short)134, (short)134, (short)57);
      assertEquals((short)134, short0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = NumberUtils.max(1L, 1L, (-2559L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-122), (byte) (-80), (byte)0);
      assertEquals((byte) (-122), byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.min((short)65, (short)43, (short)43);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte) (-122), 1249, (int) (byte) (-122));
      assertEquals((-122), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)3, short0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)3, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1014.8F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1014.8F), float0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1014.8F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-494.4938113955);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-494.4938113955), double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-494.4938113955), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)4;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-249782022);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-249782022), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-249782022), 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[2] = 3206L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 3206L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Search and Replace array lengths don't match: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Search and Replace array lengths don't match:  is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = NumberUtils.toShort("~=tT^", (short) (byte) (-102));
      assertEquals((short) (-102), short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = NumberUtils.toLong("0x", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = NumberUtils.toInt("&%TPuGtNSdL~Fe[D", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (int) (short) (-275));
      assertEquals((-275), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt("5");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = NumberUtils.toDouble(" is not a valid number.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0x", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("31");
      assertEquals((byte)31, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)46;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)31;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)3, short0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)3, (short)46, (short)100, (short)31}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 754L;
      longArray0[1] = 754L;
      longArray0[2] = 754L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(754L, long0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {754L, 754L, 754L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 112;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(112, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {112}, intArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1460);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1460), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-1460)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 261L;
      floatArray0[1] = (float) 261L;
      floatArray0[2] = (float) 261L;
      floatArray0[3] = (float) 261L;
      floatArray0[4] = (float) 261L;
      floatArray0[5] = (float) 261L;
      floatArray0[6] = (float) 261L;
      floatArray0[7] = (float) 261L;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(261.0F, float0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {261.0F, 261.0F, 261.0F, 261.0F, 261.0F, 261.0F, 261.0F, 261.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)64, byte0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)64}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-117);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-117), byte0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-117)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
      
      short short0 = NumberUtils.min((short)0, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = NumberUtils.min((short)238, (short)238, (short)43);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 802L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = NumberUtils.min(2293.7F, 1005.25037F, 2826.9722F);
      assertEquals(1005.25037F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 3819.76018638, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = NumberUtils.min(1927.328, (double) (short)70, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)16, (byte)8, (byte)70);
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)8192;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)8192, short0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)8192}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-18);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-18), short0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-3323L);
      longArray0[1] = (-2627L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-2627L), long0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-3323L), (-2627L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-563);
      intArray0[1] = (-563);
      intArray0[2] = (-563);
      intArray0[3] = (-563);
      intArray0[4] = (-563);
      intArray0[5] = (-563);
      intArray0[6] = (-563);
      intArray0[7] = (-563);
      intArray0[8] = (-1116);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-563), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-563), (-563), (-563), (-563), (-563), (-563), (-563), (-563), (-1116)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2752.699F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-2752.699F), float0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2752.699F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 389.08199897274;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(389.08199897274, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 389.08199897274}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-56.93);
      doubleArray0[1] = (double) (-2116.7327F);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-56.93), double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-56.93), (-2116.732666015625)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-55), byte0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-944), (short)0, (short) (-944));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-18), (short) (byte) (-55), (short) (-1667));
      assertEquals((short) (-18), short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = NumberUtils.max((long) 0, (-1100L), (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = NumberUtils.max((-258L), (-258L), (-148L));
      assertEquals((-148L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, (-3954));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = NumberUtils.max((-302), (-302), (-302));
      assertEquals((-302), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short)0, (float) (short)0, (float) (short)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = NumberUtils.max((-29.0F), (-29.0F), (-29.0F));
      assertEquals((-29.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = NumberUtils.max((-1948.03), (-1.0), (-1849.2589924784518));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-117), (byte)0, (byte) (-117));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("2");
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1,60C.nZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("D){[RP[IC]F'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("=inimum abbreviatonIwidth is 4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=in\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("-0X*-K4D[Zd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-*-K4D[Zd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("~TTIaGW%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short short0 = NumberUtils.toShort("Hk^g;Xz*)1@[<zNJ", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0XStrings must not be null", (byte) (-30));
      assertEquals((byte) (-30), byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 483.532);
      assertEquals(483.532, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (-1330.408866));
      assertEquals((-1330.408866), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-1619.4095F));
      assertEquals((-1619.4095F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = NumberUtils.toFloat("Aborting to protect against StackOverflowError - oYtput of one loop is the input of another", 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = NumberUtils.toLong("IE0ukv]R", (-586L));
      assertEquals((-586L), long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = NumberUtils.toInt("=v`q,vk~+rk`", (int) (byte)70);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--0Xorg.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("$aA2YVgi?^v9=a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xa)MN'rkd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1e/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-117), (byte)108, (byte)108);
      assertEquals((byte)108, byte0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-89), (byte) (-89), (byte) (-24));
      assertEquals((byte) (-24), byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-15), (short)43, (short)1209);
      assertEquals((short)1209, short0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = NumberUtils.max((short)48, (short)27, (short)48);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = NumberUtils.max((-3954), (-3954), 108);
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = NumberUtils.max(20, 5208, 75);
      assertEquals(5208, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short)3338, (-2291), (-1970));
      assertEquals(3338, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = NumberUtils.max(520L, 587L, 5035L);
      assertEquals(5035L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)1, (byte)1, (byte) (-63));
      assertEquals((byte) (-63), byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)66, (byte)0, (byte)114);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-1), (byte) (-1), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short short0 = NumberUtils.min((short)27, (short)5, (short) (-207));
      assertEquals((short) (-207), short0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = NumberUtils.min(Integer.MAX_VALUE, 3, 952);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, (-306));
      assertEquals((-306), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = NumberUtils.min(455L, 0L, 551L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 1L, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 3638.299F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(3638.299F, float0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3638.299F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-537.772734);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)57;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)57, byte0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3758);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 2080;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2080, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (byte)76;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(76L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1022.0962F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1022.0962F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1227.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-2355);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2355), short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 68;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-538L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-538L), long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        NumberUtils.createNumber("J}PY35{:;*;e/P41");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";Rl^<:,>y}tEGGp`ql");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;Rl^<:,>y}tEGGp`ql is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        NumberUtils.createNumber("44p4l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 44p4l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        NumberUtils.createNumber("af");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // af is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        NumberUtils.createNumber("a)MN'rkd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // a)MN'rkd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      try { 
        NumberUtils.createNumber("] L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ] L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&%TPuGtNSdL~Fe[D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &%TPuGtNSdL~Fe[D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        NumberUtils.createNumber("O<$1cFFjCN)E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // O<$1cFFjCN)E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&DZ.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        NumberUtils.createNumber("V37");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"V37\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        NumberUtils.createNumber("T}K4/xlk^4\"xzF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // T}K4/xlk^4\"xzF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".*=%v>`{wU#!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .*=%v>`{wU#! is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X/u/6 Q#~-@N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-/u/6 Q#~-@N\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0XBQXe}-W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BQXe}-W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0x0");
      assertEquals(0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        NumberUtils.createNumber("2RWRf0E '(,O_)z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2RWRf0E '(,O_)z is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)3327);
      assertEquals((short)3327, short0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)32);
      assertEquals((byte)32, byte0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 43);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short short0 = NumberUtils.toShort("#D+obG[E1J2XHwXs?5");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float float0 = NumberUtils.toFloat("3");
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = NumberUtils.toInt("8=8*n8[[2Vp~1");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 2259.0, (double) 0.0F);
      assertEquals(2259.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(0, 0, (int) numberUtils0.INTEGER_ZERO);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double double0 = NumberUtils.min((double) (-2198L), (-1.0), 0.0);
      assertEquals((-2198.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      float float0 = NumberUtils.min((-3010.5752F), (-2749.92F), (-2139.8198F));
      assertEquals((-3010.5752F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float float0 = NumberUtils.max(1.0F, (-54.69349F), 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:12:54 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicMonthOfYearDateTimeField_ESTest extends BasicMonthOfYearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 560);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      int int0 = basicMonthOfYearDateTimeField0.getLeapAmount((-12219292799966L));
      assertEquals(0, int0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-1));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      
      long long0 = basicMonthOfYearDateTimeField0.addWrapField((long) (-836), 1761);
      assertEquals((-7948800836L), long0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(1, (-145711094400000L));
      assertEquals(60024L, long0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) localDateTime0, (-3891), intArray0, (-836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add((-737L), 133L);
      assertEquals(323395199263L, long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTime dateTime0 = new DateTime(4440L, (DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(4440L, dateTime0.getMillis());
      
      Duration duration0 = new Duration(2409L, (-12219292800000L));
      assertNotNull(duration0);
      assertEquals((-12219292802L), duration0.getStandardSeconds());
      assertEquals((-203654880L), duration0.getStandardMinutes());
      assertEquals((-3394248L), duration0.getStandardHours());
      assertEquals((-141427L), duration0.getStandardDays());
      assertEquals((-12219292802409L), duration0.getMillis());
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(4440L, dateTime0.getMillis());
      assertEquals((-12219292802L), duration0.getStandardSeconds());
      assertEquals((-203654880L), duration0.getStandardMinutes());
      assertEquals((-3394248L), duration0.getStandardHours());
      assertEquals((-141427L), duration0.getStandardDays());
      assertEquals((-12219292802409L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 158);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.set(0L, 1);
      assertEquals(0L, long0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.set((-1502L), 13);
      assertEquals(21859198498L, long0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-1));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      
      long long0 = basicMonthOfYearDateTimeField0.roundFloor(1556L);
      assertEquals(0L, long0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.roundFloor(21859200000L);
      assertEquals(21859200000L, long0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.remainder((-53184211200000L));
      assertEquals(0L, long0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 158);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-3474140625L), (-3832L));
      assertEquals((-1L), long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      
      int int0 = basicMonthOfYearDateTimeField0.get(1);
      assertEquals(4, int0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = gJMonthOfYearDateTimeField0.addWrapField((long) 0, 60);
      assertEquals(0L, long0);
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 12);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      
      long long0 = basicMonthOfYearDateTimeField0.addWrapField((long) 12, 12);
      assertEquals(12L, long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int[] intArray0 = gJMonthOfYearDateTimeField0.add((ReadablePartial) localTime0, 29, (int[]) null, 0);
      assertNull(intArray0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(4, localTime0.size());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add(0L, 0L);
      assertEquals(0L, long0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.add(2678399676L, 1);
      assertEquals(5270399676L, long0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.set((long) 1, 2911);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2911 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) copticChronology0);
      assertNotNull(yearMonth0);
      assertEquals(6, yearMonth0.getMonthOfYear());
      assertEquals(1730, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, CopticChronology.AM);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((ReadablePartial) yearMonth0, 717, intArray0, (-1595));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((ReadablePartial) null, 1, (int[]) null, 1058);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add((-9223372036854775808L), (-2346L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = null;
      try {
        basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField((BasicChronology) null, 539);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = gJMonthOfYearDateTimeField0.isLeap(1);
      assertFalse(boolean0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(10000000000000L);
      assertFalse(boolean0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2670L));
      assertNotNull(duration0);
      assertEquals((-64080L), duration0.getStandardHours());
      assertEquals((-230688000L), duration0.getStandardSeconds());
      assertEquals((-230688000000L), duration0.getMillis());
      assertEquals((-2670L), duration0.getStandardDays());
      assertEquals((-3844800L), duration0.getStandardMinutes());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(99);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.099", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.099", dateTimeZone0.getID());
      
      DateTime dateTime0 = new DateTime((-3095L), dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("+00:00:00.099", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.099", dateTimeZone0.getID());
      assertEquals((-3095L), dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      assertNotNull(period0);
      assertEquals((-64080L), duration0.getStandardHours());
      assertEquals((-230688000L), duration0.getStandardSeconds());
      assertEquals((-230688000000L), duration0.getMillis());
      assertEquals((-2670L), duration0.getStandardDays());
      assertEquals((-3844800L), duration0.getStandardMinutes());
      assertEquals("+00:00:00.099", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.099", dateTimeZone0.getID());
      assertEquals((-3095L), dateTime0.getMillis());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add(1891278712L, 2147483644);
      assertEquals((-5213033025705521288L), long0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.add((-2756L), (-380));
      assertEquals((-922924802756L), long0);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Duration duration0 = Duration.millis(7L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(7L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gregorianChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392332400000L, dateMidnight0.getMillis());
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(period0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(7L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392332400000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = gJMonthOfYearDateTimeField0.roundFloor(1);
      assertEquals((-1814400000L), long0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      int int0 = basicMonthOfYearDateTimeField0.getLeapAmount((-4542422885645878022L));
      assertEquals(1, int0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-2485));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      
      long long0 = basicMonthOfYearDateTimeField0.set((long) (-2485), 6);
      assertEquals((-15897602485L), long0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(1L, (-3474140625L));
      assertEquals(1L, long0);
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(3777148803370L, (-12219292799961L));
      assertEquals(6589L, long0);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-579L), 1);
      assertEquals(0L, long0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 158);
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-3832L), (-3832L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      try { 
        monthDay0.minusDays(1837);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-955));
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[3];
      int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) yearMonth0, 0, intArray0, 1);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertArrayEquals(new int[] {1, 1, 0}, intArray1);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((ReadablePartial) yearMonth0, 0, intArray0, 352831696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      int[] intArray0 = new int[0];
      gJMonthOfYearDateTimeField0.add((ReadablePartial) yearMonth0, (-1464), intArray0, 0);
      assertEquals(2, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-9));
      long long0 = basicMonthOfYearDateTimeField0.add(2678396168L, 2678396168L);
      assertEquals(7043501611814396168L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((long) 1, 749347202270L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 749347202270
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.add(691200000L, (-12219292799965L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -12219292799965
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((long) 1, (-12219292799965L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -12219292799965
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 158);
      long long0 = basicMonthOfYearDateTimeField0.add((-1L), 2678399357L);
      assertEquals(7043509995379199999L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      long long0 = basicMonthOfYearDateTimeField0.add(1275721978L, (-1871229040L));
      assertEquals((-4542422886250678022L), long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 158);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
      assertEquals("years", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.addWrapField((long) 2147483644, 2147483644);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      int int0 = gJMonthOfYearDateTimeField0.getMaximumValue();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      int int0 = basicMonthOfYearDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.plusMonths((-1393));
      assertEquals(1898, yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
      long long0 = basicMonthOfYearDateTimeField0.remainder(1);
      assertEquals(1814400001L, long0);
  }
}

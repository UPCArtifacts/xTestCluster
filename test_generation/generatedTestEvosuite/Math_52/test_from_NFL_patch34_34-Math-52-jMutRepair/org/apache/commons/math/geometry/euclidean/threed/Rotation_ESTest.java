/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:14:59 GMT 2021
 */

package org.apache.commons.math.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rotation_ESTest extends Rotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Rotation rotation0 = new Rotation((-390.0), (-390.0), (-390.0), (-390.0), false);
      assertEquals((-390.0), rotation0.getQ3(), 0.01);
      assertEquals((-390.0), rotation0.getQ0(), 0.01);
      assertEquals((-390.0), rotation0.getQ1(), 0.01);
      assertEquals((-390.0), rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals((-390.0), rotation0.getQ3(), 0.01);
      assertEquals((-390.0), rotation0.getQ0(), 0.01);
      assertEquals((-390.0), rotation0.getQ1(), 0.01);
      assertEquals((-390.0), rotation0.getQ2(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.5773502691896257, vector3D0.getNormInf(), 0.01);
      assertEquals((-0.5773502691896257), vector3D0.getZ(), 0.01);
      assertEquals(1.7320508075688772, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-0.5773502691896257), vector3D0.getY(), 0.01);
      assertEquals((-0.5773502691896257), vector3D0.getX(), 0.01);
      assertNotNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-826.745556979), vector3D0, 0.0, vector3D0, (-826.745556979), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D2 = rotation0.getAxis();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, vector3D2.getX(), 0.01);
      assertFalse(vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNormInf(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01);
      assertFalse(vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNorm1(), 0.01);
      assertEquals(1.0, vector3D2.getZ(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, 0.25);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, 1.997844754509471E-9);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 3x2 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, 636.622277387625);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 8x6 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, (-606.9911591));
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals((-0.32582903021367643), rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-826.745556979), vector3D0, 0.0, vector3D0, (-826.745556979), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertFalse(vector3D1.isNaN());
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertFalse(vector3D1.isNaN());
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.revert();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertFalse(vector3D1.isNaN());
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals((-1.0), rotation1.getQ3(), 0.01);
      assertEquals(-0.0, rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(-0.0, rotation1.getQ2(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.revert();
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ3();
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Rotation rotation0 = new Rotation(461.6964225024054, 0.0, (-2834.3603812809984), 162.1068663897, false);
      assertEquals(461.6964225024054, rotation0.getQ0(), 0.01);
      assertEquals((-2834.3603812809984), rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(162.1068663897, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ3();
      assertEquals(461.6964225024054, rotation0.getQ0(), 0.01);
      assertEquals((-2834.3603812809984), rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(162.1068663897, rotation0.getQ3(), 0.01);
      assertEquals(162.1068663897, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ2();
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Rotation rotation0 = new Rotation(510.317964, 510.317964, 0.1, 0.1, true);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ2();
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(1.3856199810565598E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertEquals("ZYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = new Rotation(rotationOrder0, 1549.5187539716023, 1549.5187539716023, 1549.5187539716023);
      assertEquals("ZYZ", rotationOrder0.toString());
      assertEquals(0.2640544141940124, rotation0.getQ0(), 0.01);
      assertEquals((-0.2286091596338684), rotation0.getQ3(), 0.01);
      assertEquals((-5.551115123125783E-17), rotation0.getQ1(), 0.01);
      assertEquals((-0.9370235421141527), rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ2();
      assertEquals("ZYZ", rotationOrder0.toString());
      assertEquals(0.2640544141940124, rotation0.getQ0(), 0.01);
      assertEquals((-0.2286091596338684), rotation0.getQ3(), 0.01);
      assertEquals((-5.551115123125783E-17), rotation0.getQ1(), 0.01);
      assertEquals((-0.9370235421141527), rotation0.getQ2(), 0.01);
      assertEquals((-0.9370235421141527), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ1();
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertEquals("ZYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = new Rotation(rotationOrder0, 1549.5187539716023, 1549.5187539716023, 0.5);
      assertEquals("ZYZ", rotationOrder0.toString());
      assertEquals(0.19916266082934253, rotation0.getQ0(), 0.01);
      assertEquals(0.2869165663659434, rotation0.getQ3(), 0.01);
      assertEquals(0.9316858729515879, rotation0.getQ1(), 0.01);
      assertEquals(0.09987268204364458, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ1();
      assertEquals("ZYZ", rotationOrder0.toString());
      assertEquals(0.19916266082934253, rotation0.getQ0(), 0.01);
      assertEquals(0.2869165663659434, rotation0.getQ3(), 0.01);
      assertEquals(0.9316858729515879, rotation0.getQ1(), 0.01);
      assertEquals(0.09987268204364458, rotation0.getQ2(), 0.01);
      assertEquals(0.9316858729515879, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-826.745556979), vector3D0, 0.0, vector3D0, (-826.745556979), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ0();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1512.0), (-1512.0), 1663.29678611074, (-3056.0), true);
      assertEquals((-0.3702372097107719), rotation0.getQ0(), 0.01);
      assertEquals((-0.3702372097107719), rotation0.getQ1(), 0.01);
      assertEquals(0.40728463029797285, rotation0.getQ2(), 0.01);
      assertEquals((-0.7483101275635707), rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getQ0();
      assertEquals((-0.3702372097107719), rotation0.getQ0(), 0.01);
      assertEquals((-0.3702372097107719), rotation0.getQ1(), 0.01);
      assertEquals(0.40728463029797285, rotation0.getQ2(), 0.01);
      assertEquals((-0.7483101275635707), rotation0.getQ3(), 0.01);
      assertEquals((-0.3702372097107719), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertEquals("XYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(8.0E298, 1.997844754509471E-9, 1.997844754509471E-9, 2.479773539153719E-5, false);
      assertEquals(2.479773539153719E-5, rotation0.getQ3(), 0.01);
      assertEquals(8.0E298, rotation0.getQ0(), 0.01);
      assertEquals(1.997844754509471E-9, rotation0.getQ1(), 0.01);
      assertEquals(1.997844754509471E-9, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(2.479773539153719E-5, rotation0.getQ3(), 0.01);
      assertEquals(8.0E298, rotation0.getQ0(), 0.01);
      assertEquals(1.997844754509471E-9, rotation0.getQ1(), 0.01);
      assertEquals(1.997844754509471E-9, rotation0.getQ2(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01);
      assertEquals((-3.196551607215154E290), vector3D1.getZ(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormInf(), 0.01);
      assertEquals(3.96763766264595E294, vector3D1.getX(), 0.01);
      assertTrue(vector3D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Rotation rotation0 = new Rotation(352.500308713212, 352.500308713212, 0.5039018405998233, (-3.940510424527919E-20), false);
      assertEquals(0.5039018405998233, rotation0.getQ2(), 0.01);
      assertEquals((-3.940510424527919E-20), rotation0.getQ3(), 0.01);
      assertEquals(352.500308713212, rotation0.getQ0(), 0.01);
      assertEquals(352.500308713212, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals(0.5039018405998233, rotation0.getQ2(), 0.01);
      assertEquals((-3.940510424527919E-20), rotation0.getQ3(), 0.01);
      assertEquals(352.500308713212, rotation0.getQ0(), 0.01);
      assertEquals(352.500308713212, rotation0.getQ1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.1178731765423128E-22, vector3D0.getZ(), 0.01);
      assertEquals((-0.9999989782556972), vector3D0.getX(), 0.01);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01);
      assertEquals((-0.001429506055130731), vector3D0.getY(), 0.01);
      assertEquals(1.0014284843108279, vector3D0.getNorm1(), 0.01);
      assertEquals(0.9999989782556972, vector3D0.getNormInf(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.5039018405998233, rotation0.getQ2(), 0.01);
      assertEquals((-3.940510424527919E-20), rotation0.getQ3(), 0.01);
      assertEquals(352.500308713212, rotation0.getQ0(), 0.01);
      assertEquals(352.500308713212, rotation0.getQ1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.1178731765423128E-22, vector3D0.getZ(), 0.01);
      assertEquals((-0.9999989782556972), vector3D0.getX(), 0.01);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01);
      assertEquals((-0.001429506055130731), vector3D0.getY(), 0.01);
      assertEquals(1.0014284843108279, vector3D0.getNorm1(), 0.01);
      assertEquals(0.9999989782556972, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(497735.3713609049, vector3D1.getNorm1(), 0.01);
      assertEquals(2.470342267793978E11, vector3D1.getNormSq(), 0.01);
      assertEquals(497024.8705729202, vector3D1.getNormInf(), 0.01);
      assertEquals(5.55611338580602E-17, vector3D1.getZ(), 0.01);
      assertEquals((-710.5007879846896), vector3D1.getY(), 0.01);
      assertEquals((-497024.8705729202), vector3D1.getX(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(881.746, 0.625);
      assertEquals(0.7000076252723616, vector3D0.getY(), 0.01);
      assertEquals(0.7000076252723616, vector3D0.getNormInf(), 0.01);
      assertEquals((-0.4094514693564835), vector3D0.getX(), 0.01);
      assertEquals(0.5850972729404622, vector3D0.getZ(), 0.01);
      assertEquals(1.6945563675693074, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertEquals(0.7000076252723616, vector3D0.getY(), 0.01);
      assertEquals(0.7000076252723616, vector3D0.getNormInf(), 0.01);
      assertEquals((-0.4094514693564835), vector3D0.getX(), 0.01);
      assertEquals(0.5850972729404622, vector3D0.getZ(), 0.01);
      assertEquals(1.6945563675693074, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.7000076252723616, vector3D0.getY(), 0.01);
      assertEquals(0.7000076252723616, vector3D0.getNormInf(), 0.01);
      assertEquals((-0.4094514693564835), vector3D0.getX(), 0.01);
      assertEquals(0.5850972729404622, vector3D0.getZ(), 0.01);
      assertEquals(1.6945563675693074, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      
      Vector3D vector3D2 = rotation0.applyTo(vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertEquals(0.7000076252723616, vector3D0.getY(), 0.01);
      assertEquals(0.7000076252723616, vector3D0.getNormInf(), 0.01);
      assertEquals((-0.4094514693564835), vector3D0.getX(), 0.01);
      assertEquals(0.5850972729404622, vector3D0.getZ(), 0.01);
      assertEquals(1.6945563675693074, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertFalse(vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getNorm1(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
      assertFalse(vector3D2.isNaN());
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.applyTo(rotation0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ3(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.16666666666666666, 0.0, (-164.4), 0.0, true);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-0.9999994861178383), rotation0.getQ2(), 0.01);
      assertEquals(0.0010137869891705578, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation1 = new Rotation(rotationOrder0, 0.0, 0.9999999999, 0.9999999999);
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.2298488470238566, rotation1.getQ2(), 0.01);
      assertEquals(0.7701511529761434, rotation1.getQ0(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ3(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ1(), 0.01);
      assertNotNull(rotation1);
      
      Rotation rotation2 = rotation1.applyTo(rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-0.9999994861178383), rotation0.getQ2(), 0.01);
      assertEquals(0.0010137869891705578, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.2298488470238566, rotation1.getQ2(), 0.01);
      assertEquals(0.7701511529761434, rotation1.getQ0(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ3(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ1(), 0.01);
      assertEquals((-0.7699177394386155), rotation2.getQ2(), 0.01);
      assertEquals((-0.4211618123365228), rotation2.getQ3(), 0.01);
      assertEquals(0.4203087400004148, rotation2.getQ1(), 0.01);
      assertEquals(0.23062949812721614, rotation2.getQ0(), 0.01);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotNull(rotation2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.16666666666666666, 0.0, (-164.4), 0.0, true);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals((-0.9999994861178383), rotation0.getQ2(), 0.01);
      assertEquals(0.0010137869891705578, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation1 = new Rotation(rotationOrder0, 0.0, 0.9999999999, 0.9999999999);
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.7701511529761434, rotation1.getQ0(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ1(), 0.01);
      assertEquals(0.2298488470238566, rotation1.getQ2(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ3(), 0.01);
      assertNotNull(rotation1);
      
      Rotation rotation2 = rotation0.IDENTITY.applyTo(rotation1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals((-0.9999994861178383), rotation0.getQ2(), 0.01);
      assertEquals(0.0010137869891705578, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.7701511529761434, rotation1.getQ0(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ1(), 0.01);
      assertEquals(0.2298488470238566, rotation1.getQ2(), 0.01);
      assertEquals((-0.42073549237693314), rotation1.getQ3(), 0.01);
      assertEquals((-0.42073549237693314), rotation2.getQ1(), 0.01);
      assertEquals(0.2298488470238566, rotation2.getQ2(), 0.01);
      assertEquals(0.7701511529761434, rotation2.getQ0(), 0.01);
      assertEquals((-0.42073549237693314), rotation2.getQ3(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation1);
      assertNotNull(rotation2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-826.745556979), vector3D0, 0.0, vector3D0, (-826.745556979), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(1.0, rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertNotNull(rotation1);
      
      Rotation rotation2 = rotation1.applyTo(rotation0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(1.0, rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(0.0, rotation2.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals((-1.0), rotation2.getQ3(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation1);
      assertNotNull(rotation2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-826.745556979), vector3D0, 0.0, vector3D0, (-826.745556979), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.applyTo(rotation0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals((-1.0), rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Rotation rotation0 = new Rotation(510.317964, 510.317964, 0.1, 0.1, true);
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals((-1.95956253188286E-4), vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.9999999616011461, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-0.9999999616011461), vector3D0.getX(), 0.01);
      assertEquals((-1.95956253188286E-4), vector3D0.getY(), 0.01);
      assertEquals(1.0003918741075228, vector3D0.getNorm1(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals((-1.95956253188286E-4), vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.9999999616011461, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-0.9999999616011461), vector3D0.getX(), 0.01);
      assertEquals((-1.95956253188286E-4), vector3D0.getY(), 0.01);
      assertEquals(1.0003918741075228, vector3D0.getNorm1(), 0.01);
      assertEquals(0.9999999616011457, vector3D1.getNormInf(), 0.01);
      assertEquals((-1.9595625318828593E-4), vector3D1.getZ(), 0.01);
      assertEquals(0.9999999999999992, vector3D1.getNormSq(), 0.01);
      assertEquals(1.0003918741075224, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals((-1.9595625318828593E-4), vector3D1.getY(), 0.01);
      assertEquals((-0.9999999616011457), vector3D1.getX(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(881.746, 0.625);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.7000076252723616, vector3D0.getY(), 0.01);
      assertEquals(1.6945563675693074, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.5850972729404622, vector3D0.getZ(), 0.01);
      assertEquals((-0.4094514693564835), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.7000076252723616, vector3D0.getNormInf(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.7000076252723616, vector3D0.getY(), 0.01);
      assertEquals(1.6945563675693074, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.5850972729404622, vector3D0.getZ(), 0.01);
      assertEquals((-0.4094514693564835), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.7000076252723616, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.7000076252723616, vector3D0.getY(), 0.01);
      assertEquals(1.6945563675693074, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.5850972729404622, vector3D0.getZ(), 0.01);
      assertEquals((-0.4094514693564835), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.7000076252723616, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.7000076252723616, vector3D1.getNormInf(), 0.01);
      assertEquals(0.7000076252723616, vector3D1.getY(), 0.01);
      assertEquals((-0.4094514693564835), vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(0.5850972729404622, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(1.6945563675693074, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertTrue(vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01);
      assertTrue(vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, 5720.0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01);
      assertTrue(vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(0.40786188879546736, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.applyInverseTo(rotation0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01);
      assertTrue(vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(0.40786188879546736, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ3(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Rotation rotation0 = new Rotation(510.317964, 510.317964, 0.1, 0.1, true);
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.revert();
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ2(), 0.01);
      assertEquals((-0.7071067676105021), rotation1.getQ0(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation1.getQ1(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
      
      Rotation rotation2 = rotation0.applyInverseTo(rotation1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ2(), 0.01);
      assertEquals((-0.7071067676105021), rotation1.getQ0(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation1.getQ1(), 0.01);
      assertEquals((-1.9595625318828583E-4), rotation2.getQ3(), 0.01);
      assertEquals((-3.839885459600012E-8), rotation2.getQ0(), 0.01);
      assertEquals((-1.9595625318828583E-4), rotation2.getQ2(), 0.01);
      assertEquals((-0.9999999616011451), rotation2.getQ1(), 0.01);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation1);
      assertNotNull(rotation2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-826.745556979), vector3D0, 0.0, vector3D0, (-826.745556979), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(1.0, rotation1.getQ0(), 0.01);
      assertNotNull(rotation1);
      
      Rotation rotation2 = rotation0.IDENTITY.applyTo(rotation1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(1.0, rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ3(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(1.0, rotation2.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotNull(rotation2);
      
      Rotation rotation3 = rotation0.applyInverseTo(rotation2);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(rotation3.equals((Object)rotation1));
      assertFalse(rotation3.equals((Object)rotation0));
      assertFalse(rotation3.equals((Object)rotation2));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(1.0, rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ3(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(1.0, rotation2.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertEquals((-1.0), rotation3.getQ3(), 0.01);
      assertEquals(0.0, rotation3.getQ1(), 0.01);
      assertEquals(-0.0, rotation3.getQ0(), 0.01);
      assertEquals(0.0, rotation3.getQ2(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(rotation0, rotation3);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation3);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation2, rotation3);
      assertNotSame(rotation3, rotation1);
      assertNotSame(rotation3, rotation0);
      assertNotSame(rotation3, rotation2);
      assertNotNull(rotation3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Rotation.distance((Rotation) null, (Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      // Undeclared exception!
      try { 
        rotation0.applyTo((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      // Undeclared exception!
      try { 
        rotation0.applyTo((Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      // Undeclared exception!
      try { 
        rotation0.applyInverseTo((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      // Undeclared exception!
      try { 
        rotation0.applyInverseTo((Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((double[][]) null, 287.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, (-0.25));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((RotationOrder) null, 0.9775762727063233, 0.9775762727063233, 0.9775762727063233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.1921056801463227E-8, (-1.0), (-0.5), 1.125, true);
      assertEquals(7.516087134880462E-9, rotation0.getQ0(), 0.01);
      assertEquals((-0.31524416249564025), rotation0.getQ2(), 0.01);
      assertEquals((-0.6304883249912805), rotation0.getQ1(), 0.01);
      assertEquals(0.7092993656151906, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.revert();
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(7.516087134880462E-9, rotation0.getQ0(), 0.01);
      assertEquals((-0.31524416249564025), rotation0.getQ2(), 0.01);
      assertEquals((-0.6304883249912805), rotation0.getQ1(), 0.01);
      assertEquals(0.7092993656151906, rotation0.getQ3(), 0.01);
      assertEquals((-7.516087134880462E-9), rotation1.getQ0(), 0.01);
      assertEquals(0.7092993656151906, rotation1.getQ3(), 0.01);
      assertEquals((-0.6304883249912805), rotation1.getQ1(), 0.01);
      assertEquals((-0.31524416249564025), rotation1.getQ2(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
      
      double double0 = rotation1.getAngle();
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(7.516087134880462E-9, rotation0.getQ0(), 0.01);
      assertEquals((-0.31524416249564025), rotation0.getQ2(), 0.01);
      assertEquals((-0.6304883249912805), rotation0.getQ1(), 0.01);
      assertEquals(0.7092993656151906, rotation0.getQ3(), 0.01);
      assertEquals((-7.516087134880462E-9), rotation1.getQ0(), 0.01);
      assertEquals(0.7092993656151906, rotation1.getQ3(), 0.01);
      assertEquals((-0.6304883249912805), rotation1.getQ1(), 0.01);
      assertEquals((-0.31524416249564025), rotation1.getQ2(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals(3.141592638557619, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.revert();
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals((-1.0), rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
      
      double double0 = rotation1.getAngle();
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals((-1.0), rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = new Rotation(rotationOrder0, 0.0, 0.9999999999, 0.9999999999);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.7701511529761434, rotation0.getQ0(), 0.01);
      assertEquals((-0.42073549237693314), rotation0.getQ3(), 0.01);
      assertEquals(0.2298488470238566, rotation0.getQ2(), 0.01);
      assertEquals((-0.42073549237693314), rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getAngle();
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.7701511529761434, rotation0.getQ0(), 0.01);
      assertEquals((-0.42073549237693314), rotation0.getQ3(), 0.01);
      assertEquals(0.2298488470238566, rotation0.getQ2(), 0.01);
      assertEquals((-0.42073549237693314), rotation0.getQ1(), 0.01);
      assertEquals(1.383436481310171, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-826.745556979), vector3D0, 0.0, vector3D0, (-826.745556979), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = rotation0.getAngle();
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1653.491113958, vector3D1.getX(), 0.01);
      assertEquals(1653.491113958, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1653.491113958, vector3D1.getNormInf(), 0.01);
      assertEquals(2734032.8639380676, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.16666666666666666, 0.0, (-164.4), 0.0, true);
      assertEquals(0.0010137869891705578, rotation0.getQ0(), 0.01);
      assertEquals((-0.9999994861178383), rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D0 = Vector3D.ZERO;
      assertEquals(0.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0010137869891705578, rotation0.getQ0(), 0.01);
      assertEquals((-0.9999994861178383), rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Rotation rotation0 = new Rotation(510.317964, 510.317964, 0.1, 0.1, true);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.applyInverseTo(rotation0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals((-0.9999999999999998), rotation1.getQ0(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, (-3124.24694));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      try { 
        rotation0.getAngles((RotationOrder) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D((-832.2703521703726), vector3D0, 0.6219591150026421, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(831.64839305537, vector3D1.getZ(), 0.01);
      assertEquals(691639.0496715792, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(831.64839305537, vector3D1.getNormInf(), 0.01);
      assertEquals(831.64839305537, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(831.64839305537, vector3D1.getZ(), 0.01);
      assertEquals(691639.0496715792, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(831.64839305537, vector3D1.getNormInf(), 0.01);
      assertEquals(831.64839305537, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals((-1.0), rotation0.getQ2(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      try { 
        rotation0.getAngles((RotationOrder) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertEquals("ZXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D((-832.2703521703726), vector3D0, 0.6219591150026421, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(831.64839305537, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(691639.0496715792, vector3D1.getNormSq(), 0.01);
      assertEquals(831.64839305537, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(831.64839305537, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(831.64839305537, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(691639.0496715792, vector3D1.getNormSq(), 0.01);
      assertEquals(831.64839305537, vector3D1.getNorm1(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(831.64839305537, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), rotation0.getQ2(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertEquals("ZXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertTrue(vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertTrue(vector3D0.isInfinite());
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertEquals("ZXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertTrue(vector3D0.isInfinite());
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(0.6219591150026421, vector3D0, (-832.2703521703726), vector3D0, 0.6219591150026421, vector3D0, (-832.2703521703726), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1663.29678611074, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1663.29678611074, vector3D1.getNormInf(), 0.01);
      assertEquals(1663.29678611074, vector3D1.getNorm1(), 0.01);
      assertEquals(2766556.1986863166, vector3D1.getNormSq(), 0.01);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1663.29678611074, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1663.29678611074, vector3D1.getNormInf(), 0.01);
      assertEquals(1663.29678611074, vector3D1.getNorm1(), 0.01);
      assertEquals(2766556.1986863166, vector3D1.getNormSq(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertEquals("YZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertEquals("YXY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertFalse(vector3D0.isInfinite());
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertFalse(vector3D0.isInfinite());
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertEquals("ZYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertFalse(vector3D0.isInfinite());
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals("ZYZ", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertEquals("XZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals("XZX", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertEquals("XZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertEquals("XYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals("XYX", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.MINUS_K;
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01);
      assertEquals(0.7071067811865475, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertEquals("XYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertEquals("XYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertEquals("ZYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = new Rotation((-3441.0), (-3441.0), (-3441.0), (-3441.0), true);
      assertEquals((-0.5), rotation0.getQ0(), 0.01);
      assertEquals((-0.5), rotation0.getQ1(), 0.01);
      assertEquals((-0.5), rotation0.getQ3(), 0.01);
      assertEquals((-0.5), rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertEquals("ZYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = new Rotation(0.041666666666666664, 0.041666666666666664, 0.041666666666666664, (-849.09), false);
      assertEquals(0.041666666666666664, rotation0.getQ0(), 0.01);
      assertEquals((-849.09), rotation0.getQ3(), 0.01);
      assertEquals(0.041666666666666664, rotation0.getQ1(), 0.01);
      assertEquals(0.041666666666666664, rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Rotation rotation0 = new Rotation(1663.29678611074, (-3056.0), 1663.29678611074, (-0.1), true);
      assertEquals((-2.5930547382520845E-5), rotation0.getQ3(), 0.01);
      assertEquals(0.4313019612343918, rotation0.getQ0(), 0.01);
      assertEquals(0.4313019612343918, rotation0.getQ2(), 0.01);
      assertEquals((-0.792437528009837), rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertEquals("ZYX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {(-0.8277520392514255), (-0.3812530705498636), 2.3138406143383676}, doubleArray0, 0.01);
      assertEquals((-2.5930547382520845E-5), rotation0.getQ3(), 0.01);
      assertEquals(0.4313019612343918, rotation0.getQ0(), 0.01);
      assertEquals(0.4313019612343918, rotation0.getQ2(), 0.01);
      assertEquals((-0.792437528009837), rotation0.getQ1(), 0.01);
      assertEquals("ZYX", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Rotation rotation0 = new Rotation((-2317.8876807), (-835.2673912259175), (-1479.04), (-2317.8876807), false);
      assertEquals((-2317.8876807), rotation0.getQ3(), 0.01);
      assertEquals((-835.2673912259175), rotation0.getQ1(), 0.01);
      assertEquals((-2317.8876807), rotation0.getQ0(), 0.01);
      assertEquals((-1479.04), rotation0.getQ2(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertEquals("ZXY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertEquals("ZXY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = new Rotation(1549.5187539716023, 1549.5187539716023, (-0.12502530217170715), 1549.5187539716023, false);
      assertEquals((-0.12502530217170715), rotation0.getQ2(), 0.01);
      assertEquals(1549.5187539716023, rotation0.getQ0(), 0.01);
      assertEquals(1549.5187539716023, rotation0.getQ1(), 0.01);
      assertEquals(1549.5187539716023, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertEquals("ZXY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals("ZXY", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertEquals("YZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals("YZX", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Rotation rotation0 = new Rotation(4292.973158856, (-1.7768936834512967), 4292.973158856, 4292.973158856, false);
      assertEquals(4292.973158856, rotation0.getQ3(), 0.01);
      assertEquals((-1.7768936834512967), rotation0.getQ1(), 0.01);
      assertEquals(4292.973158856, rotation0.getQ2(), 0.01);
      assertEquals(4292.973158856, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertEquals("YZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.494140625, 1.494140625, 0.9999999999, 0.2222222089767456, false);
      assertEquals(0.9999999999, rotation0.getQ2(), 0.01);
      assertEquals(1.494140625, rotation0.getQ0(), 0.01);
      assertEquals(1.494140625, rotation0.getQ1(), 0.01);
      assertEquals(0.2222222089767456, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertEquals("YZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1.0), 0.625, 1.1921056801463227E-8, 0.1, false);
      assertEquals(0.1, rotation0.getQ3(), 0.01);
      assertEquals(0.625, rotation0.getQ1(), 0.01);
      assertEquals(1.1921056801463227E-8, rotation0.getQ2(), 0.01);
      assertEquals((-1.0), rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Rotation rotation0 = new Rotation((-2.4071453912782196E7), (-489.865282319), 0.5, (-489.865282319), false);
      assertEquals(0.5, rotation0.getQ2(), 0.01);
      assertEquals((-489.865282319), rotation0.getQ1(), 0.01);
      assertEquals((-2.4071453912782196E7), rotation0.getQ0(), 0.01);
      assertEquals((-489.865282319), rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertEquals("YXZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Rotation rotation0 = new Rotation(1575.01959, 1575.01959, 1575.01959, 1575.01959, false);
      assertEquals(1575.01959, rotation0.getQ1(), 0.01);
      assertEquals(1575.01959, rotation0.getQ2(), 0.01);
      assertEquals(1575.01959, rotation0.getQ0(), 0.01);
      assertEquals(1575.01959, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertEquals("XZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertEquals("XZY", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals("XZY", rotationOrder0.toString());
      assertNotNull(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertEquals("XYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Rotation rotation0 = new Rotation((-3074.410659045366), (-0.6610240121999935), 0.9999999999, (-3074.410659045366), false);
      assertEquals(0.9999999999, rotation0.getQ2(), 0.01);
      assertEquals((-3074.410659045366), rotation0.getQ3(), 0.01);
      assertEquals((-0.6610240121999935), rotation0.getQ1(), 0.01);
      assertEquals((-3074.410659045366), rotation0.getQ0(), 0.01);
      assertNotNull(rotation0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.MINUS_K;
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.7071067811865476, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067811865475, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertEquals("XYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Rotation rotation0 = new Rotation(510.317964, 510.317964, 0.1, 0.1, true);
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Rotation rotation1 = rotation0.revert();
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ2(), 0.01);
      assertEquals(0.7071067676105021, rotation1.getQ1(), 0.01);
      assertEquals((-0.7071067676105021), rotation1.getQ0(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ3(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
      
      double double0 = Rotation.distance(rotation1, rotation0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertEquals(1.3856199810565598E-4, rotation0.getQ3(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation0.getQ2(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ0(), 0.01);
      assertEquals(0.7071067676105021, rotation0.getQ1(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ2(), 0.01);
      assertEquals(0.7071067676105021, rotation1.getQ1(), 0.01);
      assertEquals((-0.7071067676105021), rotation1.getQ0(), 0.01);
      assertEquals(1.3856199810565598E-4, rotation1.getQ3(), 0.01);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertEquals(3.141592576792084, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Rotation rotation0 = new Rotation((-378.6649), (-378.6649), (-378.6649), (-378.6649), true);
      assertEquals((-0.49999999999999994), rotation0.getQ3(), 0.01);
      assertEquals((-0.49999999999999994), rotation0.getQ0(), 0.01);
      assertEquals((-0.49999999999999994), rotation0.getQ2(), 0.01);
      assertEquals((-0.49999999999999994), rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      double double0 = Rotation.distance(rotation0, rotation0);
      assertEquals((-0.49999999999999994), rotation0.getQ3(), 0.01);
      assertEquals((-0.49999999999999994), rotation0.getQ0(), 0.01);
      assertEquals((-0.49999999999999994), rotation0.getQ2(), 0.01);
      assertEquals((-0.49999999999999994), rotation0.getQ1(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D1 = rotation0.IDENTITY.getAxis();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertEquals("XYZ", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
      assertTrue(vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.PLUS_I;
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(1.0, rotation0.getQ3(), 0.01);
      assertNotNull(rotation0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertEquals("XZX", rotationOrder0.toString());
      assertNotNull(rotationOrder0);
      
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNorm1(), 0.01);
      assertNotNull(vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = Vector3D.PLUS_I;
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01);
      assertFalse(vector3D2.isNaN());
      assertFalse(vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(vector3D2);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D2);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01);
      assertFalse(vector3D2.isNaN());
      assertFalse(vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals((-0.7071067811865476), rotation0.getQ0(), 0.01);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertNotNull(rotation0);
      
      Vector3D vector3D3 = rotation0.getAxis();
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertTrue(vector3D3.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.isInfinite());
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01);
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01);
      assertFalse(vector3D2.isNaN());
      assertFalse(vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormInf(), 0.01);
      assertEquals((-1.0), vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals((-0.7071067811865476), rotation0.getQ0(), 0.01);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, vector3D3.getX(), 0.01);
      assertFalse(vector3D3.isInfinite());
      assertEquals(1.0, vector3D3.getNorm1(), 0.01);
      assertEquals(1.0, vector3D3.getNormInf(), 0.01);
      assertFalse(vector3D3.isNaN());
      assertEquals((-1.0), vector3D3.getZ(), 0.01);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01);
      assertEquals(0.0, vector3D3.getY(), 0.01);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D1 = rotationOrder0.getA3();
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D1);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Rotation rotation0 = new Rotation(rotationOrder0, 0.5, 1115.19664082965, 0.5);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 4003.061);
      assertEquals((-0.2313325043126112), rotation0.getQ2(), 0.01);
      assertEquals((-0.23133250431261124), rotation1.getQ2(), 0.01);
      assertEquals((-0.09343771368630721), rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Rotation rotation0 = new Rotation(5.650007086920087E-9, (-0.12502530217170715), 1888.163158782486, 1888.163158782486, true);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 1888.163158782486);
      assertEquals(2.115896765568829E-12, rotation0.getQ0(), 0.01);
      assertEquals(0.707106780411476, rotation0.getQ3(), 0.01);
      assertEquals(2.115896757554416E-12, rotation1.getQ0(), 0.01);
      assertEquals((-4.6821292152322955E-5), rotation1.getQ1(), 0.01);
      assertEquals(0.7071067804114759, rotation1.getQ3(), 0.01);
      assertEquals(0.707106780411476, rotation0.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 1136.814);
      assertEquals(1.0, rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Rotation rotation0 = new Rotation(3.145894820876798E-6, 3.145894820876798E-6, 3.145894820876798E-6, 3.145894820876798E-6, false);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, 3.145894820876798E-6);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // the closest orthogonal matrix has a negative determinant -1
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Rotation rotation0 = new Rotation(1663.29678611074, (-3056.0), 1663.29678611074, (-0.1), true);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 1663.29678611074);
      assertEquals(0.4313019612343918, rotation0.getQ2(), 0.01);
      assertEquals((-0.792437528009837), rotation0.getQ1(), 0.01);
      assertEquals(0.4313019612343918, rotation0.getQ0(), 0.01);
      assertEquals((-0.4313019612343918), rotation1.getQ0(), 0.01);
      assertEquals((-2.5930547382520845E-5), rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray1, Double.NaN);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray1, Double.NaN);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, Double.NaN);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 3x7 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, 0.5917247157747437);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, (-3469.4657422947));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double double0 = rotation0.getQ0();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      Rotation rotation0 = new Rotation(rotationOrder0, 1549.5187539716023, 1549.5187539716023, 1549.5187539716023);
      double double0 = rotation0.getQ1();
      assertEquals(0.2640544141940124, rotation0.getQ0(), 0.01);
      assertEquals((-0.2286091596338684), rotation0.getQ3(), 0.01);
      assertEquals((-5.551115123125783E-17), double0, 0.01);
      assertEquals((-0.9370235421141527), rotation0.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Rotation rotation0 = new Rotation(352.500308713212, 352.500308713212, 0.5039018405998233, (-3.940510424527919E-20), false);
      double double0 = rotation0.getQ3();
      assertEquals((-3.940510424527919E-20), double0, 0.01);
      assertEquals(352.500308713212, rotation0.getQ1(), 0.01);
      assertEquals(0.5039018405998233, rotation0.getQ2(), 0.01);
      assertEquals(352.500308713212, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Rotation.distance(rotation0, rotation0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 08 15:01:05 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 4.0);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        fDistribution0.sample();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.903, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.5, 0.0, 0.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well44497a well44497a0 = new Well44497a(intArray0);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well44497a0, 0, 573, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      boolean boolean0 = fDistribution0.isSupportConnected();
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(163.03427773838, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      double double0 = fDistribution0.getSupportUpperBound();
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(163.03427773838, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3058.0, 3058.0);
      double double0 = fDistribution0.getSupportLowerBound();
      assertEquals(3058.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3058.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, 0.0);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2795.0422963312208, 7.956744351476403E-106);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(7.956744351476403E-106, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2795.0422963312208, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      FDistribution fDistribution0 = new FDistribution(mersenneTwister0, 2670.9, 2670.9, (-2600.594));
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(2670.9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-2600.594), double0, 0.01);
      assertEquals(2670.9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(115.37574871287, 115.37574871287);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(0.036870370433705446, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(115.37574871287, 115.37574871287);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(1.017640456823488, double0, 0.01);
      assertEquals(115.37574871287, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3058.1418546, 3058.1418546);
      double double0 = fDistribution0.density(1.0E-6);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1693.981028016, 1693.981028016, 1693.981028016);
      double double0 = fDistribution0.cumulativeProbability((-906.52));
      assertEquals(1693.981028016, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0011820463509247, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      double double0 = fDistribution0.cumulativeProbability(163.03427773838);
      assertEquals(0.9938853224932912, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.2601466178894043, 361.14575, 3058.1418546);
      double double0 = fDistribution0.calculateNumericalVariance();
      assertEquals(0.9054546094951453, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3056.718330785881, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        fDistribution0.cumulativeProbability(2010.9666773);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction diverged to NaN for value 0
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(163.03427773838, double0, 0.01);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      double double0 = fDistribution0.getDenominatorDegreesOfFreedom();
      assertEquals(163.03427773838, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      fDistribution0.sample();
      double double0 = fDistribution0.sample();
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(2.0, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(3057.977933263766, (-1.6990896855901115E-55));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-641.9), (-641.9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-641.9)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      double double0 = fDistribution0.density(0.9938853224932912);
      assertEquals(0.36788167755765877, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      FDistribution fDistribution0 = new FDistribution(well44497a0, 163.03427773838, 2.0, 163.03427773838);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(163.03427773838, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3058.1418546, 3058.1418546);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(3058.1418546, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0006544198846627, fDistribution0.getNumericalMean(), 0.01);
  }
}

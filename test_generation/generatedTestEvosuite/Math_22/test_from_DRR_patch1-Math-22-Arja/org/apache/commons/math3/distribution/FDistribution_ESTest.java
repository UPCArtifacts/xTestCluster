/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 08 14:46:26 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, 4.0, Double.NaN);
      double double0 = fDistribution0.calculateNumericalVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1109722881);
      FDistribution fDistribution0 = new FDistribution(well19937c0, 3162.2258283, 2.0, 1.0693433780483637);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(2.0, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(463.66935680929595, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well44497a well44497a0 = new Well44497a(intArray0);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well44497a0, 0, 573, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well19937a0, (-1.974465323891493E143), (-1.974465323891493E143), (-1.974465323891493E143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-197,446,532,389,149,300,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3058.1418546, 3058.1418546, 3058.1418546);
      boolean boolean0 = fDistribution0.isSupportConnected();
      assertEquals(3058.1418546, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
      assertEquals(3058.1418546, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, 4.0, Double.NaN);
      double double0 = fDistribution0.getSupportUpperBound();
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, 4.0, Double.NaN);
      double double0 = fDistribution0.getSupportLowerBound();
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3162.2258283, 3162.2258283, 3162.2258283);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(3162.2258283, double0, 0.01);
      assertEquals(3162.2258283, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(3162.2258283, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-3812L));
      FDistribution fDistribution0 = new FDistribution(well44497a0, 3058.1418546, 3058.1418546, (-3812L));
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(3058.1418546, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(3058.1418546, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-3812.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4285.4, 4285.4);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(9.349282825345115E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4197.145350193947, 4197.145350193947, 4197.145350193947);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(1.000476741526943, double0, 0.01);
      assertEquals(4197.145350193947, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3162.23, 3162.23);
      double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(1.0006328653294223, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(3162.23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3058.1418546, 3058.1418546);
      double double0 = fDistribution0.density(1.0E-6);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1109722881);
      FDistribution fDistribution0 = new FDistribution(well19937c0, 3162.2258283, 2.0, 1.0693433780483637);
      double double0 = fDistribution0.density(2.0);
      assertEquals(0.151596710811021, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1693.981028016, 1693.981028016, 1693.981028016);
      double double0 = fDistribution0.cumulativeProbability((-906.52));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0011820463509247, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(1693.981028016, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3162.23, 3162.23);
      double double0 = fDistribution0.cumulativeProbability(3162.23);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.2601466178894043, 361.14575, 3058.1418546);
      double double0 = fDistribution0.calculateNumericalVariance();
      assertEquals(0.9054546094951453, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, 4.0, Double.NaN);
      double double0 = fDistribution0.getDenominatorDegreesOfFreedom();
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, 0.0);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.6659245491027832, (-1758.326476746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,758.326)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, 0.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, 4.0, Double.NaN);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4285.4, 4285.4);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      fDistribution0.sample();
      double double0 = fDistribution0.sample();
      assertEquals(1.0100709012662161, double0, 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(1.0004669188028201, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN, 0.0);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}

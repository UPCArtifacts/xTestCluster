/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:48:26 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.8154441408431103, 27);
      assertNotNull(poissonDistribution0);
      assertEquals(1.8154441408431103, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.8154441408431103, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.8154441408431103, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-2519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,519)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 270);
      assertNotNull(uniformIntegerDistribution0);
      assertEquals(270, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(6120.0, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(135.0, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(1.0, 979, 1987);
      assertEquals(270, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(6120.0, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(135.0, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(980, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertNotNull(poissonDistribution0);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8147976346598167, 12);
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.8147976346598167, poissonDistribution0.getMean(), 0.01);
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.8147976346598167, 12, 1406);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.8147976346598167, poissonDistribution0.getMean(), 0.01);
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7420800291310112, 159);
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.7420800291310112, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.7420800291310112, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.7420800291310112, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability((-6), (-6), (-976));
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.7420800291310112, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.7420800291310112, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.7420800291310112, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals((-976), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 1, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.07142857142857142, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0.07142857142857142, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2382.792812, 1366);
      assertNotNull(poissonDistribution0);
      assertEquals(2382.792812, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(2382.792812, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(2382.792812, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      double double0 = poissonDistribution0.cumulativeProbability((-1), 2147);
      assertEquals(2382.792812, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(2382.792812, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(2382.792812, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(4.803649806905926E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(12, 2192.6);
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(12.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(12.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(12.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      poissonDistribution0.solveInverseCumulativeProbability(0.0, Integer.MAX_VALUE, 12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 335, 44);
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(335.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(335.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(335.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      poissonDistribution0.sample(44);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 1.0, Double.NaN, (-190547345));
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(3609);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.PoissonDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 16, 16, 16);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(16, hypergeometricDistribution0.getSampleSize());
      assertEquals(16, hypergeometricDistribution0.getPopulationSize());
      assertEquals(16.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 335, 12);
      assertNotNull(poissonDistribution0);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(335.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(335.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(335.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(72, 335);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (12) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 2721);
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Double.NaN, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(Double.NaN, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(0.4561224489795918, 1, 2145115654);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,072,557,827
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(12);
      assertNotNull(well19937a0);
      
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, Integer.MIN_VALUE, 979179603);
      assertNotNull(uniformIntegerDistribution0);
      assertEquals(979179603, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(Integer.MIN_VALUE, uniformIntegerDistribution0.getSupportLowerBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals((-5.841520225E8), uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.13744528268896176E17, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8147976346598167, 12);
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.8147976346598167, poissonDistribution0.getMean(), 0.01);
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int[] intArray0 = poissonDistribution0.sample(12);
      assertNotNull(intArray0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.8147976346598167, poissonDistribution0.getMean(), 0.01);
      assertEquals(0.8147976346598167, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, intArray0.length);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 159, (-999));
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(159.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(159.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(159.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(0.7420800291310112);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-999) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7420800291310112, 159);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0E-12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(12, 12, 12);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.02222222222222305, 3277.39196027);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(12);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, Integer.MIN_VALUE, 979179603);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.27023093778375684);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(12);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, Integer.MIN_VALUE, 979179603);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-708.56874205191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -708.569 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(12, 12, 12);
      try { 
        hypergeometricDistribution0.cumulativeProbability(2640, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2,640) must be less than or equal to upper endpoint (12)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(12, 12, 12);
      double double0 = hypergeometricDistribution0.cumulativeProbability(12, 12);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1223, 717, 738);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7420800291310112, 159);
      poissonDistribution0.reseedRandomGenerator((-6));
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
  }
}

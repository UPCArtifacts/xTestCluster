/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:29:30 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(270, 171, 3391);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      poissonDistribution0.solveInverseCumulativeProbability(0.0, (-6), 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      hypergeometricDistribution0.cumulativeProbability((-1257), 270);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0008761540741556E-7, 1.0008761540741556E-7);
      // Undeclared exception!
      poissonDistribution0.solveInverseCumulativeProbability((-2940.5681), Integer.MAX_VALUE, 1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.512274346576166E-160);
      int[] intArray0 = poissonDistribution0.sample(8190);
      assertEquals(8190, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1496, 1496);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(22.77707735557, (-1883.0));
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(0.6918674276808237);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-3668), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      PascalDistribution pascalDistribution0 = new PascalDistribution(well44497b0, 126, 1.0);
      int int0 = pascalDistribution0.inverseCumulativeProbability(0.48469426722329767);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(10000000, 10000000, 10000000);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,147,483,648)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.512274346576166E-160);
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.5922541912730339, (-1));
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(1.8521166948363666E-45);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(91.88961206340302);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8590489708199534);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(270);
      try { 
        poissonDistribution0.inverseCumulativeProbability(270);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 270 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.512274346576166E-160, 1.512274346576166E-160);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-596.31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -596.31 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.512274346576166E-160);
      try { 
        poissonDistribution0.cumulativeProbability(10000000, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (10,000,000) must be less than or equal to upper endpoint (2)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.512274346576166E-160);
      double double0 = poissonDistribution0.cumulativeProbability(10000000, 10000000);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(292, 292, 292);
      hypergeometricDistribution0.reseedRandomGenerator(292);
      assertEquals(292, hypergeometricDistribution0.getNumberOfSuccesses());
  }
}

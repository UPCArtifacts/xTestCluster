/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:32:08 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(91.88961206340302, 91.88961206340302);
      assertNotNull(poissonDistribution0);
      assertEquals(91.88961206340302, poissonDistribution0.getMean(), 0.01);
      assertEquals(91.88961206340302, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(91.88961206340302, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-1430));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,430)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, (-6), 0);
      assertEquals((-5), int0);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(270, 171, 3391);
      assertEquals(3391, int0);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(998, 0.45065183051637314);
      assertNotNull(binomialDistribution0);
      assertEquals(247.06962865227803, binomialDistribution0.getNumericalVariance(), 0.01);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0.45065183051637314, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(998, binomialDistribution0.getNumberOfTrials());
      assertEquals(449.7505268553404, binomialDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      assertEquals(998, binomialDistribution0.getSupportUpperBound());
      
      int int0 = binomialDistribution0.sample();
      assertEquals(470, int0);
      assertEquals(247.06962865227803, binomialDistribution0.getNumericalVariance(), 0.01);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0.45065183051637314, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(998, binomialDistribution0.getNumberOfTrials());
      assertEquals(449.7505268553404, binomialDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      assertEquals(998, binomialDistribution0.getSupportUpperBound());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well44497b0, 1.0, 0.0, 270);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      double double0 = poissonDistribution0.cumulativeProbability(0, Integer.MAX_VALUE);
      assertEquals(0.6321205588285578, double0, 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 270, 270, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(270);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.3405170933129773, (double) 268);
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.3405170933129773, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.3405170933129773, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.3405170933129773, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(10000000, 0.3405170933129773);
      assertNotNull(binomialDistribution0);
      assertEquals(10000000, binomialDistribution0.getNumberOfTrials());
      assertEquals(2245652.0247465842, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.3405170933129773, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      assertEquals(10000000, binomialDistribution0.getSupportUpperBound());
      assertEquals(3405170.933129773, binomialDistribution0.getNumericalMean(), 0.01);
      
      // Undeclared exception!
      binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution((RandomGenerator) null, 10000000, Double.NaN);
      assertNotNull(binomialDistribution0);
      assertEquals(Double.NaN, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
      assertEquals(10000000, binomialDistribution0.getNumberOfTrials());
      assertEquals(Double.NaN, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, binomialDistribution0.getNumericalMean(), 0.01);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(10000000, binomialDistribution0.getSupportLowerBound());
      
      // Undeclared exception!
      try { 
        binomialDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, (double) (-14));
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(868, 0.0);
      assertNotNull(binomialDistribution0);
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.0, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      assertEquals(0.0, binomialDistribution0.getNumericalMean(), 0.01);
      assertEquals(868, binomialDistribution0.getNumberOfTrials());
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
      
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.9914446122580681);
      assertEquals(0, int0);
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.0, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      assertEquals(0.0, binomialDistribution0.getNumericalMean(), 0.01);
      assertEquals(868, binomialDistribution0.getNumberOfTrials());
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(293, 293, 293);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(293.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(293, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(293, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(293, hypergeometricDistribution0.getSampleSize());
      
      int[] intArray0 = hypergeometricDistribution0.sample(293);
      assertEquals(293, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(293.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(293, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(293, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(293, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(354.453996465, 0.24879615641234998);
      assertNotNull(poissonDistribution0);
      assertEquals(354.453996465, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(354.453996465, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(354.453996465, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(293, 293, 293);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(293.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(293, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(293, hypergeometricDistribution0.getSampleSize());
      assertEquals(293, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1169), Integer.MIN_VALUE, 1624);
      assertEquals((-2147483647), int0);
      assertEquals(293.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(293, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(293, hypergeometricDistribution0.getSampleSize());
      assertEquals(293, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1803.30183496, 1803.30183496);
      assertNotNull(poissonDistribution0);
      assertEquals(1803.30183496, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1803.30183496, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1803.30183496, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.20947304491935725);
      assertEquals(1802, int0);
      assertEquals(1803.30183496, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1803.30183496, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1803.30183496, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 1, 1);
      // Undeclared exception!
      hypergeometricDistribution0.sample(963);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(0.999916758850712);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(260, 0, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 270);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(270);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 270 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(270);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-0.6654099622544474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.665 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(995, 914771251);
      try { 
        uniformIntegerDistribution0.cumulativeProbability(914771251, (-4643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (914,771,251) must be less than or equal to upper endpoint (-4,643)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(868, 9.56881327374431E-100);
      double double0 = binomialDistribution0.cumulativeProbability(868, 868);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 270);
      hypergeometricDistribution0.reseedRandomGenerator(270);
      assertEquals(270, hypergeometricDistribution0.getSampleSize());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:26:44 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      assertEquals(0, int0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(270, 171, 3391);
      assertEquals(3391, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(13, 13, 13);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(13, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(13, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(13, hypergeometricDistribution0.getPopulationSize());
      assertEquals(13.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(13, int0);
      assertEquals(13, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(13, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(13, hypergeometricDistribution0.getPopulationSize());
      assertEquals(13.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1257), 270);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well44497b0, 9.001080100474798E-4, (-2063.929), 10000000);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(9.001080100474798E-4, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(9.001080100474798E-4, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(9.001080100474798E-4, poissonDistribution0.getMean(), 0.01);
      
      // Undeclared exception!
      poissonDistribution0.solveInverseCumulativeProbability(0.9999999209798554, 2, 524595268);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, (-1248.9389), 1);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability((-1.0), (-761427441), 1018791306);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(267, 267, 267);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(267, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(267, hypergeometricDistribution0.getPopulationSize());
      assertEquals(267, hypergeometricDistribution0.getSampleSize());
      assertEquals(267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int[] intArray0 = hypergeometricDistribution0.sample(8191);
      assertNotNull(intArray0);
      assertEquals(8191, intArray0.length);
      assertEquals(267, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(267, hypergeometricDistribution0.getPopulationSize());
      assertEquals(267, hypergeometricDistribution0.getSampleSize());
      assertEquals(267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1290, 1290, 647);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1290, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(647.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1290, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(647, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0E-12, (-1201.46));
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0E-12, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0E-12, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(jDKRandomGenerator0, 267, 267, (-1915));
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(267.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(267.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(267.0, poissonDistribution0.getNumericalVariance(), 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(243991009, 243991009);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,915) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.9683872370927722, 0.9683872370927722);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.9683872370927722, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.9683872370927722);
      assertEquals(3, int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.9683872370927722, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(267, 267, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(267, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(267, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(2, int0);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(267, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(267, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(21, 21, 21);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(21, hypergeometricDistribution0.getSampleSize());
      assertEquals(21, hypergeometricDistribution0.getPopulationSize());
      assertEquals(21.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(21, hypergeometricDistribution0.getNumberOfSuccesses());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-537)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0, Integer.MIN_VALUE, 3149);
      assertEquals((-2147483647), int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.9683872370927722, 0.9683872370927722);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.9683872370927722, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalVariance(), 0.01);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.9683872370927722, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.9683872370927722, poissonDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.09090909090909091, 0.09090909090909091);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0E-12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(21, 21, 21);
      int[] intArray0 = hypergeometricDistribution0.sample(21);
      assertEquals(21, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(Double.NaN);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-761427441), (-101));
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1.0);
      assertEquals((-101), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(267);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3232.4071596078);
      try { 
        poissonDistribution0.inverseCumulativeProbability(3232.4071596078);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,232.407 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.9683872370927722);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-2033.46));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,033.46 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.9683872370927722, 0.9683872370927722);
      try { 
        poissonDistribution0.cumulativeProbability(6, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (6) must be less than or equal to upper endpoint (-1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-761427441), (-101));
      double double0 = uniformIntegerDistribution0.cumulativeProbability(256, 10000000);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2497, 1241, 840);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(267, 267, 267);
      hypergeometricDistribution0.reseedRandomGenerator(267);
      assertEquals(267, hypergeometricDistribution0.getPopulationSize());
  }
}

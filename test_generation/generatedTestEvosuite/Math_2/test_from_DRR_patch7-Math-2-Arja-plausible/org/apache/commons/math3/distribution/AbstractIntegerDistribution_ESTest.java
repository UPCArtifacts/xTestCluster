/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:16:12 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(272, 272, 272);
      assertEquals(272.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(272, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(272, hypergeometricDistribution0.getSampleSize());
      assertEquals(272, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-262)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertNotNull(poissonDistribution0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, (-6), 0);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, 270);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      double double0 = poissonDistribution0.cumulativeProbability(0, 0);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(10000000, (-6), 0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(921, 917, 25);
      assertEquals(24.8914223669924, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(921, hypergeometricDistribution0.getPopulationSize());
      assertEquals(917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(25, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-874.784709201), 921, 2151);
      assertEquals(24.8914223669924, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(921, hypergeometricDistribution0.getPopulationSize());
      assertEquals(917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(25, hypergeometricDistribution0.getSampleSize());
      assertEquals(922, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(1.0, (-6), (-6));
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(864.0957345676337, 1078);
      assertEquals(864.0957345676337, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(864.0957345676337, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(864.0957345676337, poissonDistribution0.getNumericalVariance(), 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(864.0957345676337, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(864.0957345676337, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(864.0957345676337, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 270);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 25);
      assertEquals(25, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(25.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 270);
      assertEquals(25, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(25.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.24121658854967554, (-1));
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.24121658854967554, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.24121658854967554, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.24121658854967554, poissonDistribution0.getNumericalMean(), 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability((-6.330187984612758E-8), (-1), 270);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(mersenneTwister0, 2.147483647E9, 826, 1824);
      assertEquals(6, intArray0.length);
      assertEquals(2.147483647E9, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(2.147483647E9, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(2.147483647E9, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertNotNull(poissonDistribution0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      poissonDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 607991448, 607991448, 2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(607991448, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(607991448, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.reseedRandomGenerator(607991448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2145115654);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(2.145115654E9, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(2.145115654E9, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(2.145115654E9, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(0.569912651584171);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-3668), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(270, 0.0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2145115654, 217, 2145115654);
      assertEquals(2145115654, hypergeometricDistribution0.getSampleSize());
      assertEquals(2145115654, hypergeometricDistribution0.getPopulationSize());
      assertEquals(217, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7615575164694594, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.819523187052694);
      assertEquals(2145115654, hypergeometricDistribution0.getSampleSize());
      assertEquals(2145115654, hypergeometricDistribution0.getPopulationSize());
      assertEquals(217, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7615575164694594, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(217, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 25);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(270);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(921, 917, 868);
      // Undeclared exception!
      hypergeometricDistribution0.sample(868);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(272, 272, 272);
      int[] intArray0 = hypergeometricDistribution0.sample(272);
      assertEquals(272, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, (-3419.4));
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(1.248369802051748E-8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(270, (-2293.3));
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(855.6247708204837, 4096);
      try { 
        poissonDistribution0.inverseCumulativeProbability(855.6247708204837);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 855.625 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(91.88961206340302, 91.88961206340302);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-3357.14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,357.14 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, 270);
      try { 
        poissonDistribution0.cumulativeProbability(1073741824, (-1239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (1,073,741,824) must be less than or equal to upper endpoint (-1,239)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well44497a0, 2550, 764);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability((-2294), 764);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(272, 272, 272);
      hypergeometricDistribution0.reseedRandomGenerator((-177L));
      assertEquals(272, hypergeometricDistribution0.getNumberOfSuccesses());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:53:37 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 270);
      assertEquals(135.0, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(6120.0, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(270, uniformIntegerDistribution0.getSupportUpperBound());
      assertNotNull(uniformIntegerDistribution0);
      
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, (-6), 0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals((-5), int0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(270, 171, 3391);
      assertEquals(3391, int0);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 270);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(270, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well44497b0, 1.0, 0.0, 270);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertNotNull(poissonDistribution0);
      
      double double0 = poissonDistribution0.cumulativeProbability(Integer.MIN_VALUE, 1);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(0.7357588823428847, double0, 0.01);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, (double) 270);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      poissonDistribution0.sample(270);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(10000000, 1.0E-12);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0E7, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E7, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0E7, poissonDistribution0.getMean(), 0.01);
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.5308300688868646);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.5308300688868646, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.5308300688868646, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.5308300688868646, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.5308300688868646);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.5308300688868646, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.5308300688868646, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.5308300688868646, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1.207746682843556E-303);
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(Double.NaN, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Double.NaN, poissonDistribution0.getMean(), 0.01);
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(0.49739940077138134);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(543.326112903, 543.326112903);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(543.326112903, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(543.326112903, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(543.326112903, poissonDistribution0.getNumericalVariance(), 0.01);
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-4208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-4,208)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int[] intArray0 = hypergeometricDistribution0.sample(917);
      assertEquals(917, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(270);
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.5308300688868646);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(543.3261129);
      try { 
        poissonDistribution0.inverseCumulativeProbability(543.3261129);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 543.326 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(543.326112903, 543.326112903);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-13.287806343316728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -13.288 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(995, 914771251);
      try { 
        uniformIntegerDistribution0.cumulativeProbability(914771251, (-4643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (914,771,251) must be less than or equal to upper endpoint (-4,643)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.5308300688868646);
      double double0 = poissonDistribution0.cumulativeProbability(0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2234, 1537, 1537);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.6595903487209973, (double) 270);
      poissonDistribution0.reseedRandomGenerator(1341L);
      assertEquals(0.6595903487209973, poissonDistribution0.getNumericalMean(), 0.01);
  }
}

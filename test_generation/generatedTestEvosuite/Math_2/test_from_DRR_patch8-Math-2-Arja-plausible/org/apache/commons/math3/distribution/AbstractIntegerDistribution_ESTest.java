/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:18:54 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1, 270);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4.022633486003565E-204, 0);
      poissonDistribution0.solveInverseCumulativeProbability(4.022633486003565E-204, 270, (-152));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 1, 1);
      hypergeometricDistribution0.cumulativeProbability((-269), 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(258, 258, 258);
      hypergeometricDistribution0.cumulativeProbability(258, 258);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4.022633486003565E-204, 0);
      poissonDistribution0.solveInverseCumulativeProbability(734.3059, (-2149), 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, 748);
      poissonDistribution0.solveInverseCumulativeProbability(0, 0, 1491);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(258, (-580.4793), 258);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(3539.2191, 72, 2354);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (258) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(258, 258, 258);
      // Undeclared exception!
      hypergeometricDistribution0.sample(65535);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497a well44497a0 = new Well44497a(intArray0);
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well44497a0, 396924338, 1.6985075903314236E-173);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(1.0E-12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      // Undeclared exception!
      geometricDistribution0.cumulativeProbability(65, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-3668), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.9642016645572071);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.9642016645572071);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1139, 1139, 1139);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-415)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability((-565.591), Integer.MIN_VALUE, (-987));
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.1878871);
      int int0 = geometricDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      int int0 = geometricDistribution0.inverseCumulativeProbability(6.533522495226226E-9);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      int int0 = geometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      try { 
        geometricDistribution0.inverseCumulativeProbability(992.8519894);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 992.852 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-2532.590922645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,532.591 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, 748);
      try { 
        poissonDistribution0.cumulativeProbability(3057, 522);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (3,057) must be less than or equal to upper endpoint (522)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.18788706637045638);
      int int0 = geometricDistribution0.sample();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(258, 258, 258);
      hypergeometricDistribution0.reseedRandomGenerator(258);
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
  }
}

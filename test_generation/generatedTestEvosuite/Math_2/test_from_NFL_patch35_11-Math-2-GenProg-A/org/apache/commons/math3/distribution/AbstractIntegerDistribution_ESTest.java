/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:45:22 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1, 270);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertNotNull(poissonDistribution0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-269), 1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(258, 258, 258);
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(258.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(258, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(258, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(258, 258);
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(258.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(258, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(258, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4.022633486003565E-204, 0);
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(4.022633486003565E-204, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(734.3059, (-2149), 0);
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(4.022633486003565E-204, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0, int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, 748);
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0, 0, 1491);
      assertEquals(270.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(270.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(270.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(4.022633486003565E-204, 0);
      assertEquals(4.022633486003565E-204, poissonDistribution0.getMean(), 0.01);
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(4.022633486003565E-204, 270, (-152));
      assertEquals(4.022633486003565E-204, poissonDistribution0.getMean(), 0.01);
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(4.022633486003565E-204, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals((-152), int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(258, (-580.4793), 258);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(258.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(258.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(258.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertNotNull(poissonDistribution0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(0.598725973213154, 72, 2354);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (258) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(258, 258, 258);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(258, hypergeometricDistribution0.getPopulationSize());
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(258.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(258, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample(16383);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a(11L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1071844195, 1997, 1997);
      assertEquals(1997, hypergeometricDistribution0.getSampleSize());
      assertEquals(1997, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1071844195, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0037206984173665278, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.inverseCumulativeProbability(0.18788706637045638);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.9979433063724354, 0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.9979433063724354, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.9979433063724354, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.9979433063724354, poissonDistribution0.getNumericalMean(), 0.01);
      assertNotNull(poissonDistribution0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 16385);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      assertEquals(1.0, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertTrue(geometricDistribution0.isSupportConnected());
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertEquals(0.0, geometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(geometricDistribution0);
      
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.18788706637045638);
      assertEquals(1.0, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertTrue(geometricDistribution0.isSupportConnected());
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertEquals(0.0, geometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      assertEquals(0.0, geometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(geometricDistribution0.isSupportConnected());
      assertEquals(1.0, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertNotNull(geometricDistribution0);
      
      int int0 = geometricDistribution0.inverseCumulativeProbability(0);
      assertEquals(0.0, geometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(geometricDistribution0.isSupportConnected());
      assertEquals(1.0, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 270);
      assertEquals(270, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(270, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(250, 250, 250);
      assertEquals(250.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(250, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(250, hypergeometricDistribution0.getSampleSize());
      assertEquals(250, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.7460466253845945);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertEquals(0.456270139865787, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.7460466253845945, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0.3403987981106274, geometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertTrue(geometricDistribution0.isSupportConnected());
      assertNotNull(geometricDistribution0);
      
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.7460466253845945);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertEquals(0.456270139865787, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.7460466253845945, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0.3403987981106274, geometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertTrue(geometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.18788706637045638);
      assertEquals(0.18788706637045638, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertEquals(4.322346126945763, geometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(23.0050221680688, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertTrue(geometricDistribution0.isSupportConnected());
      assertNotNull(geometricDistribution0);
      
      int int0 = geometricDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(0.18788706637045638, geometricDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, geometricDistribution0.getSupportLowerBound());
      assertEquals(4.322346126945763, geometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(23.0050221680688, geometricDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, geometricDistribution0.getSupportUpperBound());
      assertTrue(geometricDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(3.456595573934475E-209);
      int int0 = geometricDistribution0.inverseCumulativeProbability(3.456595573934475E-209);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.inverseCumulativeProbability(Double.NaN);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      int int0 = geometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1, 1, 1);
      int[] intArray0 = hypergeometricDistribution0.sample(419);
      assertEquals(419, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.18788706637045638);
      try { 
        geometricDistribution0.inverseCumulativeProbability(298.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 298 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.18788706637045638);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-929.37786944882));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -929.378 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 270, 748);
      try { 
        poissonDistribution0.cumulativeProbability(3057, 522);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (3,057) must be less than or equal to upper endpoint (522)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(258, 258, 258);
      hypergeometricDistribution0.reseedRandomGenerator(258);
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
  }
}

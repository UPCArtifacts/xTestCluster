/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:40:03 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 12, 12);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-1552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,552)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 270);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(1.0, 979, 1987);
      assertEquals(980, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8147976346598167, 12);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.8147976346598167, 12, 1406);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7420800291310112, 159);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability((-6), (-6), (-976));
      assertEquals((-976), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 2251);
      int int0 = uniformIntegerDistribution0.sample();
      assertEquals((-418201966), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1067), 63);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.40550096922198975);
      assertEquals((-609), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(22, 22, 22);
      double double0 = hypergeometricDistribution0.cumulativeProbability(22, 22);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((long) 1223);
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well44497a0, 98.1, (-6), 1919728601);
      // Undeclared exception!
      poissonDistribution0.solveInverseCumulativeProbability(0.07258617250601662, 63, 1318);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 543, 543);
      // Undeclared exception!
      poissonDistribution0.sample(543);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1223, 717, 738);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 5087, 5087, 410);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((RandomGenerator) null, 33, 643);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.reseedRandomGenerator(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1224, 587, 587);
      // Undeclared exception!
      hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8147976346598167, 12);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(0.8147976346598167);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (12) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 12, 12);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-2138), 12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (12) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(587, 587, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.677268997);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 2721);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(0.4561224489795918, 1, 2401);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,201
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7420800291310112, 159);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8147976346598167, 12);
      int[] intArray0 = poissonDistribution0.sample(12);
      assertEquals(12, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1285);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(mersenneTwister0, 1285, 2146490302);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.40550088862440714);
      assertEquals(870404489, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 14, 14);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2145115654, 217, 217);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(497, 497, 497);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 497 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 27, 27);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-1067.91512151571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,067.915 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1067), 63);
      try { 
        uniformIntegerDistribution0.cumulativeProbability(0, (-902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-902)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well44497b0, 12, 146);
      double double0 = uniformIntegerDistribution0.cumulativeProbability(0, 146);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2145115654, 217, 217);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7420800291310112, 159);
      poissonDistribution0.reseedRandomGenerator((-6));
      assertEquals(0.7420800291310112, poissonDistribution0.getNumericalVariance(), 0.01);
  }
}

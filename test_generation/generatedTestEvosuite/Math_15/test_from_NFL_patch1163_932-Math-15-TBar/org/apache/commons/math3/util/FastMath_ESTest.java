/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:11:43 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FastMath.getExponent(-0.0F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FastMath.copySign((-1.4E-45F), (float) 0L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FastMath.copySign(0.0F, (-1066.247F));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FastMath.copySign((-1951.352), (double) 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FastMath.copySign(0.0, (-7.853944465095286E-8));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FastMath.copySign(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FastMath.max(210, 2890);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FastMath.min(780L, 4602678819172646912L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FastMath.min((-4643), (-1657));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FastMath.rint(3072.8070618438524);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FastMath.rint(2203.5);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FastMath.rint(0.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FastMath.round((-1.7976931348623157E308));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FastMath.floor(4.503599627370496E15);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FastMath.scalb(1427.442F, 128);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FastMath.ulp(564.9098877736);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FastMath.ulp(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FastMath.abs(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FastMath.abs(2047L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FastMath.abs(1024);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FastMath.toRadians(3156);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FastMath.cbrt(4.9E-324);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FastMath.asin(1.058213771597129E-7);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FastMath.atan2((-18.04615817756549), (-18.04615817756549));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FastMath.atan2(4.547473508864641E-13, (-2.3580462372762525E-230));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FastMath.acos(6.123233995736766E-17);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FastMath.tan((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FastMath.cos(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FastMath.cos(0.0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FastMath.sin(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FastMath.signum(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FastMath.signum(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FastMath.asinh(0.097);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FastMath.tanh(0.5);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FastMath.tanh((-20.0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FastMath.tanh(20.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FastMath.sinh((-20.0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FastMath.sinh(709.782712893384);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FastMath.cosh(0.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FastMath.cosh(20.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FastMath.toDegrees((-0.9637450651742684));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FastMath.tan((-5.179903818099661E-9));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FastMath.sqrt(0.0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FastMath.round((-1.4E-45F));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FastMath.round((float) 11);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FastMath.round(0.5419276000000082);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FastMath.round((double) (-127));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      FastMath.random();
      FastMath.random();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FastMath.pow((-770.66765), 1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FastMath.nextUp((-1.4E-45F));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FastMath.nextAfter((double) 0.0F, (double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FastMath.min(1275L, 0L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FastMath.min(190, (-645));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FastMath.min(0.0F, 608.2F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FastMath.min(4453.4F, 4453.4F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FastMath.min((double) 1L, 0.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FastMath.max((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FastMath.max((-841L), (-2918L));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FastMath.max((-536), (-536));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FastMath.max(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FastMath.max(0.0, (-223.186922588));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FastMath.log10(1.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FastMath.log(0.0, 2.0736172194624895E-222);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FastMath.log((double) 898.93976F, 796.8293);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FastMath.log(1952.94225534125, 0.375);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FastMath.log(1.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FastMath.hypot(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FastMath.getExponent(Float.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FastMath.getExponent((-1.0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FastMath.getExponent((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FastMath.copySign(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FastMath.ceil((-223.186922588));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FastMath.cbrt(8.057060681965766);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FastMath.atanh(0.0F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FastMath.atanh((-0.2499999997677497));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FastMath.atan((-7.834266543919698));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FastMath.asinh(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FastMath.abs((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FastMath.abs(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FastMath.IEEEremainder(0.0, 508.659051);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FastMath.IEEEremainder(0.5387523174285889, (-792));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FastMath.IEEEremainder(1952.94225534125, (-2.159273204728711E-7));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      FastMath.pow((-6.038239639506472E-32), Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FastMath.main(stringArray0);
      // Undeclared exception!
      FastMath.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FastMath.floor(9.219544613762692E-9);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FastMath.floor(2890);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FastMath.floor((-4019L));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FastMath.floor((-4.503599627370496E15));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FastMath.floor((-855.1511879));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FastMath.floor(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FastMath.nextAfter(2166.879F, 2.67875337600708);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FastMath.nextAfter(0.0F, 1986.9040707);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FastMath.nextAfter(Float.NEGATIVE_INFINITY, (double) 2448.0F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FastMath.nextAfter(2805.9104496984, 3594.948);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FastMath.nextAfter((-997.04563247), 0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FastMath.nextAfter(0.0, 3.707631264224219);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FastMath.nextAfter(Double.NEGATIVE_INFINITY, 1411.1253275758816);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FastMath.scalb(3913.938030794593, 285);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FastMath.abs((double) 702.6F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FastMath.abs((-2.5857668567479893E-8));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FastMath.sqrt(2942.5713171554);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FastMath.sin(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FastMath.copySign((-6038.0F), (-6038.0F));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FastMath.copySign(Float.POSITIVE_INFINITY, (-2074.3914F));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FastMath.copySign(1416.0F, 1416.0F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FastMath.copySign((-4408.0F), 20.27974F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FastMath.copySign((-4.547473508864641E-13), (double) 3156);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FastMath.copySign(3.141592653589793, (-813.602390786916));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FastMath.copySign(0.0, (double) 355.61713F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FastMath.copySign((-1132.3545156), (-1132.3545156));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FastMath.hypot(0, (-2984.21224034681));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FastMath.hypot(1.7270287031459572E-134, 0.0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FastMath.hypot(0.4342944622039795, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FastMath.hypot(Double.NaN, 0.11111095942313305);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FastMath.hypot(6.123233995736766E-17, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FastMath.hypot(Double.POSITIVE_INFINITY, (-1619.7454));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FastMath.max(2998.8, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FastMath.max((-1827.28482147), (-1607.06));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FastMath.max(1540.545791259, 7.62939453125E-6);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FastMath.max((-2313.32089), (-2313.32089));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FastMath.max(Float.NaN, Float.NaN);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FastMath.max(1.6409096E-13F, 129.8F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FastMath.max((-1677.231F), (float) (-4643));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FastMath.max(447L, 3173L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FastMath.max(0, 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FastMath.max(3483, (-715));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FastMath.min((-4847.876), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FastMath.min((double) (-822.661F), (double) 1014);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FastMath.min(12084.565231598905, 2014.0453153040962);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FastMath.min((double) 2.4414062E-4F, (double) 2.4414062E-4F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FastMath.min((-1367.274F), Float.NaN);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FastMath.min((float) (-2147483647), (-700.0F));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FastMath.min((-149.0F), (-355.9F));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FastMath.min((-2044L), (-2044L));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FastMath.min(0, 0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FastMath.min(1140200875, 1130);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FastMath.rint(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FastMath.rint(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FastMath.rint((-1.203028719549339E-7));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FastMath.rint((-1827.28482147));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FastMath.ceil((-0.010714690733195933));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FastMath.ceil(394.0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FastMath.ceil(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FastMath.ceil(2922.9733755336);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FastMath.round(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FastMath.nextUp(973.9F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FastMath.nextAfter((-218.0F), (double) (-1710.4727F));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FastMath.nextAfter(0.0F, (-2667.0085594460024));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FastMath.nextAfter(Float.POSITIVE_INFINITY, 545.8);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FastMath.nextAfter((-1710.6831F), (-1070.595522868873));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FastMath.nextAfter(0.0F, (double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FastMath.nextAfter((-77.8492F), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FastMath.nextAfter(Float.NaN, (double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FastMath.nextUp(3.814697265625E-6);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FastMath.nextAfter(5228.484876, 4.71524479659295E-8);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FastMath.nextAfter(0.0, (-20.0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FastMath.nextAfter(Double.POSITIVE_INFINITY, 8.0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FastMath.nextUp(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FastMath.nextAfter(0.9992128247102638, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FastMath.nextAfter(Double.NaN, (double) (-3553.5981F));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FastMath.scalb((float) 1768, 251);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FastMath.scalb((float) (-2146934529), (-127));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FastMath.scalb((float) 709, 1444);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FastMath.scalb((float) (-792), 251);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FastMath.scalb((-1710.4727F), (-3001));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FastMath.scalb(1024.0F, (-282));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FastMath.scalb((float) (-2146934529), 2057);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FastMath.scalb(Float.NEGATIVE_INFINITY, 3327);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FastMath.scalb(Float.NaN, (-1292));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FastMath.scalb(0.0F, 720);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FastMath.scalb(242.52F, 0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FastMath.scalb((-726.2372412148), 1024);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FastMath.scalb((double) 1.4E-45F, 1025);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FastMath.scalb((-5005.447571048376), (-1993));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FastMath.scalb(1.15, (-1657));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FastMath.scalb((double) 1024, 1024);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FastMath.scalb(1431.6073734237, 282033492);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FastMath.scalb((-1216.356755), 3156);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FastMath.scalb((-353.0), (-2147483647));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FastMath.scalb((double) (-1023), (-1023));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FastMath.scalb(Double.NEGATIVE_INFINITY, 1025);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FastMath.scalb(Double.NaN, (-2147483647));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FastMath.scalb(0.0, 8388607);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FastMath.scalb(1.7270287031459572E-134, (-2147483647));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FastMath.ulp(Float.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FastMath.ulp((-2074.3914F));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FastMath.ulp(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FastMath.abs(0.0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FastMath.abs(0.0F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FastMath.abs(Float.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FastMath.abs(702.6F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FastMath.abs(0L);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FastMath.abs(0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FastMath.toDegrees(0.0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FastMath.toDegrees(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FastMath.toRadians((-4.9E-324));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FastMath.toRadians(0.0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FastMath.toRadians(Float.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FastMath.cbrt(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FastMath.cbrt((-4.9E-324));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FastMath.cbrt(0.0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FastMath.acos((-0.25));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FastMath.acos(0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FastMath.acos((-513.5797601));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FastMath.acos(1823.243161184011);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FastMath.acos(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FastMath.asin(0.0F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FastMath.asin((-1.0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FastMath.asin(1.0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FastMath.asin((-1023));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FastMath.asin(2383);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FastMath.asin(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FastMath.atan2(8.695300440476606, 2.2250738585072014E-308);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FastMath.atan2((-1.092946505183349), 0.0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FastMath.atan2(6.602496401651853E-9, 0.0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FastMath.atan2(9.219544613762692E-9, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FastMath.atan2(991.598439, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FastMath.atan2(Double.NEGATIVE_INFINITY, (-2.3580462372762525E-230));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FastMath.atan2(Double.POSITIVE_INFINITY, 1564.295);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FastMath.atan2(0L, 4.9E-324);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FastMath.atan2(0.0, (-792.0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FastMath.atan2(Double.NaN, 0.39499378204345703);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FastMath.atan2(3111.4438, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FastMath.atan2((-8.0E298), 1728.6);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FastMath.asin((-3.081552929643174E-9));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FastMath.atan(0.0F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FastMath.tan(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FastMath.tan(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FastMath.tan(0.0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FastMath.cos(1026.6);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FastMath.cos((-1979.594051984));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FastMath.cos(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FastMath.cos(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FastMath.sin((-20.0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FastMath.sin((-1880.5133));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FastMath.sin(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FastMath.sin(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FastMath.sin(-0.0F);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FastMath.sin(0.0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FastMath.cos(1.956199868121249E282);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FastMath.sin((-1991700178));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FastMath.tan(4.4349051935432266E36);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FastMath.sin((-2.14693453E9F));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FastMath.tan(1.9284920867867998E217);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FastMath.tan((-1.7976931348623157E308));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FastMath.cos(1.3831214731781958E184);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FastMath.sin((-2146934529));
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FastMath.cos((-1.5453111533064765E19));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FastMath.tan(1728.6);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FastMath.sin(0.15);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FastMath.pow(1210.8927493574324, (-2675));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FastMath.pow(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double double0 = FastMath.pow((double) 2047L, (-8.0E298));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double double0 = FastMath.pow((double) 1444, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double double0 = FastMath.pow((-3.43338934259355E-8), (double) (-127));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double double0 = FastMath.pow((-3539.708171), (-3539.708171));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double double0 = FastMath.pow((-435.97525578), 1.633123935319537E16);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double double0 = FastMath.pow((-803.841), (-3.855478664503271E21));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double double0 = FastMath.pow((double) (-2868.4F), (double) Float.NEGATIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 0.4431571960449219);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.NEGATIVE_INFINITY, (-8.77224935488516E-8));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.POSITIVE_INFINITY, (double) 2137.7693F);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double double0 = FastMath.pow(Double.POSITIVE_INFINITY, (-4994.7482));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double double0 = FastMath.pow(0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, (double) (-39.780422F));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, 1431.178);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double double0 = FastMath.pow(Double.NaN, (-1.1381252786264335E-305));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double double0 = FastMath.pow(544.28478395, 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double double0 = FastMath.log1p(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double double0 = FastMath.log1p((-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double double0 = FastMath.log((-906.05442579), 1.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double double0 = FastMath.log1p(2.4414062E-4F);
      assertEquals(2.441108275273627E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double double0 = FastMath.log10(0.625);
      assertEquals((-0.2041199826559248), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double double0 = FastMath.pow((-2.62524392470767E-310), (double) 2448.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double double0 = FastMath.log10(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double double0 = FastMath.log((double) Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double double0 = FastMath.log1p((-12.343134737693125));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double double0 = FastMath.log(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double double0 = FastMath.log(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double double0 = FastMath.expm1((-4.547473508864641E-13));
      assertEquals((-4.547473508863607E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double double0 = FastMath.expm1(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double double0 = FastMath.expm1(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double double0 = FastMath.pow(1.15, (-1377.674257258));
      assertEquals(2.3886244513052046E-84, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double double0 = FastMath.expm1(2.677136737066629E238);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double double0 = FastMath.expm1((-715));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double double0 = FastMath.expm1((-765.9984804394));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double double0 = FastMath.exp((-615.89));
      assertEquals(3.329442665956672E-268, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double double0 = FastMath.exp((-1710.683F));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      float float0 = FastMath.signum(183.30925F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      float float0 = FastMath.signum((-12.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      float float0 = FastMath.signum(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double double0 = FastMath.signum(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double double0 = FastMath.signum((-2736.85874));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double double0 = FastMath.signum(4.005882964287806E-150);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double double0 = FastMath.atanh(0.0036);
      assertEquals(0.0036000155521209334, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      double double0 = FastMath.atanh(0.087);
      assertEquals(0.08722050326312049, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double double0 = FastMath.atanh(0.15);
      assertEquals(0.15114043593646678, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double double0 = FastMath.asinh(0.017453292519943295);
      assertEquals(0.017452406545229723, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double double0 = FastMath.asinh((-0.05483113556160755));
      assertEquals((-0.054803698123075485), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double double0 = FastMath.asinh((-0.1428571423679182));
      assertEquals((-0.1423756426834967), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double double0 = FastMath.asinh((-2371.1577977953702));
      assertEquals((-8.46428086214257), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double double0 = FastMath.tanh((-3.8146973E-6F));
      assertEquals((-3.814697265606496E-6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double double0 = FastMath.tanh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double double0 = FastMath.tanh(1728.6);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double double0 = FastMath.tanh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double double0 = FastMath.tanh((-2469.79845));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double double0 = FastMath.sinh(2.2697491363202484E-235);
      assertEquals(2.2697491363202484E-235, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double double0 = FastMath.sinh(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double double0 = FastMath.sinh((-28.048488277100073));
      assertEquals((-7.590557750375591E11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double double0 = FastMath.sinh((-1495.203768074));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double double0 = FastMath.sinh(328.5089933532);
      assertEquals(2.336754422081656E142, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      double double0 = FastMath.sinh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double double0 = FastMath.sinh(3794.4868922269775);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double double0 = FastMath.cosh((-212.632));
      assertEquals(1.1063034847720834E92, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double double0 = FastMath.cosh((-2681.9573F));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double double0 = FastMath.cosh(37.67226204);
      assertEquals(1.1476924617370088E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double double0 = FastMath.cosh((-2.4414062E-4F));
      assertEquals(1.0000000298023226, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double double0 = FastMath.cosh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double double0 = FastMath.cosh(1540.545791259);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double double0 = FastMath.toDegrees(4.9E-324);
      assertEquals(2.8E-322, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double double0 = FastMath.toRadians((-1649.8315819));
      assertEquals((-28.794993207541484), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = FastMath.getExponent(2544.1568);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = FastMath.getExponent(1.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double double0 = FastMath.atan(557.296552);
      assertEquals(1.569001951927242, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      float float0 = FastMath.nextUp(Float.NEGATIVE_INFINITY);
      assertEquals((-3.4028235E38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double double0 = FastMath.acosh(1.5574076175689697);
      assertEquals(1.0120947558502873, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double double0 = FastMath.expm1(1);
      assertEquals(1.7182818284590453, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = FastMath.round((float) (-12));
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double double0 = FastMath.tan((-1712.0796107235553));
      assertEquals(0.08861635996133933, double0, 0.01);
  }
}

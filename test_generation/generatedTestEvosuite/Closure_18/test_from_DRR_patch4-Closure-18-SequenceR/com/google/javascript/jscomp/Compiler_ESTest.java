/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:35:03 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AliasKeywords;
import com.google.javascript.jscomp.AstValidator;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorFormat;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.GlobalVarReferenceMap;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.protobuf.ByteString;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.SQLException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.logging.MockFileHandler;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      JsAst jsAst0 = null;
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.RAW;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      // Undeclared exception!
      try { 
        compiler0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Logger logger0 = Tracer.logger;
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("7*'D623", true);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, sourceInformationAnnotator0, (ScopeCreator) null);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler2, sourceInformationAnnotator0);
      SyntheticAst syntheticAst0 = new SyntheticAst("7*'D623");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7*'D623";
      stringArray0[1] = "7*'D623";
      JSError jSError0 = nodeTraversal1.makeError(node0, checkLevel0, compiler2.MOTION_ITERATIONS_ERROR, stringArray0);
      // Undeclared exception!
      try { 
        compiler1.report(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Logger logger0 = Logger.getLogger("NOT SUPPORTED");
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SyntheticAst syntheticAst0 = new SyntheticAst("NOT SUPPORTED");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "JSC_INEXISTENT_ENUM_ELEMENT";
      stringArray0[1] = "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode";
      stringArray0[2] = "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode";
      JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, diagnosticType0, stringArray0);
      compiler0.report(jSError0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      printStreamErrorManager0.getErrors();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      compiler1.getTypedScopeCreator();
      String[] stringArray0 = new String[9];
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      LightweightMessageFormatter.withoutSource();
      stringArray0[7] = null;
      stringArray0[8] = null;
      JSError.make((String) null, (-3836), 307, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      // Undeclared exception!
      try { 
        compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("ExperimentalMapKeay");
      compiler_CodeBuilder0.endsWith("aTqdK(;c6>ea`");
      Compiler compiler0 = new Compiler((PrintStream) null);
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      Logger logger0 = Logger.getAnonymousLogger();
      Logger logger1 = logger0.getParent();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger1);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      compiler1.getSourceRegion("aTqdK(;c6>ea`", (-1));
      compiler1.setProgress(3061.999976813626);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Compiler.CodeBuilder compiler_CodeBuilder1 = new Compiler.CodeBuilder();
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        compiler1.normalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_MISSING_ENTRY_ERROR");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getResult();
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
      TypedScopeCreator typedScopeCreator0 = null;
      try {
        typedScopeCreator0 = new TypedScopeCreator(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rbVj0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "rbVj0";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callable0).call();
      Compiler.runCallable(callable0, true, true);
      objectArray0[4] = (Object) mockFileOutputStream0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "rbVj0";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "rbVj0", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      AstValidator astValidator0 = new AstValidator();
      compiler0.process(astValidator0);
      compiler0.getErrorManager();
      LightweightMessageFormatter.withoutSource();
      // Undeclared exception!
      try { 
        compiler0.buildKnownSymbolTable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion("", (-1));
      compiler0.setProgress(Double.POSITIVE_INFINITY);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertEquals("", compiler_CodeBuilder0.toString());
      
      compiler_CodeBuilder0.endsWith("mentalMapKeay");
      compiler_CodeBuilder0.append("base");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("base", "base");
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>(2);
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler((PrintStream) null);
      String string0 = "T@H9K[va6?qq";
      // Undeclared exception!
      try { 
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Locale locale0 = Locale.JAPANESE;
      Object object0 = new Object();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Compiler.runCallable((Callable<Object>) null, true, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getDiagnosticGroups();
      // Undeclared exception!
      try { 
        compiler0.setState((Compiler.IntermediateState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = "ExperimentalMapKeay";
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("ExperimentalMapKeay");
      compiler_CodeBuilder0.endsWith("aTqdK(;c6>ea`");
      compiler_CodeBuilder1.append("ExperimentalMapKeay");
      // Undeclared exception!
      try { 
        compiler_CodeBuilder1.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler$CodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MockFileHandler mockFileHandler0 = new MockFileHandler();
      Level level0 = Level.OFF;
      String string0 = "~29Y[C";
      String string1 = "px61I@\"Y*Nk,=#b";
      String string2 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) loggerErrorManager0;
      objectArray0[1] = (Object) null;
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Logger logger0 = Logger.getLogger("z+g3~\"rhL-,Oi");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      MockFileHandler mockFileHandler0 = new MockFileHandler();
      Level level0 = Level.OFF;
      // Undeclared exception!
      try { 
        compiler1.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "rbVj0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rbVj0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "rbVj0";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callable0).call();
      Compiler.runCallable(callable0, true, true);
      objectArray0[4] = (Object) mockFileOutputStream0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "rbVj0";
      mockPrintStream0.format(locale0, "rbVj0", objectArray0);
      SyntheticAst syntheticAst0 = new SyntheticAst("rbVj0");
      InputId inputId0 = syntheticAst0.getInputId();
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.getInput(inputId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      printStreamErrorManager0.getErrors();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      compiler1.getTypedScopeCreator();
      String[] stringArray0 = new String[9];
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[5] = null;
      compiler0.setProgress((-3836));
      // Undeclared exception!
      try { 
        compiler1.loadLibraryCode("=xVAOA~Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      printStreamErrorManager0.getErrors();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      compiler1.getTypedScopeCreator();
      compiler0.setProgress((-3836));
      // Undeclared exception!
      try { 
        compiler1.loadLibraryCode("=xVAOA~Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y Uuil6;");
      Compiler compiler0 = new Compiler();
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "!S@M'f", "!S@M'f");
      inferJSDocInfo0.process(node0, node0);
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(1577);
      CompilerOptions compilerOptions0 = compiler1.options;
      // Undeclared exception!
      try { 
        compiler1.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) null, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      printStreamErrorManager0.getErrors();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      compiler1.getTypedScopeCreator();
      String[] stringArray0 = new String[9];
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[5] = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions1 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions1);
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      // Undeclared exception!
      try { 
        compiler1.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList1, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PrintStreamErrorManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.throwInternalError("H3'R:O;U?)TtH", (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // H3'R:O;U?)TtH
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(Double.POSITIVE_INFINITY);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("base", compiler_CodeBuilder0.toString());
      assertEquals("base", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>(2089443549);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      Compiler compiler1 = new Compiler();
      CompilerOptions compilerOptions0 = compiler1.options;
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+1%WH1[aYIe5kTB5/");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      compiler0.setProgress(1173.47);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("+1%WH1[aYIe5kTB5/");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("+1%WH1[aYIe5kTB5/", compiler_CodeBuilder0.toString());
      assertEquals("+1%WH1[aYIe5kTB5/", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      Node node0 = new Node((-3836), 0, (-2));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals((-3836), node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      
      int int0 = node0.getIntProp((-2));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, int0);
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals((-3836), node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      
      JSError[] jSErrorArray0 = compiler0.getErrors();
      assertNotNull(jSErrorArray0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, jSErrorArray0.length);
      
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder0, 17, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      MockFile mockFile0 = new MockFile("base");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(jSSourceFile0);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("base", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("base", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("base", jSSourceFile0.toString());
      assertFalse(jSSourceFile0.isExtern());
      assertEquals("base", jSSourceFile0.getOriginalPath());
      assertEquals("base", jSSourceFile0.getName());
      
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      assertNotNull(jsAst0);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("base", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("base", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("base", jSSourceFile0.toString());
      assertFalse(jSSourceFile0.isExtern());
      assertEquals("base", jSSourceFile0.getOriginalPath());
      assertEquals("base", jSSourceFile0.getName());
      
      CompilerOptions compilerOptions0 = compiler0.options;
      assertNull(compilerOptions0);
      
      // Undeclared exception!
      try { 
        compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      assertNotNull(diagnosticGroup0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      boolean boolean1 = diagnosticGroup0.matches(compiler0.OPTIMIZE_LOOP_ERROR);
      assertTrue(boolean1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(boolean1 == boolean0);
      
      DiagnosticGroup diagnosticGroup1 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      assertNotNull(diagnosticGroup1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertSame(diagnosticGroup1, diagnosticGroup0);
      
      DiagnosticGroups.VISIBILITY = diagnosticGroup0;
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.initCompilerOptionsIfTesting();
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      
      ErrorReporter errorReporter0 = compiler0.getDefaultErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      assertNotNull(reverseAbstractInterpreter0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        compiler0.parse((SourceFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test026()  throws Throwable  {
//       Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
//       assertNotNull(compiler_CodeBuilder0);
//       assertEquals("", compiler_CodeBuilder0.toString());
//       
//       MockPrintStream mockPrintStream0 = new MockPrintStream("d{(yJ[io");
//       assertNotNull(mockPrintStream0);
//       
//       Locale locale0 = Locale.GERMAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       
//       Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
//       doReturn((Object) null).when(callable0).call();
//       Object object0 = Compiler.runCallable(callable0, false, false);
//       assertNull(object0);
//       
//       MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
//       assertNotNull(mockPrintStream1);
//       assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
//       
//       Object[] objectArray0 = new Object[9];
//       objectArray0[0] = (Object) mockPrintStream1;
//       objectArray0[1] = (Object) callable0;
//       Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
//       doReturn((Object) null).when(callable1).call();
//       Object object1 = Compiler.runCallableWithLargeStack(callable1);
//       assertNull(object1);
//       
//       objectArray0[2] = null;
//       objectArray0[3] = (Object) "Remove try/catch/finally";
//       objectArray0[4] = (Object) "dCs8+XPw/7Qbg&h.j)D";
//       objectArray0[5] = (Object) callable0;
//       objectArray0[6] = (Object) callable0;
//       objectArray0[7] = null;
//       objectArray0[8] = (Object) "Remove try/catch/finally";
//       PrintStream printStream0 = mockPrintStream1.format(locale0, "d{(yJ[io", objectArray0);
//       assertNotNull(printStream0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertNotSame(mockPrintStream0, mockPrintStream1);
//       assertNotSame(mockPrintStream0, printStream0);
//       assertNotSame(printStream0, mockPrintStream0);
//       assertSame(printStream0, mockPrintStream1);
//       assertNotSame(mockPrintStream1, mockPrintStream0);
//       assertSame(mockPrintStream1, printStream0);
//       assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
//       assertFalse(printStream0.equals((Object)mockPrintStream0));
//       assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
//       assertEquals(9, objectArray0.length);
//       
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       
//       VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
//       assertNotNull(verboseMessageFormatter0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       
//       PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(verboseMessageFormatter0, printStream0);
//       assertNotNull(printStreamErrorManager0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
//       assertEquals(0, printStreamErrorManager0.getWarningCount());
//       assertEquals(0, printStreamErrorManager0.getErrorCount());
//       assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
//       assertFalse(mockPrintStream0.equals((Object)printStream0));
//       assertFalse(printStream0.equals((Object)mockPrintStream0));
//       assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
//       assertEquals(9, objectArray0.length);
//       
//       Logger logger0 = Logger.getAnonymousLogger();
//       assertNotNull(logger0);
//       assertNull(logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       
//       Logger logger1 = logger0.getParent();
//       assertNotNull(logger1);
//       assertNull(logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("", logger1.getName());
//       assertNull(logger1.getResourceBundleName());
//       assertFalse(logger1.equals((Object)logger0));
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger1);
//       assertNotNull(loggerErrorManager0);
//       assertNull(logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("", logger1.getName());
//       assertNull(logger1.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertFalse(logger0.equals((Object)logger1));
//       assertFalse(logger1.equals((Object)logger0));
//       
//       Compiler compiler1 = new Compiler(loggerErrorManager0);
//       assertNotNull(compiler1);
//       assertNull(logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("", logger1.getName());
//       assertNull(logger1.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, compiler1.getProgress(), 0.01);
//       assertEquals(0, compiler1.getWarningCount());
//       assertEquals(0, compiler1.getErrorCount());
//       assertFalse(logger0.equals((Object)logger1));
//       assertFalse(logger1.equals((Object)logger0));
//       assertFalse(compiler1.equals((Object)compiler0));
//       
//       // Undeclared exception!
//       try { 
//         compiler0.parseSyntheticCode("d{(yJ[io", "");
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // duplicate key: lends
//          //
//          verifyException("com.google.common.base.Preconditions", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("base", compiler_CodeBuilder0.toString());
      assertEquals("base", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("base", "base");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: base", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("base", sQLRecoverableException0.getSQLState());
      assertEquals("base", sQLRecoverableException0.getMessage());
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.assumeStrictThis());
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      
      Result result0 = compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertTrue(result0.success);
      assertNotNull(result0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.assumeStrictThis());
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      
      Node node0 = new Node((-1104969743), (-1104969743), 81);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertEquals((-1104969743), node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      
      int int0 = node0.getIntProp(81);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, int0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertEquals((-1104969743), node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      
      JSError[] jSErrorArray0 = compiler0.getErrors();
      assertNotNull(jSErrorArray0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, jSErrorArray0.length);
      
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder1, 2, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: -1104969743
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test028()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       
//       Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
//       assertNotNull(compiler_CodeBuilder0);
//       assertEquals("", compiler_CodeBuilder0.toString());
//       
//       LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
//       assertNotNull(linkedList0);
//       assertEquals(0, linkedList0.size());
//       
//       CompilerOptions compilerOptions0 = compiler0.options;
//       assertNull(compilerOptions0);
//       
//       Stack<SourceFile> stack0 = new Stack<SourceFile>();
//       assertNotNull(stack0);
//       assertEquals(0, stack0.size());
//       assertTrue(stack0.empty());
//       assertTrue(stack0.isEmpty());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[]", stack0.toString());
//       
//       VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
//       assertNotNull(verboseMessageFormatter0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       
//       Logger logger0 = Logger.getGlobal();
//       assertNotNull(logger0);
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       
//       Compiler compiler1 = new Compiler(loggerErrorManager0);
//       assertNotNull(compiler1);
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, compiler1.getWarningCount());
//       assertEquals(0.0, compiler1.getProgress(), 0.01);
//       assertEquals(0, compiler1.getErrorCount());
//       assertFalse(compiler1.equals((Object)compiler0));
//       
//       CompilerOptions compilerOptions1 = compiler1.newCompilerOptions();
//       assertFalse(compilerOptions1.inlineConstantVars);
//       assertFalse(compilerOptions1.collapseAnonymousFunctions);
//       assertFalse(compilerOptions1.optimizeArgumentsArray);
//       assertFalse(compilerOptions1.inlineLocalFunctions);
//       assertFalse(compilerOptions1.gatherCssNames);
//       assertFalse(compilerOptions1.markAsCompiled);
//       assertFalse(compilerOptions1.computeFunctionSideEffects);
//       assertFalse(compilerOptions1.convertToDottedProperties);
//       assertFalse(compilerOptions1.checkTypes);
//       assertFalse(compilerOptions1.exportTestFunctions);
//       assertFalse(compilerOptions1.checkSuspiciousCode);
//       assertFalse(compilerOptions1.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions1.removeUnusedLocalVars);
//       assertFalse(compilerOptions1.reserveRawExports);
//       assertFalse(compilerOptions1.ambiguateProperties);
//       assertFalse(compilerOptions1.removeTryCatchFinally);
//       assertFalse(compilerOptions1.smartNameRemoval);
//       assertFalse(compilerOptions1.optimizeParameters);
//       assertFalse(compilerOptions1.disambiguateProperties);
//       assertFalse(compilerOptions1.rewriteFunctionExpressions);
//       assertFalse(compilerOptions1.moveFunctionDeclarations);
//       assertFalse(compilerOptions1.crossModuleCodeMotion);
//       assertFalse(compilerOptions1.generatePseudoNames);
//       assertFalse(compilerOptions1.foldConstants);
//       assertFalse(compilerOptions1.removeDeadCode);
//       assertFalse(compilerOptions1.coalesceVariableNames);
//       assertFalse(compilerOptions1.jqueryPass);
//       assertFalse(compilerOptions1.aliasKeywords);
//       assertFalse(compilerOptions1.markNoSideEffectCalls);
//       assertFalse(compilerOptions1.optimizeReturns);
//       assertFalse(compilerOptions1.prettyPrint);
//       assertFalse(compilerOptions1.recordFunctionInformation);
//       assertFalse(compilerOptions1.aliasExternals);
//       assertFalse(compilerOptions1.collapseProperties);
//       assertFalse(compilerOptions1.generateExports);
//       assertFalse(compilerOptions1.deadAssignmentElimination);
//       assertFalse(compilerOptions1.inlineVariables);
//       assertFalse(compilerOptions1.aliasAllStrings);
//       assertFalse(compilerOptions1.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions1.collapseVariableDeclarations);
//       assertFalse(compilerOptions1.removeUnusedClassProperties);
//       assertFalse(compilerOptions1.inlineGetters);
//       assertFalse(compilerOptions1.checkSymbols);
//       assertFalse(compilerOptions1.closurePass);
//       assertFalse(compilerOptions1.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions1.removeUnusedVars);
//       assertFalse(compilerOptions1.optimizeCalls);
//       assertFalse(compilerOptions1.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions1.ideMode);
//       assertFalse(compilerOptions1.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions1.lineBreak);
//       assertFalse(compilerOptions1.inlineFunctions);
//       assertFalse(compilerOptions1.printInputDelimiter);
//       assertFalse(compilerOptions1.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions1.crossModuleMethodMotion);
//       assertFalse(compilerOptions1.labelRenaming);
//       assertFalse(compilerOptions1.checkControlStructures);
//       assertNotNull(compilerOptions1);
//       assertEquals(0.0, compiler0.getProgress(), 0.01);
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, compiler1.getWarningCount());
//       assertEquals(0.0, compiler1.getProgress(), 0.01);
//       assertEquals(0, compiler1.getErrorCount());
//       assertFalse(compilerOptions1.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions1.getTracerMode());
//       assertFalse(compilerOptions1.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions1.getTweakProcessing());
//       assertFalse(compilerOptions1.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions1.getLanguageIn());
//       assertFalse(compilerOptions1.getInferTypes());
//       assertFalse(compilerOptions1.assumeStrictThis());
//       assertFalse(compilerOptions1.isRemoveUnusedClassProperties());
//       assertNull(compilerOptions1.getLanguageOut());
//       assertNotSame(compiler0, compiler1);
//       assertNotSame(compiler1, compiler0);
//       assertFalse(compiler0.equals((Object)compiler1));
//       assertFalse(compiler1.equals((Object)compiler0));
//       
//       // Undeclared exception!
//       try { 
//         compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) stack0, compilerOptions1);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // org.evosuite.runtime.mock.java.lang.MockThrowable: duplicate key: modifies
//          //
//          verifyException("com.google.javascript.jscomp.Compiler", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        compiler0.processAMDAndCommonJSModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y Uuil6;");
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "!S@M'f", "!S@M'f");
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      assertEquals(2, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(1577);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "84!;`l<&y\"%uZ`W!h4");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("0xVWi'Ae+;J", "base");
      assertNotNull(sQLRecoverableException0);
      assertEquals("base", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("0xVWi'Ae+;J", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: 0xVWi'Ae+;J", sQLRecoverableException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("15M+ RQ");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("15M+ RQ", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: 15M+ RQ", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      VariableMap variableMap0 = compiler0.getPropertyMap();
      assertNull(variableMap0);
      assertEquals(2, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      
      Node node1 = compiler0.parseSyntheticCode("!", "!");
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node1);
      assertEquals(3, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(132, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertEquals("!", node1.getSourceFileName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        compiler0.newTracer("a\"sd0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      JSError[] jSErrorArray0 = printStreamErrorManager0.getErrors();
      assertNotNull(jSErrorArray0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, jSErrorArray0.length);
      
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertEquals(0, compiler1.getErrorCount());
      assertEquals(0, compiler1.getWarningCount());
      assertFalse(compiler1.equals((Object)compiler0));
      
      MemoizedScopeCreator memoizedScopeCreator0 = compiler1.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertEquals(0, compiler1.getErrorCount());
      assertEquals(0, compiler1.getWarningCount());
      assertNotSame(compiler0, compiler1);
      assertNotSame(compiler1, compiler0);
      assertFalse(compiler0.equals((Object)compiler1));
      assertFalse(compiler1.equals((Object)compiler0));
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      LightweightMessageFormatter lightweightMessageFormatter1 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter1);
      assertNotSame(lightweightMessageFormatter1, lightweightMessageFormatter0);
      assertFalse(lightweightMessageFormatter1.equals((Object)lightweightMessageFormatter0));
      
      stringArray0[7] = null;
      stringArray0[8] = null;
      JSError jSError0 = JSError.make((String) null, (-3836), 307, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      assertEquals((-3836), jSError0.lineNumber);
      assertNotNull(jSError0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(307, jSError0.getCharno());
      assertEquals((-3836), jSError0.getLineNumber());
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertNotSame(compiler0, compiler1);
      assertFalse(compiler0.equals((Object)compiler1));
      assertEquals(9, stringArray0.length);
      
      String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertEquals((-3836), jSError0.lineNumber);
      assertNotNull(string0);
      assertEquals("WARNING - Exceeded max number of optimization iterations: null\n", string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(307, jSError0.getCharno());
      assertEquals((-3836), jSError0.getLineNumber());
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertNotSame(compiler0, compiler1);
      assertNotSame(lightweightMessageFormatter0, lightweightMessageFormatter1);
      assertFalse(compiler0.equals((Object)compiler1));
      assertFalse(lightweightMessageFormatter0.equals((Object)lightweightMessageFormatter1));
      assertEquals(9, stringArray0.length);
      
      printStreamErrorManager0.setTypedPercent((-168.1041758896487));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals((-168.1041758896487), printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotSame(compiler0, compiler1);
      assertNotSame(lightweightMessageFormatter0, lightweightMessageFormatter1);
      assertFalse(compiler0.equals((Object)compiler1));
      assertFalse(lightweightMessageFormatter0.equals((Object)lightweightMessageFormatter1));
      
      Compiler compiler2 = new Compiler();
      assertNotNull(compiler2);
      assertEquals(0.0, compiler2.getProgress(), 0.01);
      assertFalse(compiler2.equals((Object)compiler0));
      assertFalse(compiler2.equals((Object)compiler1));
      
      // Undeclared exception!
      try { 
        compiler2.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = Compiler.getReleaseVersion();
      assertNotNull(string0);
      assertEquals("Unversioned directory", string0);
      
      MemoizedScopeCreator memoizedScopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      assertNotNull(peepholeSubstituteAlternateSyntax0);
      
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilerOptions compilerOptions0 = compiler0.options;
      assertNull(compilerOptions0);
      
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y Uuil6;");
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      Compiler compiler1 = nodeTraversal0.getCompiler();
      assertNotNull(compiler1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertSame(compiler0, compiler1);
      assertSame(compiler1, compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "!S@M'f", "!S@M'f");
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(2, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertSame(compiler0, compiler1);
      
      inferJSDocInfo0.process(node0, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(2, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertSame(compiler0, compiler1);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(1577);
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CompilerOptions compilerOptions0 = compiler1.options;
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.isRemoveUnusedClassProperties());
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      
      // Undeclared exception!
      try { 
        compiler1.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) null, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(":", ":");
      assertNotNull(jSSourceFile0);
      assertEquals(":", jSSourceFile0.getOriginalPath());
      assertFalse(jSSourceFile0.isExtern());
      assertEquals(":", jSSourceFile0.toString());
      assertEquals(":", jSSourceFile0.getCode());
      assertEquals(":", jSSourceFile0.getName());
      
      SourceFile sourceFile0 = SourceFile.fromCode(":", ":", "{/yd{W<&+~TM^$");
      assertNotNull(sourceFile0);
      assertEquals(":", sourceFile0.toString());
      assertEquals("{/yd{W<&+~TM^$", sourceFile0.getCode());
      assertEquals(":", sourceFile0.getName());
      assertEquals(":", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
      
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      assertNotNull(jsAst0);
      assertEquals(":", jSSourceFile0.getOriginalPath());
      assertFalse(jSSourceFile0.isExtern());
      assertEquals(":", jSSourceFile0.toString());
      assertEquals(":", jSSourceFile0.getCode());
      assertEquals(":", jSSourceFile0.getName());
      
      // Undeclared exception!
      try { 
        compiler0.acceptConstKeyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(Double.POSITIVE_INFINITY);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("base", compiler_CodeBuilder0.toString());
      assertEquals("base", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      compiler_CodeBuilder0.reset();
      assertEquals("", compiler_CodeBuilder0.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      
      Node node0 = new Node(2458, 1, (-1104969743));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node0);
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(2458, node0.getType());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      
      int int0 = node0.getIntProp((-1104969743));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, int0);
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(2458, node0.getType());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      
      // Undeclared exception!
      try { 
        compiler0.getErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = Compiler.getReleaseVersion();
      assertNotNull(string0);
      assertEquals("Unversioned directory", string0);
      
      MemoizedScopeCreator memoizedScopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      assertNotNull(peepholeSubstituteAlternateSyntax0);
      
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = "com.google.javascript.jscomp.DefaultPassConfig$54";
      String string2 = "EVAL_ERROR_FUNCTION_TYPE";
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("EVAL_ERROR_FUNCTION_TYPE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertNotNull(logger0);
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      
      loggerErrorManager0.printSummary();
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      assertNotNull(peepholeSubstituteAlternateSyntax0);
      
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilerOptions compilerOptions0 = compiler0.options;
      assertNull(compilerOptions0);
      
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y Uuil6;");
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Compiler compiler1 = nodeTraversal0.getCompiler();
      assertNotNull(compiler1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertSame(compiler0, compiler1);
      assertSame(compiler1, compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "!S@M'f", "!S@M'f");
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertNotNull(node0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertSame(compiler0, compiler1);
      
      inferJSDocInfo0.process(node0, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertSame(compiler0, compiler1);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertNotNull(compilerOptions0);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.assumeStrictThis());
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.getInferTypes());
      
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilerOptions compilerOptions1 = new CompilerOptions();
      assertFalse(compilerOptions1.checkControlStructures);
      assertFalse(compilerOptions1.closurePass);
      assertFalse(compilerOptions1.inlineGetters);
      assertFalse(compilerOptions1.checkSuspiciousCode);
      assertFalse(compilerOptions1.removeDeadCode);
      assertFalse(compilerOptions1.inlineFunctions);
      assertFalse(compilerOptions1.optimizeCalls);
      assertFalse(compilerOptions1.devirtualizePrototypeMethods);
      assertFalse(compilerOptions1.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions1.moveFunctionDeclarations);
      assertFalse(compilerOptions1.flowSensitiveInlineVariables);
      assertFalse(compilerOptions1.generateExports);
      assertFalse(compilerOptions1.foldConstants);
      assertFalse(compilerOptions1.smartNameRemoval);
      assertFalse(compilerOptions1.checkSymbols);
      assertFalse(compilerOptions1.ideMode);
      assertFalse(compilerOptions1.disambiguateProperties);
      assertFalse(compilerOptions1.optimizeReturns);
      assertFalse(compilerOptions1.removeUnusedClassProperties);
      assertFalse(compilerOptions1.collapseProperties);
      assertFalse(compilerOptions1.coalesceVariableNames);
      assertFalse(compilerOptions1.inlineLocalFunctions);
      assertFalse(compilerOptions1.aliasKeywords);
      assertFalse(compilerOptions1.jqueryPass);
      assertFalse(compilerOptions1.markNoSideEffectCalls);
      assertFalse(compilerOptions1.inlineConstantVars);
      assertFalse(compilerOptions1.optimizeParameters);
      assertFalse(compilerOptions1.collapseVariableDeclarations);
      assertFalse(compilerOptions1.prettyPrint);
      assertFalse(compilerOptions1.collapseAnonymousFunctions);
      assertFalse(compilerOptions1.ambiguateProperties);
      assertFalse(compilerOptions1.computeFunctionSideEffects);
      assertFalse(compilerOptions1.inlineVariables);
      assertFalse(compilerOptions1.aliasExternals);
      assertFalse(compilerOptions1.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions1.removeTryCatchFinally);
      assertFalse(compilerOptions1.generatePseudoNames);
      assertFalse(compilerOptions1.crossModuleCodeMotion);
      assertFalse(compilerOptions1.aliasAllStrings);
      assertFalse(compilerOptions1.optimizeArgumentsArray);
      assertFalse(compilerOptions1.convertToDottedProperties);
      assertFalse(compilerOptions1.rewriteFunctionExpressions);
      assertFalse(compilerOptions1.gatherCssNames);
      assertFalse(compilerOptions1.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions1.recordFunctionInformation);
      assertFalse(compilerOptions1.lineBreak);
      assertFalse(compilerOptions1.checkTypes);
      assertFalse(compilerOptions1.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions1.markAsCompiled);
      assertFalse(compilerOptions1.deadAssignmentElimination);
      assertFalse(compilerOptions1.printInputDelimiter);
      assertFalse(compilerOptions1.exportTestFunctions);
      assertFalse(compilerOptions1.reserveRawExports);
      assertFalse(compilerOptions1.labelRenaming);
      assertFalse(compilerOptions1.crossModuleMethodMotion);
      assertFalse(compilerOptions1.removeUnusedLocalVars);
      assertFalse(compilerOptions1.removeUnusedVars);
      assertNotNull(compilerOptions1);
      assertFalse(compilerOptions1.getInferTypes());
      assertFalse(compilerOptions1.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions1.getTracerMode());
      assertFalse(compilerOptions1.isExternExportsEnabled());
      assertNull(compilerOptions1.getLanguageOut());
      assertFalse(compilerOptions1.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions1.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions1.getLanguageIn());
      assertFalse(compilerOptions1.assumeStrictThis());
      assertFalse(compilerOptions1.isRemoveUnusedClassProperties());
      assertFalse(compilerOptions1.equals((Object)compilerOptions0));
      
      CompilerOptions compilerOptions2 = compiler0.options;
      assertFalse(compilerOptions2.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions2.recordFunctionInformation);
      assertFalse(compilerOptions2.coalesceVariableNames);
      assertFalse(compilerOptions2.lineBreak);
      assertFalse(compilerOptions2.aliasKeywords);
      assertFalse(compilerOptions2.optimizeReturns);
      assertFalse(compilerOptions2.collapseProperties);
      assertFalse(compilerOptions2.crossModuleMethodMotion);
      assertFalse(compilerOptions2.prettyPrint);
      assertFalse(compilerOptions2.foldConstants);
      assertFalse(compilerOptions2.ideMode);
      assertFalse(compilerOptions2.jqueryPass);
      assertFalse(compilerOptions2.removeDeadCode);
      assertFalse(compilerOptions2.printInputDelimiter);
      assertFalse(compilerOptions2.checkControlStructures);
      assertFalse(compilerOptions2.closurePass);
      assertFalse(compilerOptions2.inlineGetters);
      assertFalse(compilerOptions2.removeTryCatchFinally);
      assertFalse(compilerOptions2.ambiguateProperties);
      assertFalse(compilerOptions2.computeFunctionSideEffects);
      assertFalse(compilerOptions2.inlineVariables);
      assertFalse(compilerOptions2.removeUnusedClassProperties);
      assertFalse(compilerOptions2.aliasExternals);
      assertFalse(compilerOptions2.aliasAllStrings);
      assertFalse(compilerOptions2.devirtualizePrototypeMethods);
      assertFalse(compilerOptions2.collapseVariableDeclarations);
      assertFalse(compilerOptions2.flowSensitiveInlineVariables);
      assertFalse(compilerOptions2.collapseAnonymousFunctions);
      assertFalse(compilerOptions2.checkSymbols);
      assertFalse(compilerOptions2.markNoSideEffectCalls);
      assertFalse(compilerOptions2.inlineLocalFunctions);
      assertFalse(compilerOptions2.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions2.checkTypes);
      assertFalse(compilerOptions2.gatherCssNames);
      assertFalse(compilerOptions2.optimizeParameters);
      assertFalse(compilerOptions2.optimizeCalls);
      assertFalse(compilerOptions2.smartNameRemoval);
      assertFalse(compilerOptions2.moveFunctionDeclarations);
      assertFalse(compilerOptions2.removeUnusedVars);
      assertFalse(compilerOptions2.crossModuleCodeMotion);
      assertFalse(compilerOptions2.generatePseudoNames);
      assertFalse(compilerOptions2.inlineConstantVars);
      assertFalse(compilerOptions2.labelRenaming);
      assertFalse(compilerOptions2.inlineFunctions);
      assertFalse(compilerOptions2.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions2.convertToDottedProperties);
      assertFalse(compilerOptions2.disambiguateProperties);
      assertFalse(compilerOptions2.rewriteFunctionExpressions);
      assertFalse(compilerOptions2.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions2.removeUnusedLocalVars);
      assertFalse(compilerOptions2.generateExports);
      assertFalse(compilerOptions2.optimizeArgumentsArray);
      assertFalse(compilerOptions2.deadAssignmentElimination);
      assertFalse(compilerOptions2.markAsCompiled);
      assertFalse(compilerOptions2.exportTestFunctions);
      assertFalse(compilerOptions2.checkSuspiciousCode);
      assertFalse(compilerOptions2.reserveRawExports);
      assertNotNull(compilerOptions2);
      assertFalse(compilerOptions2.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions2.getTweakProcessing());
      assertFalse(compilerOptions2.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions2.getTracerMode());
      assertFalse(compilerOptions2.shouldColorizeErrorOutput());
      assertNull(compilerOptions2.getLanguageOut());
      assertFalse(compilerOptions2.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions2.assumeStrictThis());
      assertFalse(compilerOptions2.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions2.getLanguageIn());
      assertNotSame(compilerOptions2, compilerOptions0);
      assertNotSame(compilerOptions2, compilerOptions1);
      assertFalse(compilerOptions2.equals((Object)compilerOptions0));
      assertFalse(compilerOptions2.equals((Object)compilerOptions1));
      
      Result result0 = compiler1.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions2);
      assertFalse(compilerOptions2.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions2.recordFunctionInformation);
      assertFalse(compilerOptions2.coalesceVariableNames);
      assertFalse(compilerOptions2.lineBreak);
      assertFalse(compilerOptions2.aliasKeywords);
      assertFalse(compilerOptions2.optimizeReturns);
      assertFalse(compilerOptions2.collapseProperties);
      assertFalse(compilerOptions2.crossModuleMethodMotion);
      assertFalse(compilerOptions2.prettyPrint);
      assertFalse(compilerOptions2.foldConstants);
      assertFalse(compilerOptions2.ideMode);
      assertFalse(compilerOptions2.jqueryPass);
      assertFalse(compilerOptions2.removeDeadCode);
      assertFalse(compilerOptions2.printInputDelimiter);
      assertFalse(compilerOptions2.checkControlStructures);
      assertFalse(compilerOptions2.closurePass);
      assertFalse(compilerOptions2.inlineGetters);
      assertFalse(compilerOptions2.removeTryCatchFinally);
      assertFalse(compilerOptions2.ambiguateProperties);
      assertFalse(compilerOptions2.computeFunctionSideEffects);
      assertFalse(compilerOptions2.inlineVariables);
      assertFalse(compilerOptions2.removeUnusedClassProperties);
      assertFalse(compilerOptions2.aliasExternals);
      assertFalse(compilerOptions2.aliasAllStrings);
      assertFalse(compilerOptions2.devirtualizePrototypeMethods);
      assertFalse(compilerOptions2.collapseVariableDeclarations);
      assertFalse(compilerOptions2.flowSensitiveInlineVariables);
      assertFalse(compilerOptions2.collapseAnonymousFunctions);
      assertFalse(compilerOptions2.checkSymbols);
      assertFalse(compilerOptions2.markNoSideEffectCalls);
      assertFalse(compilerOptions2.inlineLocalFunctions);
      assertFalse(compilerOptions2.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions2.checkTypes);
      assertFalse(compilerOptions2.gatherCssNames);
      assertFalse(compilerOptions2.optimizeParameters);
      assertFalse(compilerOptions2.optimizeCalls);
      assertFalse(compilerOptions2.smartNameRemoval);
      assertFalse(compilerOptions2.moveFunctionDeclarations);
      assertFalse(compilerOptions2.removeUnusedVars);
      assertFalse(compilerOptions2.crossModuleCodeMotion);
      assertFalse(compilerOptions2.generatePseudoNames);
      assertFalse(compilerOptions2.inlineConstantVars);
      assertFalse(compilerOptions2.labelRenaming);
      assertFalse(compilerOptions2.inlineFunctions);
      assertFalse(compilerOptions2.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions2.convertToDottedProperties);
      assertFalse(compilerOptions2.disambiguateProperties);
      assertFalse(compilerOptions2.rewriteFunctionExpressions);
      assertFalse(compilerOptions2.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions2.removeUnusedLocalVars);
      assertFalse(compilerOptions2.generateExports);
      assertFalse(compilerOptions2.optimizeArgumentsArray);
      assertFalse(compilerOptions2.deadAssignmentElimination);
      assertFalse(compilerOptions2.markAsCompiled);
      assertFalse(compilerOptions2.exportTestFunctions);
      assertFalse(compilerOptions2.checkSuspiciousCode);
      assertFalse(compilerOptions2.reserveRawExports);
      assertFalse(result0.success);
      assertNotNull(result0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertTrue(compiler0.hasErrors());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compiler1.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler1.languageMode());
      assertEquals(2, compiler1.getErrorCount());
      assertFalse(compiler1.isIdeMode());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertTrue(compiler1.hasErrors());
      assertFalse(compiler1.acceptConstKeyword());
      assertEquals(0, compiler1.getWarningCount());
      assertEquals(0, linkedList0.size());
      assertFalse(compilerOptions2.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions2.getTweakProcessing());
      assertFalse(compilerOptions2.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions2.getTracerMode());
      assertFalse(compilerOptions2.shouldColorizeErrorOutput());
      assertNull(compilerOptions2.getLanguageOut());
      assertFalse(compilerOptions2.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions2.assumeStrictThis());
      assertFalse(compilerOptions2.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions2.getLanguageIn());
      assertSame(compiler0, compiler1);
      assertSame(compiler1, compiler0);
      assertNotSame(compilerOptions2, compilerOptions0);
      assertNotSame(compilerOptions2, compilerOptions1);
      assertFalse(compilerOptions2.equals((Object)compilerOptions0));
      assertFalse(compilerOptions2.equals((Object)compilerOptions1));
      
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Result result1 = compiler1.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(result1.success);
      assertNotNull(result1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(3, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compiler1.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler1.languageMode());
      assertEquals(3, compiler1.getErrorCount());
      assertFalse(compiler1.isIdeMode());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertTrue(compiler1.hasErrors());
      assertFalse(compiler1.acceptConstKeyword());
      assertEquals(0, compiler1.getWarningCount());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.assumeStrictThis());
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.getInferTypes());
      assertEquals(0, linkedList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertSame(compiler0, compiler1);
      assertSame(compiler1, compiler0);
      assertNotSame(compilerOptions0, compilerOptions2);
      assertNotSame(compilerOptions0, compilerOptions1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(result1, result0);
      assertFalse(compilerOptions0.equals((Object)compilerOptions2));
      assertFalse(compilerOptions0.equals((Object)compilerOptions1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(result1.equals((Object)result0));
      
      Node node1 = compiler1.parseInputs();
      assertNull(node1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(3, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compiler1.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler1.languageMode());
      assertEquals(3, compiler1.getErrorCount());
      assertFalse(compiler1.isIdeMode());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertTrue(compiler1.hasErrors());
      assertFalse(compiler1.acceptConstKeyword());
      assertEquals(0, compiler1.getWarningCount());
      assertSame(compiler0, compiler1);
      assertSame(compiler1, compiler0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = compiler0.getAstDotGraph();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      assertNotNull(memoizedScopeCreator0);
      
      GlobalVarReferenceMap globalVarReferenceMap0 = compiler0.getGlobalVarReferences();
      assertNull(globalVarReferenceMap0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      SourceFile sourceFile0 = compiler0.getSourceFileByName((String) null);
      assertNull(sourceFile0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        JSSourceFile.fromFile((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Level level0 = Level.CONFIG;
      assertNotNull(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertEquals("CONFIG", level0.getName());
      
      Compiler.setLoggingLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertEquals("CONFIG", level0.getName());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("base", compiler_CodeBuilder0.toString());
      assertEquals("base", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("base", "base");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: base", sQLRecoverableException0.toString());
      assertEquals("base", sQLRecoverableException0.getMessage());
      assertEquals("base", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        compiler0.throwInternalError("base", sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(Double.POSITIVE_INFINITY);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("base", compiler_CodeBuilder0.toString());
      assertEquals("base", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      // Undeclared exception!
      try { 
        compiler0.acceptEcmaScript5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(Double.POSITIVE_INFINITY);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("base", compiler_CodeBuilder0.toString());
      assertEquals("base", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      int int0 = 43;
      Node node0 = new Node(43, (-3836), (-1104969743));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(43, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      
      int int1 = node0.getIntProp(43);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, int1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(43, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        compiler0.getErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("base");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "base";
      objectArray0[1] = (Object) "base";
      objectArray0[2] = (Object) "base";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "base";
      PrintStream printStream0 = mockPrintStream0.format("base", objectArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(5, objectArray0.length);
      
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(5, objectArray0.length);
      
      // Undeclared exception!
      try { 
        compiler0.isIdeMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      assertNotNull(logger0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        compiler0.hasErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = new Node((-3836), (-1104969743), 1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals((-3836), node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      
      int int0 = node0.getIntProp(2145653619);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, int0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals((-3836), node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      
      // Undeclared exception!
      try { 
        compiler0.getErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("base", compiler_CodeBuilder0.toString());
      assertEquals("base", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      int int0 = 10;
      Node node0 = new Node(10, (-3836), (-1104969753));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals(10, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      
      int int1 = node0.getIntProp(10);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, int1);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals(10, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        compiler0.getErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = "r9>a";
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rbVj0", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "rbVj0";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callable0).call();
      Object object1 = Compiler.runCallable(callable0, true, true);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[3] = object1;
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertNull(compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      MockFile mockFile0 = new MockFile("base");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
      assertNotNull(jSSourceFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("base", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("base", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("base", jSSourceFile0.getOriginalPath());
      assertEquals("base", jSSourceFile0.getName());
      assertFalse(jSSourceFile0.isExtern());
      assertEquals("base", jSSourceFile0.toString());
      
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      assertNotNull(jsAst0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("base", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("base", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("base", jSSourceFile0.getOriginalPath());
      assertEquals("base", jSSourceFile0.getName());
      assertFalse(jSSourceFile0.isExtern());
      assertEquals("base", jSSourceFile0.toString());
      
      // Undeclared exception!
      try { 
        compiler0.addNewScript(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)106;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)108, (byte)71, (byte)37, (byte)4, (byte) (-86), (byte) (-1), (byte)106}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.javascript.jscomp.MethodCompilerPass$1", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Object object1 = Compiler.runCallable(callable0, true, false);
      assertNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[1] = object3;
      objectArray0[2] = (Object) callable0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "com.google.javascript.jscomp.MethodCompilerPass$1", objectArray0);
      assertNotNull(printStream0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(3, objectArray0.length);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      AstValidator astValidator0 = new AstValidator();
      assertNotNull(astValidator0);
      
      compiler0.process(astValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertSame(mockPrintStream0, printStream0);
      
      JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
      assertNull(jSModuleGraph0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = Compiler.getReleaseVersion();
      assertNotNull(string0);
      assertEquals("Unversioned directory", string0);
      
      MemoizedScopeCreator memoizedScopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      assertNotNull(peepholeSubstituteAlternateSyntax0);
      
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SourceFile sourceFile0 = SourceFile.fromFile("Unversioned directory");
      assertNotNull(sourceFile0);
      assertEquals("Unversioned directory", sourceFile0.toString());
      assertFalse(sourceFile0.isExtern());
      assertEquals("Unversioned directory", sourceFile0.getName());
      assertEquals("Unversioned directory", sourceFile0.getOriginalPath());
      
      boolean boolean0 = linkedList0.add(sourceFile0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("Unversioned directory", sourceFile0.toString());
      assertFalse(sourceFile0.isExtern());
      assertEquals("Unversioned directory", sourceFile0.getName());
      assertEquals("Unversioned directory", sourceFile0.getOriginalPath());
      
      CompilerOptions compilerOptions0 = compiler0.options;
      assertNull(compilerOptions0);
      
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("aC(9.g|#F'pA}u");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("aC(9.g|#F'pA}u", compiler_CodeBuilder0.toString());
      assertEquals("aC(9.g|#F'pA}u", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      Compiler.CodeBuilder compiler_CodeBuilder2 = compiler_CodeBuilder0.append("");
      assertNotNull(compiler_CodeBuilder2);
      assertEquals("aC(9.g|#F'pA}u", compiler_CodeBuilder0.toString());
      assertEquals("aC(9.g|#F'pA}u", compiler_CodeBuilder2.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder2);
      assertSame(compiler_CodeBuilder2, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder2, compiler_CodeBuilder0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
      assertNotNull(simpleDefinitionFinder0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Tracer tracer0 = Tracer.shortName(simpleDefinitionFinder0, "");
      assertNotNull(tracer0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ByteString byteString0 = ByteString.copyFromUtf8("myAYUFoUS");
      assertNotNull(byteString0);
      assertFalse(byteString0.isEmpty());
      assertEquals(9, byteString0.size());
      
      InputStream inputStream0 = byteString0.newInput();
      assertNotNull(inputStream0);
      assertFalse(byteString0.isEmpty());
      assertEquals(9, byteString0.size());
      assertEquals(9, inputStream0.available());
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromInputStream("a\"sd0", inputStream0);
      assertNotNull(jSSourceFile0);
      assertFalse(byteString0.isEmpty());
      assertEquals(9, byteString0.size());
      assertEquals(0, inputStream0.available());
      assertFalse(jSSourceFile0.isExtern());
      assertEquals("a\"sd0", jSSourceFile0.toString());
      assertEquals("myAYUFoUS", jSSourceFile0.getCode());
      assertEquals("a\"sd0", jSSourceFile0.getName());
      assertEquals("a\"sd0", jSSourceFile0.getOriginalPath());
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertNotNull(compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.assumeStrictThis());
      assertFalse(compilerOptions0.isRemoveUnusedClassProperties());
      
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      jSSourceFileArray0[2] = jSSourceFile0;
      jSSourceFileArray0[3] = jSSourceFile0;
      jSSourceFileArray0[4] = jSSourceFile0;
      jSSourceFileArray0[6] = jSSourceFile0;
      // Undeclared exception!
      try { 
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      DiagnosticGroups diagnosticGroups0 = compiler0.getDiagnosticGroups();
      assertNotNull(diagnosticGroups0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      Node node0 = compiler0.jsRoot;
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder0, 641, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rbVj0", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "rbVj0";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callable0).call();
      Object object1 = Compiler.runCallable(callable0, true, true);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockFileOutputStream0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[5] = object2;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "rbVj0";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "rbVj0", objectArray0);
      assertNotNull(printStream0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(9, objectArray0.length);
      
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(9, objectArray0.length);
      
      AstValidator astValidator0 = new AstValidator();
      assertNotNull(astValidator0);
      
      compiler0.process(astValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(9, objectArray0.length);
      
      ErrorManager errorManager0 = compiler0.getErrorManager();
      assertNotNull(errorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, errorManager0.getErrorCount());
      assertEquals(0, errorManager0.getWarningCount());
      assertEquals(0.0, errorManager0.getTypedPercent(), 0.01);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      try { 
        compiler0.processAMDAndCommonJSModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("d{(yJ[io");
      assertNotNull(mockPrintStream0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("d{(yJ[io"));
      
      // Undeclared exception!
      try { 
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      String string0 = "dCs8+XPw/7Qbg&h.j)D";
      MockPrintStream mockPrintStream0 = new MockPrintStream("d{(yJ[io");
      assertNotNull(mockPrintStream0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      
      int int0 = (-1730);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("d{(yJ[io"));
      
      String string1 = treeSet0.floor("dCs8+XPw/7Qbg&h.j)D");
      assertNull(string1);
      assertFalse(treeSet0.contains("d{(yJ[io"));
      
      // Undeclared exception!
      try { 
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = "";
      String string1 = Compiler.getReleaseDate();
      assertNotNull(string1);
      assertEquals("2021/11/23 10:32", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        compiler0.initInputsByIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = Compiler.getReleaseVersion();
      assertNotNull(string0);
      assertEquals("Unversioned directory", string0);
      
      MemoizedScopeCreator memoizedScopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string1 = "a\"sd0";
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected("a\"sd0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = compiler0.getAstDotGraph();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      assertNotNull(memoizedScopeCreator0);
      
      GlobalVarReferenceMap globalVarReferenceMap0 = compiler0.getGlobalVarReferences();
      assertNull(globalVarReferenceMap0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string1 = "";
      JSModule jSModule0 = new JSModule("");
      assertNotNull(jSModule0);
      assertEquals((-1), jSModule0.getDepth());
      assertEquals("", jSModule0.getName());
      assertEquals("", jSModule0.toString());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      assertNotNull(codeChangeHandler_RecentChange0);
      
      codeChangeHandler_RecentChange0.reset();
      compiler0.addChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("9T=Q)}SK/SZF7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.SINGLELINE;
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      MessageFormatter messageFormatter0 = errorFormat0.toFormatter(compiler0, true);
      assertNotNull(messageFormatter0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = "z;=57A %wl";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z;=57A %wl");
      assertFalse(boolean0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(messageFormatter0, (PrintStream) null);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler1.getErrorCount());
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertEquals(0, compiler1.getWarningCount());
      assertFalse(compiler1.equals((Object)compiler0));
      
      // Undeclared exception!
      try { 
        compiler1.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      assertNotNull(diagnosticGroup0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      boolean boolean0 = diagnosticGroup0.matches(compiler0.OPTIMIZE_LOOP_ERROR);
      assertTrue(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      DiagnosticGroup diagnosticGroup1 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      assertNotNull(diagnosticGroup1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertSame(diagnosticGroup1, diagnosticGroup0);
      
      ErrorReporter errorReporter0 = compiler0.getDefaultErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = Compiler.getReleaseVersion();
      assertNotNull(string0);
      assertEquals("Unversioned directory", string0);
      
      MemoizedScopeCreator memoizedScopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      assertNotNull(peepholeSubstituteAlternateSyntax0);
      
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      assertEquals("", compiler_CodeBuilder0.toString());
      
      MemoizedScopeCreator memoizedScopeCreator1 = compiler0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("Unversioned directory");
      assertNotNull(compiler_CodeBuilder1);
      assertEquals("Unversioned directory", compiler_CodeBuilder0.toString());
      assertEquals("Unversioned directory", compiler_CodeBuilder1.toString());
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-co`", "Unversioned directory");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: -co`", sQLRecoverableException0.toString());
      assertEquals("Unversioned directory", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-co`", sQLRecoverableException0.getMessage());
      
      sQLRecoverableException0.setNextException((SQLException) null);
      assertEquals("java.sql.SQLRecoverableException: -co`", sQLRecoverableException0.toString());
      assertEquals("Unversioned directory", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("-co`", sQLRecoverableException0.getMessage());
      
      // Undeclared exception!
      try { 
        compiler0.throwInternalError("Unversioned directory", sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Tracer tracer0 = Tracer.shortName(compiler0, "d{(yJ[io");
      assertNotNull(tracer0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      long long0 = tracer0.stop((-3084));
      assertEquals(0L, long0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        compiler0.stopTracer(tracer0, "dCs8+XPw/7Qbg&h.j)D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      PassConfig passConfig0 = compiler0.createPassConfigInternal();
      assertNotNull(passConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[4];
      diagnosticTypeArray0[0] = compiler0.MOTION_ITERATIONS_ERROR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("xd(nL;u");
      assertNotNull(mockPrintStream0);
      
      Compiler compiler1 = new Compiler(mockPrintStream0);
      assertNotNull(compiler1);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertFalse(compiler1.equals((Object)compiler0));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.removeIf(predicate1);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      CompilerOptions compilerOptions0 = compiler1.newCompilerOptions();
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertNotNull(compilerOptions0);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.assumeStrictThis());
      assertFalse(compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotSame(compiler1, compiler0);
      assertFalse(compiler1.equals((Object)compiler0));
      
      // Undeclared exception!
      try { 
        compiler0.initModules((List<SourceFile>) null, (List<JSModule>) linkedList0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.Compiler$9");
      Compiler compiler1 = new Compiler(mockPrintStream0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compiler0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedList0.removeIf(predicate1);
      CompilerOptions compilerOptions0 = compiler1.newCompilerOptions();
      compilerOptions0.nameReferenceReportPath = "com.google.javascript.jscomp.Compiler$9";
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = compilerOptions0.getTweakProcessing();
      compilerOptions_TweakProcessing0.shouldStrip();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("PassConfigs must eventually delegate to the DefaultPassConfig");
      JSModule[] jSModuleArray0 = new JSModule[2];
      compiler0.getTypedScopeCreator();
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("base");
      compiler0.setProgress(0.48999999999999994);
      // Undeclared exception!
      try { 
        compiler0.loadLibraryCode("=xVAOA~Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MockFileHandler mockFileHandler0 = new MockFileHandler();
      Level level0 = mockFileHandler0.getLevel();
      String string0 = "pxu61I@*Nk,=#b";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      logger0.finest(supplier1);
      logger0.logp(level0, "~29Y[C", "pxu61I@*Nk,=#b", supplier0);
      // Undeclared exception!
      try { 
        compiler0.loadLibraryCode("~29Y[C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Logger.getAnonymousLogger();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.acceptEcmaScript5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("d{(yJ[io");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      printStreamErrorManager0.setSummaryDetailLevel((-1730));
      printStreamErrorManager0.getErrors();
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.acceptEcmaScript5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rbVj0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "rbVj0";
      Compiler compiler0 = new Compiler(mockPrintStream0);
      AliasKeywords aliasKeywords0 = new AliasKeywords(compiler0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(aliasKeywords0).when(callable0).call();
      Object object1 = Compiler.runCallable(callable0, true, true);
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockFileOutputStream0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "rbVj0";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "rbVj0", objectArray0);
      Compiler compiler1 = new Compiler(printStream0);
      AstValidator astValidator0 = new AstValidator();
      compiler1.process(astValidator0);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.getReleaseVersion();
      compiler0.getTypedScopeCreator();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.SINGLELINE;
      Compiler compiler0 = new Compiler();
      MessageFormatter messageFormatter0 = errorFormat0.toFormatter(compiler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTQg<");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Remove try/catch/finally";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, false);
      objectArray0[1] = null;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) messageFormatter0;
      objectArray0[7] = (Object) errorFormat0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Remove try/catch/finally", objectArray0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(messageFormatter0, printStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
      try { 
        compiler1.parseSyntheticCode((String) null, "UTQg<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      compiler0.setProgress(0.48999999999999994);
      MockPrintStream mockPrintStream0 = new MockPrintStream("mentalMapKeay");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "com.google.javascript.rhino.jstype.JSTypeRegistry";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) compiler_CodeBuilder1;
      objectArray0[3] = (Object) "base";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "mentalMapKeay";
      objectArray0[6] = (Object) "base";
      objectArray0[7] = (Object) mockPrintStream0;
      mockPrintStream0.format(locale0, "com.google.javascript.rhino.jstype.JSTypeRegistry", objectArray0);
      Compiler compiler1 = new Compiler(mockPrintStream0);
      AstValidator astValidator0 = new AstValidator();
      compiler0.process(astValidator0);
      compiler0.getErrorManager();
      LightweightMessageFormatter.withoutSource();
      // Undeclared exception!
      try { 
        compiler0.buildKnownSymbolTable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rbVj0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "rbVj0";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, true, true);
      objectArray0[3] = null;
      objectArray0[4] = (Object) mockFileOutputStream0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "rbVj0";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "rbVj0", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      AstValidator astValidator0 = new AstValidator();
      compiler0.process(astValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getPassConfig();
      // Undeclared exception!
      try { 
        compiler0.processAMDAndCommonJSModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getReverseAbstractInterpreter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      diagnosticGroup0.matches(compiler0.OPTIMIZE_LOOP_ERROR);
      DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      DiagnosticGroups.VISIBILITY = diagnosticGroup0;
      compiler0.initCompilerOptionsIfTesting();
      compiler0.getDefaultErrorReporter();
      compiler0.getReverseAbstractInterpreter();
      // Undeclared exception!
      try { 
        JSSourceFile.fromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      DiagnosticGroups.VISIBILITY = diagnosticGroup0;
      compiler0.initCompilerOptionsIfTesting();
      compiler0.getDefaultErrorReporter();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      assertNotNull(reverseAbstractInterpreter0);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertNotNull(typeValidator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VarCheck varCheck0 = null;
      try {
        varCheck0 = new VarCheck(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      printStreamErrorManager0.getErrors();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      compiler1.getTypedScopeCreator();
      String[] stringArray0 = new String[9];
      LightweightMessageFormatter.withoutSource();
      printStreamErrorManager0.setTypedPercent((-168.1041758896487));
      // Undeclared exception!
      try { 
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      printStreamErrorManager0.getErrors();
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      compiler1.getTypedScopeCreator();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      JSError jSError0 = JSError.make((String) null, (-3836), 307, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      lightweightMessageFormatter0.formatWarning(jSError0);
      // Undeclared exception!
      try { 
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.createPassConfigInternal();
      String string0 = "";
      DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[4];
      diagnosticTypeArray0[0] = compiler0.MOTION_ITERATIONS_ERROR;
      diagnosticTypeArray0[1] = compiler0.OPTIMIZE_LOOP_ERROR;
      diagnosticTypeArray0[2] = compiler0.OPTIMIZE_LOOP_ERROR;
      diagnosticTypeArray0[3] = compiler0.OPTIMIZE_LOOP_ERROR;
      DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("", diagnosticTypeArray0);
      diagnosticGroup0.toString();
      DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
      // Undeclared exception!
      try { 
        compiler0.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "r9>a";
      // Undeclared exception!
      try { 
        compiler0.getSourceFileByName("r9>a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&nV}uODq[i>0F");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Compiler compiler0 = new Compiler();
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR = referenceCollectingCallback_Behavior0;
      compiler0.getVariableMap();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.getLength();
      int int0 = (-1206);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      Node node1 = null;
      try {
        node1 = new Node(2792, (Node) null, (Node) null, 41, 678);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = "aC(9.\\g|#F'pA}u";
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("aC(9.g|#F'pA}u");
      compiler_CodeBuilder1.getLineIndex();
      compiler_CodeBuilder0.getLength();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "aC(9.g|#F'pA}u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("aC(9.g|#F'pA}u");
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("");
      compiler_CodeBuilder1.getLineIndex();
      compiler_CodeBuilder0.getLength();
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineProperties inlineProperties0 = null;
      try {
        inlineProperties0 = new InlineProperties(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Node node0 = compiler0.jsRoot;
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder0, 648, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("base");
      Node node0 = new Node(10, (-3836), (-3836));
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder1, 10, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.Compiler$9");
      Compiler compiler1 = new Compiler(mockPrintStream0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compiler1);
      linkedList0.removeIf(predicate0);
      CompilerOptions compilerOptions0 = compiler1.newCompilerOptions();
      compiler1.initModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = compilerOptions0.getTweakProcessing();
      compilerOptions_TweakProcessing0.shouldStrip();
      JSSourceFile.fromFile("PassConfigs must eventually delegate to the DefaultPassConfig");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique((MakeDeclaredNamesUnique.Renamer) null);
      compiler1.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        nodeTraversal0.getModule();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(":", ":");
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.replaceIncrementalSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("base");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("base", "base");
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>(2);
      // Undeclared exception!
      try { 
        compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.Compiler$9");
      Compiler compiler1 = new Compiler(mockPrintStream0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compiler0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedList0.removeIf(predicate1);
      CompilerOptions compilerOptions0 = compiler1.newCompilerOptions();
      compilerOptions0.nameReferenceReportPath = "com.google.javascript.jscomp.Compiler$9";
      compiler0.initModules((List<SourceFile>) arrayList0, (List<JSModule>) linkedList0, compilerOptions0);
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = compilerOptions0.getTweakProcessing();
      compilerOptions_TweakProcessing0.shouldStrip();
      JSSourceFile.fromFile("PassConfigs must eventually delegate to the DefaultPassConfig");
      JSModule[] jSModuleArray0 = new JSModule[2];
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique((MakeDeclaredNamesUnique.Renamer) null);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, makeDeclaredNamesUnique0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        nodeTraversal0.getModule();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getVariableMap();
      CompilerOptions.TweakProcessing.values();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("3(fzxS", "3(fzxS");
      jSSourceFileArray0[0] = jSSourceFile0;
      String string0 = "K w&F|S#;5\"Y]";
      JSSourceFile jSSourceFile1 = JSSourceFile.fromFile("K w&F|S#;5\"Y]");
      jSSourceFileArray0[1] = jSSourceFile1;
      // Undeclared exception!
      try { 
        JSSourceFile.fromInputStream("", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getTypedScopeCreator();
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = null;
      try {
        compiler0 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getInputsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "";
      // Undeclared exception!
      try { 
        compiler0.startPass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.startPass(" Un.GDztziD`DniaNFl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      // Undeclared exception!
      try { 
        compiler0.parse((SourceFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setProgress(Double.POSITIVE_INFINITY);
      Logger logger0 = Logger.getGlobal();
      Level level0 = Level.INFO;
      String string0 = "aTqdK(;c6>ea`";
      String string1 = "p,8(-[: ";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      logger0.logp(level0, "aTqdK(;c6>ea`", "p,8(-[: ", supplier0);
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MockFileHandler mockFileHandler0 = new MockFileHandler();
      Level level0 = mockFileHandler0.getLevel();
      String string0 = "pxu61I@*Nk,=#b";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      logger0.finest(supplier1);
      logger0.logp(level0, "~29Y[C", "pxu61I@*Nk,=#b", supplier0);
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      compiler0.addChangeHandler(codeChangeHandler_RecentChange0);
      Stack<JSModule> stack0 = new Stack<JSModule>();
      MockFile mockFile0 = new MockFile("<VVdUQ]");
      String string0 = "8=,K#=rpYc:zHr";
      linkedList0.parallelStream();
      int int0 = 323;
      MockFile mockFile1 = new MockFile("", "8=,K#=rpYc:zHr");
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.isSupported("<VVdUQ]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <VVdUQ]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processAMDAndCommonJSModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler compiler0 = new Compiler();
      Tracer tracer0 = Tracer.shortName(compiler0, "d{(yJ[io");
      // Undeclared exception!
      try { 
        compiler0.stopTracer(tracer0, "dCs8+XPw/7Qbg&h.j)D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("5l,rd{e");
      Compiler.CodeBuilder compiler_CodeBuilder2 = compiler_CodeBuilder1.append("ExperimentalMapKey");
      compiler0.precheck();
      String string0 = "R52?rA!v";
      compiler_CodeBuilder2.append("R52?rA!v");
      String string1 = "-U=/$GA0Kbow!U";
      // Undeclared exception!
      try { 
        CompilerOptions.TweakProcessing.valueOf("ExperimentalMapKey");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CompilerOptions.TweakProcessing.ExperimentalMapKey
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(verboseMessageFormatter0, (PrintStream) null);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      printStreamErrorManager0.getErrors();
      verboseMessageFormatter0.getLevelName(checkLevel0);
      printStreamErrorManager0.printSummary();
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, referenceCollectingCallback0);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      compiler2.disableThreads();
      compiler0.reportCodeChange();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.getReleaseVersion();
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      compiler0.getGlobalVarReferences();
      JSModule jSModule0 = new JSModule("");
      Node node0 = new Node(10, 10, 1151);
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder0, 44, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getAstDotGraph();
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      compiler0.getGlobalVarReferences();
      JSModule jSModule0 = new JSModule("");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSSourceFile.fromFile("", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getAstDotGraph();
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      compiler0.getGlobalVarReferences();
      JSModule jSModule0 = new JSModule("");
      // Undeclared exception!
      try { 
        compiler0.toSource(jSModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      compiler0.getAstDotGraph();
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0, memoizedScopeCreator0);
      nodeTraversal0.hasScope();
      Compiler compiler1 = nodeTraversal0.getCompiler();
      compiler1.precheck();
      compiler0.getGlobalVarReferences();
      compiler1.disableThreads();
      JSModule jSModule0 = new JSModule("");
      // Undeclared exception!
      try { 
        compiler0.toSource(jSModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(compiler0.OPTIMIZE_LOOP_ERROR);
      String string0 = "";
      DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[1];
      diagnosticGroupArray0[0] = diagnosticGroup0;
      diagnosticGroup0.isSubGroup(diagnosticGroup0);
      DiagnosticGroup diagnosticGroup1 = new DiagnosticGroup("", diagnosticGroupArray0);
      diagnosticGroup1.toString();
      diagnosticGroup0.isSubGroup(diagnosticGroup1);
      DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
      // Undeclared exception!
      try { 
        compiler0.isTypeCheckingEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

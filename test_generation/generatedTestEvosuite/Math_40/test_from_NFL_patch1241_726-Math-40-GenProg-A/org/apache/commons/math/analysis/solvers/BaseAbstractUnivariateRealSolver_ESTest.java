/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:17:42 GMT 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Acosh;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      double[] doubleArray0 = new double[7];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        bracketingNthOrderBrentSolver0.solve(45, (UnivariateFunction) polynomialFunction0, 45.0, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [45, 22.5]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0);
      riddersSolver0.verifySequence((-2076.1666536), (-1376.3040152547305), 0);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      Sinc sinc0 = new Sinc();
      newtonSolver0.solve(1792, (DifferentiableUnivariateFunction) sinc0, 98.45773056978662);
      newtonSolver0.incrementEvaluationCount();
      assertEquals(Double.NaN, newtonSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-3047.806900046), (-3047.806900046), 2.4667033200046904E-8);
      laguerreSolver0.verifyInterval((-1924.9345), 2.4667033200046904E-8);
      assertEquals(2.4667033200046904E-8, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-3047.806900046), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-3047.806900046), laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(641.0775748);
      assertEquals(0.0, laguerreSolver0.getStartValue(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 27;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      laguerreSolver0.solve(27, polynomialFunction0, 0.0, 641.0775748, (double) 27);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(641.0775748);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 27;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      double double0 = laguerreSolver0.solve(27, polynomialFunction0, (-1200.538), 641.0775748, (double) 27);
      assertEquals(27.0, laguerreSolver0.getStartValue(), 0.01);
      assertEquals((-2.2737367544323206E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(1.1908236171846016);
      boolean boolean0 = riddersSolver0.isSequence(442.0, 3023.98001, 6.3984347447610573E17);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.1908236171846016, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      Sinc sinc0 = new Sinc();
      newtonSolver0.solve(1792, (DifferentiableUnivariateFunction) sinc0, 98.45773056978662);
      boolean boolean0 = newtonSolver0.isBracketing((-883.956188), 0.0);
      assertEquals(98.45773056978662, newtonSolver0.getStartValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      Acosh acosh0 = new Acosh();
      mullerSolver2_0.setup(0, acosh0, (-1.0), (-2610.6674630558), (-2610.6674630558));
      mullerSolver2_0.isBracketing((-1808.9), 0.0);
      assertEquals((-1.0), mullerSolver2_0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(1935.5146, 1935.5146, 1935.5146);
      double double0 = laguerreSolver0.getStartValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1935.5146, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1935.5146, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1935.5146, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0, 1.0, 1.0);
      double double0 = laguerreSolver0.getRelativeAccuracy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getRelativeAccuracy();
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getMin();
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.getMaxEvaluations();
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.getMax();
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.getEvaluations();
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(442.0, 442.0, 3023.98001);
      riddersSolver0.setup(2254, harmonicOscillator0, 0.2674594521522522, 0.0, 0.0);
      double double0 = riddersSolver0.computeObjectiveValue((-2774.711865444743));
      assertEquals(0.2674594521522522, riddersSolver0.getMin(), 0.01);
      assertEquals(415.7089839123872, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(442.0, 442.0, 3023.98001);
      riddersSolver0.setup(2254, harmonicOscillator0, 0.2674594521522522, 0.0, 2.7796303536272215E-86);
      double double0 = riddersSolver0.computeObjectiveValue(442.0);
      assertEquals(0.2674594521522522, riddersSolver0.getMin(), 0.01);
      assertEquals((-397.13396795938377), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(216.703146148652, 216.703146148652);
      // Undeclared exception!
      try { 
        riddersSolver0.verifySequence((-1376.3040152547305), 216.703146148652, 216.703146148652);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [216.703, 216.703]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        secantSolver0.verifyBracketing(Double.NaN, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[8];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      // Undeclared exception!
      try { 
        laguerreSolver0.solve(0, polynomialFunction0, 0.0, 0.0, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[2];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      // Undeclared exception!
      try { 
        laguerreSolver0.solve((-820), polynomialFunction0, (double) (-820));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-820) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0, 0.0, (-3100.5096));
      // Undeclared exception!
      try { 
        laguerreSolver0.solve((-692), (PolynomialFunction) null, (-1008.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      // Undeclared exception!
      try { 
        riddersSolver0.setup(0, (UnivariateFunction) null, 0.0, 0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      // Undeclared exception!
      try { 
        laguerreSolver0.incrementEvaluationCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      try { 
        bisectionSolver0.computeObjectiveValue(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-1873.0), 442.0, 544.0);
      riddersSolver0.setup(2255, harmonicOscillator0, 46.71, 8.433630296371073E297, 8.433630296371073E297);
      double double0 = riddersSolver0.doSolve();
      assertEquals(46.71, riddersSolver0.getMin(), 0.01);
      assertEquals(7.684849781383938E297, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      // Undeclared exception!
      try { 
        laguerreSolver0.solve(0, polynomialFunction0, (double) 0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      // Undeclared exception!
      try { 
        laguerreSolver0.isBracketing((-2008.0469068), (-2008.0469068));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.isSequence(0.0, 0.0, 1.0);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      // Undeclared exception!
      try { 
        mullerSolver2_0.verifyInterval(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(0.0);
      Log10 log10_0 = new Log10();
      secantSolver0.solve(1162, (UnivariateFunction) log10_0, 0.0, (double) 1162, 0.0);
      // Undeclared exception!
      try { 
        secantSolver0.verifyBracketing(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(2585.2234806995, (-1129.968687));
      double double0 = laguerreSolver0.getAbsoluteAccuracy();
      assertEquals((-1129.968687), double0, 0.01);
      assertEquals(2585.2234806995, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:10:07 GMT 2021
 */

package org.apache.commons.math.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.special.Gamma;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Gamma_ESTest extends Gamma_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gamma.regularizedGammaQ((-896.052), (-896.052));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Gamma.regularizedGammaP(2.0751166664376642E-7, 3051.759, 2.0751166664376642E-7, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (-1) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gamma.regularizedGammaP(1553.02198743046, 0.49662555950248505, 0.0, 2472);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gamma.regularizedGammaP(3353.98345957, 3421.2333032207484);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gamma.regularizedGammaP(1.0, 210.091491);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gamma.logGamma((-1.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gamma.regularizedGammaQ((double) 4, 950.5013931, 2.0, 4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gamma.regularizedGammaQ((double) 14, (double) 1062);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gamma.regularizedGammaQ(2.1743961811521265E-4, 415.41);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gamma.regularizedGammaP((double) 3058, 0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gamma.logGamma(2.1743961811521265E-4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gamma.logGamma(1.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaQ(2.1743961811521265E-4, 682.363402, (-1407.50944308), 1210819150);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaQ(2.640833920210768E-8, 2915.56822343422);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaP(0.49495571101477837, 6236.427418846669);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gamma.regularizedGammaQ((double) 1210819150, 2183.6852, 2183.6852, 2462);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        Gamma.regularizedGammaQ(784.0, 2095.2760039, 576.6651601050268, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Continued fraction convergents failed to converge for value 2,095.276
         //
         verifyException("org.apache.commons.math.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gamma.regularizedGammaQ(2458.383, 0.0, 1886.26004171, 1091);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gamma.regularizedGammaQ(1.0, (-1978.0293395877), 0.0, (-1802));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gamma.regularizedGammaQ(Double.NaN, Double.NaN, (-2923.8675449964553), (-1674));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        Gamma.regularizedGammaP((double) 3031, 867.72949673, 0.0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gamma.regularizedGammaP(2095.2760039, 2095.2760039, 2095.2760039, 12);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaP(0.9999999830054087, 2869.96541, 0.9999999830054087, 1789569706);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(0.0, 0.0, (double) (-399), 14);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(2055.349754140072, (-1.0), 2055.349754140072, 522);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(Double.NaN, 0.0, 1553.02198743046, 2472);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(2583.9327, Double.NaN, 3.399464998481189E-5, (-492));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Gamma.logGamma(2.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(2323.17436398497, 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(0.0, 0.0, Double.NaN, (-399));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ((-1.0), Double.NaN, Double.NaN, (-8));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(16.0, 2866.526186219556, (double) 14, 1099);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(2869.96541, 0.0, 0.0, (-1));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP((double) (-399), 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = Gamma.logGamma(0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = Gamma.logGamma(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(2.0, 2.0);
      assertEquals(0.406005849709838, double0, 0.01);
  }
}

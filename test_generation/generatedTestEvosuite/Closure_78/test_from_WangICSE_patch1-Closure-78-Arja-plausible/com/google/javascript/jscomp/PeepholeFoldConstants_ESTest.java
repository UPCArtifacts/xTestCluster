/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:23:23 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DeadAssignmentsElimination;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Supplier;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(80, node0);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      peepholeFoldConstants1.optimizeSubtree(node1);
      Node node2 = null;
      try {
        node2 = new Node(33, (Node) null, 12, (-1614));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node.newString("NVpC");
      Node node0 = Node.newString(59, "");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node.newString("c3WG&]6");
      Node node0 = Node.newString(60, "c3WG&]6");
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      peepholeFoldConstants1.optimizeSubtree(node0);
      System.setCurrentTimeMillis(3005L);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.36238181105494144);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      loggerErrorManager0.getWarnings();
      compiler0.toSource(node0);
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      Node node2 = new Node(16);
      node1.children();
      node0.setDouble((-1));
      Node node3 = new Node(38, 36, 42);
      peepholeFoldConstants0.optimizeSubtree(node3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(",");
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      Node node2 = new Node(26, node1, (-611), 1539);
      node1.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants1.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("c#WG&]h");
      Logger logger0 = Logger.getLogger("c#WG&]h");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.getTypesWithProperty("c#WG&]h");
      Node node2 = new Node(0, node1, 90, 2688);
      node2.children();
      Node node3 = new Node(75, node0, node0, node0, 12, (-4406));
      peepholeFoldConstants0.optimizeSubtree(node3);
      peepholeFoldConstants0.optimizeSubtree(node3);
      peepholeFoldConstants0.optimizeSubtree(node3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(105, "NVpC", 105, 49);
      Node node1 = new Node(75, node0, node0, 65, 2);
      node1.siblings();
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(65, "Array index not integer: {0}");
      node0.children();
      node0.children();
      Node node1 = new Node(41, node0, node0, node0, 48, 70);
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(49);
      node0.children();
      Node node1 = new Node(0, 1, 1162);
      peepholeFoldConstants0.optimizeSubtree(node0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(49);
      node0.children();
      Node node1 = new Node(0, 1, 1160);
      peepholeFoldConstants0.optimizeSubtree(node0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(74, "Array index not integer: {0}");
      Iterable<Node> iterable0 = new LinkedHashSet<Node>();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tz*&3(K^r");
      Node node1 = peepholeFoldConstants1.optimizeSubtree(node0);
      node0.setWasEmptyNode(false);
      PeepholeFoldConstants peepholeFoldConstants2 = new PeepholeFoldConstants();
      peepholeFoldConstants2.optimizeSubtree(node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node2 = new Node(47, node1);
      node2.siblings();
      System.setCurrentTimeMillis((-1144L));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      jSTypeArray0[0] = (JSType) objectType0;
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType1 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[1] = (JSType) objectType1;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>(treeSet0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) vector0);
      jSTypeArray0[2] = (JSType) functionType0;
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externAndJsRoot;
      ObjectType objectType2 = jSTypeRegistry0.createObjectType("Named type with empty name component", (Node) null, objectType1);
      jSTypeArray0[3] = (JSType) objectType2;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      Node node1 = Node.newString(76, "Array index not integer: {0}");
      Node node2 = new Node(31, node1, node0, 4095, 801);
      node1.siblings();
      peepholeFoldConstants0.optimizeSubtree(node2);
      System.setCurrentTimeMillis(2355L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node1.setDouble(26);
      Node node2 = new Node(44, node0, node1, node1, 20, 38);
      peepholeFoldConstants0.optimizeSubtree(node2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      node0.children();
      Node node1 = new Node(21, node0, node0, 43, 49);
      node1.siblings();
      peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(3509L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(65, "Array index not integer: {0}");
      node0.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tz*&3(K^r");
      Node node1 = peepholeFoldConstants1.optimizeSubtree(node0);
      System.setCurrentTimeMillis(0L);
      Compiler compiler0 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, syntacticScopeCreator0);
      peepholeFoldConstants1.endTraversal(nodeTraversal0);
      node1.siblings();
      peepholeFoldConstants0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(65, "Array index not integer: {0}");
      node0.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node1 = new Node((-1764), node0, node0, (-73), 13);
      peepholeFoldConstants0.optimizeSubtree(node1);
      peepholeFoldConstants1.optimizeSubtree(node0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      Node node1 = new Node(95, node0, 32, 0);
      node1.children();
      Node node2 = new Node(32, node1);
      Node node3 = Node.newString(37, "", 4095, 7);
      peepholeFoldConstants0.optimizeSubtree(node3);
      System.setCurrentTimeMillis(33);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      consoleHandler0.getLevel();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Node node0 = new Node(97, 88, 33);
      Node node1 = new Node((-2275), node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 4, 51);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      Node node1 = Node.newString(76, "Array index not integer: {0}");
      node0.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(40);
      node2.siblings();
      peepholeFoldConstants0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(76, "Array index not integer: {0}");
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(40);
      peepholeFoldConstants0.optimizeSubtree(node0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      node0.children();
      node0.children();
      Node node1 = new Node(36, node0, node0, node0, 2253, 26);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      node1.setWasEmptyNode(true);
      Node node2 = peepholeFoldConstants1.optimizeSubtree(node1);
      node2.siblings();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Iterable<Node> iterable0 = new LinkedHashSet<Node>();
      Node node1 = new Node(36, node0, node0, node0, 15, 26);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants1.optimizeSubtree(node1);
      node2.siblings();
      Node node3 = peepholeFoldConstants1.optimizeSubtree(node0);
      peepholeFoldConstants0.optimizeSubtree(node3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      logger0.finest(supplier0);
      Node node0 = Node.newNumber((-549.781));
      loggerErrorManager0.getErrors();
      Node node1 = new Node(1105, node0, 42, 8);
      node0.children();
      peepholeFoldConstants0.optimizeSubtree(node0);
      node1.setVarArgs(true);
      System.setCurrentTimeMillis((-1021L));
      System.setCurrentTimeMillis((-403L));
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      peepholeFoldConstants1.optimizeSubtree(node1);
      peepholeFoldConstants1.optimizeSubtree(node1);
      System.setCurrentTimeMillis(26);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("c#WG&]h");
      Logger logger0 = Logger.getLogger("c#WG&]h");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.getErrors();
      Node node1 = new Node(30, node0, 154, 30);
      node1.siblings();
      System.setCurrentTimeMillis(18);
      ControlFlowAnalysis.computeFollowNode(node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      Node node1 = Node.newString(60, "c3WG&]6");
      Node node2 = new Node(30, node1, node1, 1, 35);
      node0.siblings();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      consoleHandler0.getLevel();
      consoleHandler0.getLevel();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Node node0 = Node.newString(92, "rplacetdGsneraX$tors");
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      Node.newString(25, "c3WG&]6", 1, 13);
      Node node1 = new Node(29);
      node1.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      peepholeFoldConstants1.optimizeSubtree(node0);
      node1.setOptionalArg(false);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      passConfig_PassConfigDelegate0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0, (ScopeCreator) null);
      peepholeFoldConstants0.endTraversal(nodeTraversal0);
      Node node1 = Node.newString(96, "");
      Node node2 = new Node(4095, node0, node1, 36, 100);
      node0.siblings();
      peepholeFoldConstants0.optimizeSubtree(node0);
      peepholeFoldConstants0.optimizeSubtree(node2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      loggerErrorManager0.getWarnings();
      compiler0.toSource(node0);
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      peepholeFoldConstants0.optimizeSubtree(node1);
      node1.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node0.setDouble((-1));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      node3.siblings();
      Node node4 = new Node(317, node3, node0);
      peepholeFoldConstants0.optimizeSubtree(node4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.children();
      Node node2 = new Node(29, node0, node1, node0, 44, 49);
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(15);
      Node node3 = new Node(87, node2);
      peepholeFoldConstants0.optimizeSubtree(node3);
      System.setCurrentTimeMillis(25);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      peepholeFoldConstants0.optimizeSubtree(node4);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      Node node1 = new Node(87, node0);
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("c#WG&]h");
      Logger.getLogger("c#WG&]h");
      node0.children();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node1.children();
      Node node2 = new Node(61, node1, node0, node1, 53, (-277));
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants1.optimizeSubtree(node2);
      node3.siblings();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(105, "NVpC", 105, 49);
      Node node1 = new Node(61, node0, node0, node0, 37, 88);
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

//   @Test(timeout = 4000)
//   public void test035()  throws Throwable  {
//       Logger logger0 = Tracer.logger;
//       ConsoleHandler consoleHandler0 = new ConsoleHandler();
//       Level level0 = consoleHandler0.getLevel();
//       String string0 = "Object";
//       Throwable throwable0 = null;
//       logger0.log(level0, string0, throwable0);
//       int int0 = 62;
//       String string1 = "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations$ExtractionInstance";
//       int int1 = 1963;
//       Node node0 = Node.newString(int0, string1, int1, int0);
//       int int2 = 669;
//       Node node1 = new Node(node0.IS_CONSTANT_NAME, node0, int2, node0.ORIGINALNAME_PROP);
//       node0.children();
//       PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
//       boolean boolean0 = false;
//       node0.setOptionalArg(boolean0);
//       peepholeFoldConstants0.optimizeSubtree(node1);
//       System.setCurrentTimeMillis(node0.DECR_FLAG);
//       Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
//       peepholeFoldConstants0.optimizeSubtree(node2);
//       AbstractCompiler abstractCompiler0 = null;
//       GatherRawExports gatherRawExports0 = new GatherRawExports(abstractCompiler0);
//       NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, gatherRawExports0);
//       Node node3 = nodeTraversal0.getScopeRoot();
//       peepholeFoldConstants0.optimizeSubtree(node3);
//   }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      Node node1 = Node.newString(25, "c3WG&]6", 1, 13);
      Node.newString(127, "c3WG&]6", 1, 43);
      Node node2 = new Node(134, node0, 7, 13);
      System.setCurrentTimeMillis(2);
      node0.siblings();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      peepholeFoldConstants1.optimizeSubtree(node1);
      ControlFlowAnalysis.computeFollowNode(node0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Node node0 = Node.newNumber((double) 27, 105, 27);
      Node node1 = new Node(27, node0, (-260), 43);
      node1.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node2 = Node.newString(1, ".y&M", (-41), 28);
      node2.setOptionalArg(false);
      peepholeFoldConstants1.optimizeSubtree(node2);
      System.setCurrentTimeMillis(4294967295L);
      System.setCurrentTimeMillis(777L);
      // Undeclared exception!
      try { 
        peepholeFoldConstants1.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      jSTypeArray0[0] = (JSType) objectType0;
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      ObjectType objectType1 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[1] = (JSType) objectType1;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>(treeSet0);
      jSTypeArray0[2] = (JSType) objectType1;
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externAndJsRoot;
      ObjectType objectType2 = jSTypeRegistry0.createObjectType("Named type with empty name component", (Node) null, objectType1);
      jSTypeArray0[3] = (JSType) objectType2;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-9), "c3WG&]6", 105, 21);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(1611, node0, 64, 849);
      node1.children();
      Node node3 = new Node(23, node2, node2, node1, 5, 1);
      peepholeFoldConstants0.optimizeSubtree(node3);
      peepholeFoldConstants0.optimizeSubtree(node3);
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis((-2414L));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString((-9), "c3WG&]6", 105, 21);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.children();
      Node node2 = new Node(23, node0, node0, node1, 5, 1);
      peepholeFoldConstants0.optimizeSubtree(node2);
      Node node3 = null;
      try {
        node3 = new Node(44, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(1425.06);
      loggerErrorManager0.getErrors();
      Node node1 = new Node(18, node0, 30, 51);
      node0.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      Node node4 = null;
      try {
        node4 = new Node(2, node3, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Node node0 = Node.newNumber((double) 27, 105, 27);
      Node node1 = new Node(27, node0, 4, 43);
      Node node2 = Node.newString(18, "G)#T.Ey_+#9");
      System.setCurrentTimeMillis(1L);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      peepholeFoldConstants1.optimizeSubtree(node3);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      Node.newString("2[v&ULO");
      String string0 = "Y";
      Node node0 = Node.newString(41, "Y", 39, 31);
      Node node1 = new Node(26, node0, 8, 12);
      Node node2 = Node.newString("restricted index type", 3268, 4);
      node2.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      node1.setOptionalArg(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants1.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(",");
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      Node node2 = new Node(26, node1, (-611), 1539);
      node1.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test045()  throws Throwable  {
//       PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
//       Logger logger0 = Tracer.logger;
//       ConsoleHandler consoleHandler0 = new ConsoleHandler();
//       Level level0 = consoleHandler0.getLevel();
//       String string0 = "Object";
//       Throwable throwable0 = null;
//       logger0.log(level0, "Object", (Throwable) null);
//       Logger logger1 = logger0.getParent();
//       String string1 = null;
//       logger1.log(level0, string1, throwable0);
//       Logger logger2 = logger0.getParent();
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger2);
//       Compiler compiler0 = new Compiler();
//       int int0 = 90;
//       String string2 = "";
//       Node node0 = Node.newString(int0, string2);
//       Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
//       System.setCurrentTimeMillis(node1.TARGET_PROP);
//       long long0 = (-910L);
//       System.setCurrentTimeMillis(long0);
//   }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.children();
      Node.tokenToName(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^");
      Node node2 = new Node(24, node0, node1, node0, 66, (-2939));
      peepholeFoldConstants0.optimizeSubtree(node2);
      node0.siblings();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node3 = new Node(4, 26, 7);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.children();
      Node.tokenToName(2);
      Node node2 = new Node(24, node0, node1, node0, 66, (-2939));
      peepholeFoldConstants0.optimizeSubtree(node2);
      node0.siblings();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node3 = new Node(4, 26, 7);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Logger logger0 = Tracer.logger;
      assertNotNull(logger0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      assertNotNull(consoleHandler0);
      assertNull(consoleHandler0.getEncoding());
      
      Level level0 = consoleHandler0.getLevel();
      assertNotNull(level0);
      assertNull(consoleHandler0.getEncoding());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      
      logger0.log(level0, "Object", (Throwable) null);
      Compiler compiler0 = new Compiler();
      int int0 = 52;
      String string0 = "Unexpected arithmetic operator";
      Node node0 = Node.newString(int0, string0);
      node0.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants1.optimizeSubtree(node0);
      long long0 = 825L;
      System.setCurrentTimeMillis(long0);
      node0.siblings();
      peepholeFoldConstants0.optimizeSubtree(node0);
      peepholeFoldConstants1.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Node node0 = new Node(51, (-1021), 51);
      assertNotNull(node0);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(51, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertNotNull(node1);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(51, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(51, node1.getType());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertSame(node0, node1);
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      assertNotNull(logger0);
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertNull(logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      Node node0 = Node.newString(105, "NVpC", 105, 67);
      assertNotNull(node0);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node1 = new Node(9, node0, 30, 4095);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(9, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(30, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasChildren());
      
      Iterable<Node> iterable0 = node1.children();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(9, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(30, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasChildren());
      
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants1);
      assertFalse(peepholeFoldConstants1.equals((Object)peepholeFoldConstants0));
      
      node0.setOptionalArg(true);
      assertFalse(node0.equals((Object)node1));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node2 = peepholeFoldConstants1.optimizeSubtree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(peepholeFoldConstants1.equals((Object)peepholeFoldConstants0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(9, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(30, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasChildren());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals(4095, node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isLocalResultCall());
      assertEquals(9, node2.getType());
      assertEquals(30, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.hasMoreThanOneChild());
      assertSame(node1, node2);
      assertNotSame(peepholeFoldConstants1, peepholeFoldConstants0);
      assertSame(node2, node1);
      
      System.setCurrentTimeMillis(32);
      Node node3 = peepholeFoldConstants1.optimizeSubtree(node0);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(peepholeFoldConstants1.equals((Object)peepholeFoldConstants0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isSyntheticBlock());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertEquals(0, node3.getChildCount());
      assertTrue(node3.isOptionalArg());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertEquals(67, node3.getCharno());
      assertFalse(node3.isLocalResultCall());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isNoSideEffectsCall());
      assertEquals(105, node3.getType());
      assertEquals(105, node3.getLineno());
      assertSame(node0, node3);
      assertNotSame(peepholeFoldConstants1, peepholeFoldConstants0);
      assertSame(node3, node0);
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node4);
      assertFalse(peepholeFoldConstants0.equals((Object)peepholeFoldConstants1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(peepholeFoldConstants1.equals((Object)peepholeFoldConstants0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(9, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(30, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasChildren());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals(4095, node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isLocalResultCall());
      assertEquals(9, node2.getType());
      assertEquals(30, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node4.isQualifiedName());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isOnlyModifiesThisCall());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isSyntheticBlock());
      assertEquals(30, node4.getLineno());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isOptionalArg());
      assertEquals(9, node4.getType());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isVarArgs());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.wasEmptyNode());
      assertEquals(0, node4.getSideEffectFlags());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isLocalResultCall());
      assertEquals(4095, node4.getCharno());
      assertNotSame(peepholeFoldConstants0, peepholeFoldConstants1);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertSame(node1, node4);
      assertNotSame(peepholeFoldConstants1, peepholeFoldConstants0);
      assertSame(node2, node1);
      assertSame(node2, node4);
      assertSame(node4, node1);
      assertSame(node4, node2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Node node0 = Node.newString(105, "NVpC", 105, 67);
      assertNotNull(node0);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(105, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      
      Node node1 = new Node(9, node0, 30, 4095);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(105, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(9, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(30, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      
      System.setCurrentTimeMillis(49);
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(105, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      
      Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(105, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals(67, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(105, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(9, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(30, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isSyntheticBlock());
      assertEquals(0, node3.getSideEffectFlags());
      assertTrue(node3.hasOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertFalse(node3.isOptionalArg());
      assertEquals(9, node3.getType());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isUnscopedQualifiedName());
      assertEquals(4095, node3.getCharno());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(30, node3.getLineno());
      assertFalse(node3.isLocalResultCall());
      assertSame(node1, node3);
      assertSame(node3, node1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      assertNotNull(consoleHandler0);
      assertNull(consoleHandler0.getEncoding());
      
      Level level0 = consoleHandler0.getLevel();
      assertNotNull(level0);
      assertNull(consoleHandler0.getEncoding());
      assertEquals(800, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("INFO", level0.getName());
      assertEquals("INFO", level0.toString());
      
      String string0 = "Object";
      Throwable throwable0 = null;
      logger0.log(level0, "Object", (Throwable) null);
      int int0 = 20;
      String string1 = "MKtD{/X5";
      Node node0 = Node.newString(int0, string1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(node0.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Node.newString("c3WG&]6");
      assertNotNull(node0);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      
      Node node1 = Node.newString(25, "c3WG&]6", 1, 13);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, node1.getLineno());
      assertEquals(13, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLocalResultCall());
      assertEquals(25, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertNotSame(node1, node0);
      
      Node node2 = new Node(95, node0, 32, 0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(95, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isUnscopedQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isQualifiedName());
      assertEquals(32, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isLocalResultCall());
      
      Iterable<Node> iterable0 = node2.children();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(95, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isUnscopedQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isQualifiedName());
      assertEquals(32, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isLocalResultCall());
      assertNotSame(node0, node1);
      
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants1);
      assertFalse(peepholeFoldConstants1.equals((Object)peepholeFoldConstants0));
      
      node2.setOptionalArg(false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(95, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isUnscopedQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isQualifiedName());
      assertEquals(32, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isLocalResultCall());
      assertNotSame(node0, node1);
      
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Node.newString("c3WG&]6");
      assertNotNull(node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node1 = new Node(95, node0, 32, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(95, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(32, node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getCharno());
      
      Iterable<Node> iterable0 = node1.children();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(95, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(32, node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getCharno());
      
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants1);
      assertFalse(peepholeFoldConstants1.equals((Object)peepholeFoldConstants0));
      
      // Undeclared exception!
      try { 
        peepholeFoldConstants1.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Logger logger0 = Tracer.logger;
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      
      JSError[] jSErrorArray0 = loggerErrorManager0.getErrors();
      assertNotNull(jSErrorArray0);
      assertEquals(0, jSErrorArray0.length);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      
      logger0.fine("");
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      
      JSError[] jSErrorArray1 = loggerErrorManager0.getWarnings();
      assertNotNull(jSErrorArray1);
      assertEquals(0, jSErrorArray1.length);
      assertFalse(jSErrorArray1.equals((Object)jSErrorArray0));
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertNotSame(jSErrorArray1, jSErrorArray0);
      
      String string0 = compiler0.toSource(node0);
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node2.wasEmptyNode());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isQualifiedName());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.isSyntheticBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(132, node2.getType());
      assertTrue(node2.hasChildren());
      assertEquals(0, node2.getCharno());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isOptionalArg());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertSame(node1, node2);
      assertSame(node2, node1);
      
      Iterable<Node> iterable0 = node1.children();
      assertNotNull(iterable0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertSame(node1, node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node3);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertTrue(node3.isSyntheticBlock());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(132, node3.getType());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isQuotedString());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isNoSideEffectsCall());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertEquals(1, node3.getLineno());
      assertFalse(node3.isLocalResultCall());
      assertSame(node1, node3);
      assertSame(node1, node2);
      assertSame(node3, node1);
      assertSame(node3, node2);
      
      node0.setDouble((-1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertNotNull(node4);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node4.equals((Object)node0));
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertTrue(node3.isSyntheticBlock());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(132, node3.getType());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isQuotedString());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isNoSideEffectsCall());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertEquals(1, node3.getLineno());
      assertFalse(node3.isLocalResultCall());
      assertEquals(132, node4.getType());
      assertFalse(node4.wasEmptyNode());
      assertFalse(node4.isLocalResultCall());
      assertEquals(0, node4.getCharno());
      assertEquals(1, node4.getChildCount());
      assertEquals(0, node4.getSideEffectFlags());
      assertFalse(node4.isOnlyModifiesThisCall());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isVarArgs());
      assertEquals(1, node4.getLineno());
      assertTrue(node4.hasChildren());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isOptionalArg());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isUnscopedQualifiedName());
      assertTrue(node4.isSyntheticBlock());
      assertSame(node1, node3);
      assertSame(node1, node4);
      assertSame(node1, node2);
      assertSame(node3, node1);
      assertSame(node3, node4);
      assertSame(node3, node2);
      assertSame(node4, node1);
      assertSame(node4, node3);
      assertSame(node4, node2);
      
      System.setCurrentTimeMillis(40);
      Node node5 = new Node(78, node3);
      assertNotNull(node5);
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isOptionalArg());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isNoSideEffectsCall());
      assertFalse(node5.isUnscopedQualifiedName());
      assertEquals(78, node5.getType());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isSyntheticBlock());
      assertEquals(0, node5.getSideEffectFlags());
      assertFalse(node5.wasEmptyNode());
      assertFalse(node5.isOnlyModifiesThisCall());
      assertFalse(node5.isQualifiedName());
      assertEquals(1, node5.getChildCount());
      assertEquals((-1), node5.getCharno());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isVarArgs());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isLocalResultCall());
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertTrue(node3.isSyntheticBlock());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(132, node3.getType());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isQuotedString());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isNoSideEffectsCall());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertEquals(1, node3.getLineno());
      assertFalse(node3.isLocalResultCall());
      
      Node node6 = peepholeFoldConstants0.optimizeSubtree(node5);
      assertNotNull(node6);
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node5));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isOptionalArg());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isNoSideEffectsCall());
      assertFalse(node5.isUnscopedQualifiedName());
      assertEquals(78, node5.getType());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isSyntheticBlock());
      assertEquals(0, node5.getSideEffectFlags());
      assertFalse(node5.wasEmptyNode());
      assertFalse(node5.isOnlyModifiesThisCall());
      assertFalse(node5.isQualifiedName());
      assertEquals(1, node5.getChildCount());
      assertEquals((-1), node5.getCharno());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isVarArgs());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isLocalResultCall());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isQualifiedName());
      assertEquals(1, node6.getChildCount());
      assertEquals(0, node6.getSideEffectFlags());
      assertFalse(node6.isSyntheticBlock());
      assertFalse(node6.wasEmptyNode());
      assertFalse(node6.isOnlyModifiesThisCall());
      assertFalse(node6.isVarArgs());
      assertEquals((-1), node6.getLineno());
      assertTrue(node6.hasChildren());
      assertFalse(node6.isLocalResultCall());
      assertFalse(node6.isQuotedString());
      assertFalse(node6.isOptionalArg());
      assertFalse(node6.isNoSideEffectsCall());
      assertTrue(node6.hasOneChild());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isUnscopedQualifiedName());
      assertEquals(78, node6.getType());
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertTrue(node3.isSyntheticBlock());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(132, node3.getType());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isQuotedString());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isNoSideEffectsCall());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertEquals(1, node3.getLineno());
      assertFalse(node3.isLocalResultCall());
      assertNotSame(node5, node3);
      assertNotSame(node5, node2);
      assertSame(node5, node6);
      assertNotSame(node5, node4);
      assertNotSame(node5, node1);
      assertNotSame(node6, node1);
      assertNotSame(node6, node2);
      assertSame(node6, node5);
      assertNotSame(node6, node4);
      assertNotSame(node6, node3);
      assertSame(node1, node3);
      assertSame(node1, node4);
      assertNotSame(node1, node6);
      assertNotSame(node1, node5);
      assertSame(node1, node2);
      assertSame(node3, node1);
      assertSame(node3, node4);
      assertSame(node3, node2);
      assertNotSame(node3, node6);
      assertNotSame(node3, node5);
      
      System.setCurrentTimeMillis(4);
      Node node7 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node7);
      assertFalse(node7.equals((Object)node0));
      assertFalse(node7.equals((Object)node6));
      assertFalse(node7.equals((Object)node5));
      assertFalse(node1.equals((Object)node6));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(node7.hasMoreThanOneChild());
      assertTrue(node7.hasChildren());
      assertFalse(node7.wasEmptyNode());
      assertTrue(node7.isSyntheticBlock());
      assertFalse(node7.isOnlyModifiesThisCall());
      assertFalse(node7.isQualifiedName());
      assertEquals(1, node7.getChildCount());
      assertEquals(0, node7.getSideEffectFlags());
      assertEquals(132, node7.getType());
      assertFalse(node7.isVarArgs());
      assertFalse(node7.isLocalResultCall());
      assertEquals(0, node7.getCharno());
      assertEquals(1, node7.getLineno());
      assertFalse(node7.isQuotedString());
      assertFalse(node7.isNoSideEffectsCall());
      assertFalse(node7.isUnscopedQualifiedName());
      assertTrue(node7.hasOneChild());
      assertFalse(node7.isOptionalArg());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertSame(node7, node2);
      assertSame(node7, node4);
      assertSame(node7, node1);
      assertNotSame(node7, node6);
      assertNotSame(node7, node5);
      assertSame(node7, node3);
      assertSame(node1, node3);
      assertSame(node1, node4);
      assertNotSame(node1, node6);
      assertNotSame(node1, node5);
      assertSame(node1, node7);
      assertSame(node1, node2);
      
      Node node8 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node8);
      assertFalse(node8.equals((Object)node5));
      assertFalse(node8.equals((Object)node6));
      assertFalse(node8.equals((Object)node0));
      assertFalse(node1.equals((Object)node6));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node8.isNoSideEffectsCall());
      assertFalse(node8.isQuotedString());
      assertTrue(node8.hasOneChild());
      assertFalse(node8.isOptionalArg());
      assertEquals(1, node8.getLineno());
      assertFalse(node8.isLocalResultCall());
      assertFalse(node8.isOnlyModifiesThisCall());
      assertTrue(node8.hasChildren());
      assertEquals(0, node8.getSideEffectFlags());
      assertEquals(132, node8.getType());
      assertFalse(node8.isVarArgs());
      assertFalse(node8.hasMoreThanOneChild());
      assertFalse(node8.isQualifiedName());
      assertFalse(node8.wasEmptyNode());
      assertEquals(1, node8.getChildCount());
      assertEquals(0, node8.getCharno());
      assertFalse(node8.isUnscopedQualifiedName());
      assertTrue(node8.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertSame(node8, node4);
      assertNotSame(node8, node5);
      assertSame(node8, node3);
      assertNotSame(node8, node6);
      assertSame(node8, node1);
      assertSame(node8, node2);
      assertSame(node8, node7);
      assertSame(node1, node3);
      assertSame(node1, node4);
      assertNotSame(node1, node6);
      assertSame(node1, node8);
      assertNotSame(node1, node5);
      assertSame(node1, node7);
      assertSame(node1, node2);
      
      System.setCurrentTimeMillis(48);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Node node0 = Node.newString(78, "");
      assertNotNull(node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(78, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      
      Node node1 = new Node(1, node0, node0, 44, 1514);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(78, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node1.isVarArgs());
      assertEquals(1514, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isLocalResultCall());
      assertEquals(1, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(44, node1.getLineno());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(78, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertEquals(78, node2.getType());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertSame(node0, node2);
      assertSame(node2, node0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Node.newString("c3WG&]6");
      assertNotNull(node0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      
      Node node1 = Node.newString(12, "c3WG&]6");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(12, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertNotSame(node1, node0);
      
      Node node2 = new Node(31, node1, node0, 4095, 781);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(12, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertEquals(4095, node2.getLineno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals(31, node2.getType());
      assertFalse(node2.isLocalResultCall());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertTrue(node2.hasChildren());
      assertEquals(781, node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isNoSideEffectsCall());
      
      Iterable<Node> iterable0 = node1.siblings();
      assertNotNull(iterable0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(12, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertNotSame(node1, node0);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(12, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertEquals(4095, node2.getLineno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals(31, node2.getType());
      assertFalse(node2.isLocalResultCall());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertTrue(node2.hasChildren());
      assertEquals(781, node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(31, node3.getType());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isLocalResultCall());
      assertTrue(node3.hasMoreThanOneChild());
      assertEquals(4095, node3.getLineno());
      assertTrue(node3.hasChildren());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isVarArgs());
      assertEquals(781, node3.getCharno());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.hasOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node2, node3);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      
      JSError[] jSErrorArray0 = loggerErrorManager0.getErrors();
      assertNotNull(jSErrorArray0);
      assertEquals(0, jSErrorArray0.length);
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      
      Node node1 = new Node(45, node0, 36, 18);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(18, node1.getCharno());
      assertEquals(36, node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isLocalResultCall());
      assertEquals(45, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      
      Iterable<Node> iterable0 = node1.children();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node node4 = new Node(17, node2, node2, node1);
      assertNotNull(node4);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      
      Iterable<Node> iterable1 = node4.siblings();
      assertNotNull(iterable1);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node4);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node0));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      
      Node node6 = peepholeFoldConstants0.optimizeSubtree(node5);
      assertNotNull(node6);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node2));
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      
      System.setCurrentTimeMillis(6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      Level level0 = consoleHandler0.getLevel();
      String string0 = "";
      Throwable throwable0 = null;
      logger0.log(level0, "", (Throwable) null);
      String string1 = "";
      Node node0 = Node.newString(string1);
      Node node1 = new Node(node0.FLAG_LOCAL_RESULTS);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node.newString(395, "c3WG&]6", 105, 21);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, 13, 36);
      node0.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      node1.setOptionalArg(false);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(23);
      Node node3 = null;
      try {
        node3 = new Node(4, node2, 42, 88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      System.setCurrentTimeMillis((-2147483648L));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(28);
      System.setCurrentTimeMillis(30);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      Node node1 = new Node(12, node0, 61, 10);
      node0.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node3 = Node.newString(13, "function");
      node1.children();
      peepholeFoldConstants0.optimizeSubtree(node3);
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(46);
      System.setCurrentTimeMillis(2);
      peepholeFoldConstants0.optimizeSubtree(node3);
      peepholeFoldConstants0.optimizeSubtree(node2);
      System.setCurrentTimeMillis(24);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(13, "Tvp}>D|}");
      node0.children();
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      node2.setWasEmptyNode(false);
      node2.siblings();
      Node node3 = peepholeFoldConstants1.optimizeSubtree(node0);
      peepholeFoldConstants1.optimizeSubtree(node3);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      LoggerErrorManager loggerErrorManager1 = new LoggerErrorManager(logger0);
      Compiler compiler1 = new Compiler();
      Node node1 = new Node(56, node0, node0, node0, 48, 3282);
      peepholeFoldConstants0.optimizeSubtree(node1);
      node1.siblings();
      peepholeFoldConstants0.optimizeSubtree(node0);
      peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(1948L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(56, node0, node0, node0, 48, 27);
      peepholeFoldConstants0.optimizeSubtree(node1);
      Iterable<Node> iterable0 = node1.siblings();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      Node node1 = new Node(12, node0, 61, (-4003));
      node0.children();
      peepholeFoldConstants0.optimizeSubtree(node1);
      Node node2 = Node.newString(73, "function");
      node1.children();
      peepholeFoldConstants0.optimizeSubtree(node2);
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(46);
      System.setCurrentTimeMillis(2);
      peepholeFoldConstants0.optimizeSubtree(node2);
      System.setCurrentTimeMillis(4294967295L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger.getAnonymousLogger((String) null);
      Node node0 = Node.newString(73, "Unexpected arithmetic operator");
      node0.children();
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(16);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      assertFalse(peepholeFoldConstants1.equals((Object)peepholeFoldConstants0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("c3 G&]6", "c3 G&]6");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node2 = new Node(34, node1, 16, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      peepholeFoldConstants0.optimizeSubtree(node0);
      Node node4 = null;
      try {
        node4 = new Node(29, node2, node3, node0, 57, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(80, "", 90, 69);
      Node node1 = new Node(34, node0, node0, node0, 3, 10);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c3WG&]6");
      Node node1 = Node.newString(48, "c3WG&]6");
      node0.children();
      Node node2 = new Node(27, node0, node0, node1, 64, (-144));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node[] nodeArray0 = new Node[0];
      Node node4 = new Node((-27), nodeArray0, 44, 2);
      node4.siblings();
      peepholeFoldConstants0.optimizeSubtree(node3);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      loggerErrorManager0.getWarnings();
      compiler0.toSource(node0);
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      peepholeFoldConstants0.optimizeSubtree(node1);
      node1.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node0.setDouble((-1));
      peepholeFoldConstants0.optimizeSubtree(node2);
      System.setCurrentTimeMillis(40);
      Node node3 = new Node(77, node2);
      peepholeFoldConstants0.optimizeSubtree(node3);
      System.setCurrentTimeMillis(4);
      peepholeFoldConstants0.optimizeSubtree(node1);
      Node node4 = new Node(84, node3, (-856), 0);
      peepholeFoldConstants0.optimizeSubtree(node4);
      System.setCurrentTimeMillis(25);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.36238181105494144);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      loggerErrorManager0.getWarnings();
      compiler0.toSource(node0);
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      Node node2 = new Node(16);
      node1.children();
      node0.setDouble((-1));
      peepholeFoldConstants0.optimizeSubtree(node1);
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(4);
      peepholeFoldConstants0.optimizeSubtree(node1);
      Node node3 = new Node(84, node0, (-856), 0);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals(35, Node.QUOTED_PROP);
  }

//   @Test(timeout = 4000)
//   public void test073()  throws Throwable  {
//       PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
//       Logger logger0 = Tracer.logger;
//       ConsoleHandler consoleHandler0 = new ConsoleHandler();
//       Level level0 = consoleHandler0.getLevel();
//       String string0 = "Object";
//       Throwable throwable0 = null;
//       logger0.log(level0, "Object", (Throwable) null);
//       int int0 = 88;
//       int int1 = 3747;
//       String string1 = "NVpC";
//       int int2 = 86;
//       int int3 = 67;
//       Node node0 = Node.newString(int1, string1, int2, int3);
//       Node node1 = new Node(int0, node0, node0.MEMBER_TYPE_PROP, node0.LOCAL_PROP);
//       node0.children();
//       Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
//       node2.setDouble(node1.BREAK_PROP);
//       Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
//       PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
//       peepholeFoldConstants1.optimizeSubtree(node1);
//       PeepholeFoldConstants peepholeFoldConstants2 = new PeepholeFoldConstants();
//       peepholeFoldConstants2.optimizeSubtree(node0);
//       int int4 = 1586;
//       Node node4 = new Node(int4, node0, node0, node1);
//       PeepholeFoldConstants peepholeFoldConstants3 = new PeepholeFoldConstants();
//       peepholeFoldConstants3.optimizeSubtree(node2);
//       peepholeFoldConstants2.optimizeSubtree(node2);
//       peepholeFoldConstants1.optimizeSubtree(node4);
//       System.setCurrentTimeMillis(node3.EMPTY_BLOCK);
//   }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      consoleHandler0.getLevel();
      consoleHandler0.getLevel();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Node node0 = Node.newString(88, "rplacetdGsneraX$tors");
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      LoggerErrorManager loggerErrorManager1 = new LoggerErrorManager(logger0);
      Compiler compiler1 = new Compiler();
      Node node1 = Node.newString(35, "function");
      node1.children();
      peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(15);
      System.setCurrentTimeMillis(0L);
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(2902L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(35, 2, 35);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      Node node1 = new Node(12, node0, 61, (-4003));
      node0.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      try { 
        node2.setDouble(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EQ is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      Node node1 = new Node(12, node0, 61, 10);
      node0.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(8);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1504L));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      Level level0 = consoleHandler0.getLevel();
      logger0.log(level0, "Object", (Throwable) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      String string0 = "rplacetdGsneraX$tors";
      int int0 = 33;
      Node node0 = Node.newString(int0, string0);
      node0.children();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(node0.LOCAL_PROP);
      System.setCurrentTimeMillis(node0.USES_PROP);
      System.setCurrentTimeMillis(node0.SPECIALCALL_EVAL);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(node2.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      consoleHandler0.getLevel();
      Node node0 = Node.newString(33, "rplacetdGsneraX$tors");
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(20);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      Node node1 = new Node(45, node0, 36, 18);
      node1.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      try { 
        node2.setDouble(5166.871);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SHEQ 36 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(78, "");
      Node node1 = new Node(45, node0, node0, node0, 9, 1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(89, "rplacetdGsneraX$tors");
      node0.children();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      consoleHandler0.getLevel();
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(89, "");
      System.setCurrentTimeMillis((-1880L));
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(31);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      Compiler compiler1 = new Compiler();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString("c3 G&]6");
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      compiler0.externAndJsRoot = node1;
      Node node2 = compiler1.parseSyntheticCode("c3 G&]6", "c3 G&]6");
      Node node3 = new Node((-4949), node2, 63, 49);
      node2.children();
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node4);
      peepholeFoldConstants0.optimizeSubtree(node5);
      Node node6 = peepholeFoldConstants1.optimizeSubtree(node4);
      Node node7 = peepholeFoldConstants1.optimizeSubtree(node6);
      Node node8 = new Node((-1506), node4, node7, node6);
      Node node9 = Normalize.parseAndNormalizeTestCode(compiler0, "Object", "c3 G&]6");
      peepholeFoldConstants1.optimizeSubtree(node9);
      System.setCurrentTimeMillis((-736L));
      Node node10 = peepholeFoldConstants1.optimizeSubtree(node7);
      assertFalse(node10.equals((Object)node2));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node.newString("");
      Node node0 = new Node(15);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("c3 G&]6", "c3 G&]6");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      peepholeFoldConstants0.optimizeSubtree(node0);
      Node node4 = new Node(29, node2, node3, node0, 57, 49);
      peepholeFoldConstants0.optimizeSubtree(node4);
      peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(33);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      Node node0 = Node.newString(20, "MKtD{/X5");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      peepholeFoldConstants0.optimizeSubtree(node0);
      System.setCurrentTimeMillis(49);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.children();
      Node node2 = new Node(29, node0, node1, node0, 44, 49);
      peepholeFoldConstants0.optimizeSubtree(node0);
      node2.siblings();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("c3WG&]6");
      node0.children();
      Node node1 = new Node(27, node0, node0, node0, 64, (-144));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.7294666545003532);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(1133, node0, node0, node0, 48, 27);
      Node node2 = new Node(10, node1, node1, node1, node1);
      Node.newString("{*Z)5TeV");
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~\"-X*seXI$Ymcl");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      Node node0 = compiler0.parseSyntheticCode("c3 G&]6", "c3 G&]6");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node6 = new Node(29, node2, node5, node0, 57, 49);
      peepholeFoldConstants0.optimizeSubtree(node6);
      node2.siblings();
      node4.addChildToFront(node6);
      peepholeFoldConstants0.optimizeSubtree(node3);
      PeepholeFoldConstants peepholeFoldConstants1 = new PeepholeFoldConstants();
      peepholeFoldConstants1.optimizeSubtree(node2);
      Node.newString("+9-?Yc)gN8<", (-14), 1833);
      // Undeclared exception!
      node1.checkTreeEquals(node3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      Node.newNumber((double) 21);
      Node node1 = new Node(27, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      loggerErrorManager0.getWarnings();
      compiler0.toSource(node0);
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      peepholeFoldConstants0.optimizeSubtree(node1);
      node1.children();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node0.setDouble((-1));
      peepholeFoldConstants0.optimizeSubtree(node2);
      System.setCurrentTimeMillis(40);
      Node node3 = new Node(77, node2);
      peepholeFoldConstants0.optimizeSubtree(node3);
      peepholeFoldConstants0.optimizeSubtree(node3);
      System.setCurrentTimeMillis(4);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertSame(node4, node2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(77, node0);
      peepholeFoldConstants0.optimizeSubtree(node1);
      System.setCurrentTimeMillis(25);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      Node node0 = compiler0.parseSyntheticCode("c3 G&]6", "c3 G&]6");
      Node node1 = Node.newString(48, "c3 G&]6");
      node0.children();
      peepholeFoldConstants0.optimizeSubtree(node1);
      try { 
        node0.setDouble(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK [sourcename: java.lang.String@0000000444] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node.newString("c3WG&]6");
      Node node0 = Node.newString(48, "c3WG&]6");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      Node node0 = compiler0.parseSyntheticCode("c3 G&]6", "c3 G&]6");
      Node node1 = new Node(0, node0, 50, 91);
      node0.children();
      peepholeFoldConstants0.optimizeSubtree(node1);
      try { 
        node0.setDouble(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK [sourcename: java.lang.String@0000000444] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      loggerErrorManager0.getWarnings();
      compiler0.toSource(node0);
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "replaceIdGenerators";
      stringArray0[2] = "0";
      JSError jSError0 = nodeTraversal0.makeError(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      loggerErrorManager0.println(checkLevel0, jSError0);
      Node node3 = new Node(1712, node2, node1, node1);
      node3.removeChildren();
      peepholeFoldConstants0.optimizeSubtree(node3);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("replaceIdGenerators", "replaceIdGenerators");
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
      peepholeFoldConstants0.optimizeSubtree(node2);
      peepholeFoldConstants0.optimizeSubtree(node4);
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node5.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      Node node1 = Node.newNumber(1.5);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node6 = peepholeFoldConstants0.optimizeSubtree(node4);
      Node node7 = new Node(12, node4, node2, node6, (-489), (-2494));
      Node node8 = peepholeFoldConstants0.optimizeSubtree(node4);
      Node node9 = peepholeFoldConstants0.optimizeSubtree(node2);
      peepholeFoldConstants0.optimizeSubtree(node5);
      Node node10 = Node.newString("replaceIdGenerators", 4095, (-2369));
      node10.checkTreeEquals(node2);
      peepholeFoldConstants0.optimizeSubtree(node10);
      Node node11 = peepholeFoldConstants0.optimizeSubtree(node9);
      assertFalse(node11.equals((Object)node8));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((double) 105);
      node0.children();
      Node node1 = new Node(7, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node.newString("2");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "2", "2");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      StatementFusion statementFusion0 = new StatementFusion();
      Node node0 = new Node(1440, 1440, 1440);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Node.newNumber(0.0);
      loggerErrorManager0.getErrors();
      logger0.fine("");
      loggerErrorManager0.getWarnings();
      compiler0.toSource(node0);
      Node node1 = compiler0.parseTestCode("replaceIdGenerators");
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "replaceIdGenerators";
      stringArray0[2] = "0";
      JSError jSError0 = nodeTraversal0.makeError(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      loggerErrorManager0.println(checkLevel0, jSError0);
      Node node3 = new Node(1713, node2, node1, node1);
      peepholeFoldConstants0.optimizeSubtree(node3);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("replaceIdGenerators", "replaceIdGenerators");
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
      peepholeFoldConstants0.optimizeSubtree(node2);
      peepholeFoldConstants0.optimizeSubtree(node4);
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node5.equals((Object)node3));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node1.setDouble(5166.871);
      Node node2 = new Node(37, node0, node1, node0, 4, 4);
      peepholeFoldConstants0.optimizeSubtree(node0);
      peepholeFoldConstants0.optimizeSubtree(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-339.525929), 1919, (-2858));
      Node node1 = new Node((-2651), node0, node0, node0, node0);
      node0.copyInformationFrom(node1);
      boolean boolean0 = true;
      node1.setOptionalArg(true);
      Node node2 = null;
      try {
        node2 = new Node(2832, node1, node0, 31, (-3111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:26:37 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.CoalesceVariableNames;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ObjectPropertyStringPreprocess;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPeepholeOptimization_ESTest extends AbstractPeepholeOptimization_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(38, node0, node0);
      // Undeclared exception!
      try { 
        AbstractPeepholeOptimization.validateResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      exploitAssigns0.reportCodeChange();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      DiagnosticType diagnosticType0 = ObjectPropertyStringPreprocess.INVALID_NUM_ARGUMENTS_ERROR;
      Compiler compiler0 = new Compiler();
      CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, coalesceVariableNames0);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      Node node0 = compiler0.parseTestCode("Sm<7D.");
      exploitAssigns0.error(diagnosticType0, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node((-23));
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node1 = compiler0.parseTestCode("msg.no.curly.let");
      node1.addChildToBack(node0);
      Node node2 = AbstractPeepholeOptimization.validateResult(node0);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "SOURCELESS");
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Compiler compiler0 = new Compiler();
      Vector<Node> vector0 = new Vector<Node>(125, (-3831));
      GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler0, vector0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0, (ScopeCreator) null);
      peepholeRemoveDeadCode0.beginTraversal(nodeTraversal0);
      boolean boolean0 = peepholeRemoveDeadCode0.isASTNormalized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, (NodeTraversal.Callback) null);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      // Undeclared exception!
      try { 
        exploitAssigns0.reportCodeChange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node(125);
      Compiler compiler0 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      exploitAssigns0.beginTraversal(nodeTraversal0);
      // Undeclared exception!
      try { 
        exploitAssigns0.areNodesEqualForInlining(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node(141);
      node0.addChildAfter(node0, node0);
      // Undeclared exception!
      AbstractPeepholeOptimization.validateResult(node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node(125);
      node0.setIsSyntheticBlock(true);
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node(132, 125, 132);
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = AbstractPeepholeOptimization.validateResult((Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      Node node0 = Node.newString(831, "", 831, 912);
      boolean boolean0 = exploitAssigns0.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString(831, "", 831, 912);
      // Undeclared exception!
      try { 
        exploitAssigns0.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler((PrintStream) null);
      FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, (ScopeCreator) null);
      exploitAssigns0.endTraversal(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = new Node(125);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.areNodesEqualForInlining(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.mayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.reportCodeChange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.isASTNormalized();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      DiagnosticType diagnosticType0 = TypeCheck.HIDDEN_INTERFACE_PROPERTY;
      Node node0 = new Node(1747);
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.error(diagnosticType0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1747
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}

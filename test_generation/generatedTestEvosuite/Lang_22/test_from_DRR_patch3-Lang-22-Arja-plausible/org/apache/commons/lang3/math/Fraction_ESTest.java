/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:45:11 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      
      Fraction fraction1 = Fraction.getReducedFraction(5, 40);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.125, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.125F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(8, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), int0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.125, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.125F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(8, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".N,Jz1RJm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.getReducedFraction((-1858), (-1858));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-2396.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-2396), fraction2.getProperWhole());
      assertEquals((short) (-2396), fraction2.shortValue());
      assertEquals((-2396L), fraction2.longValue());
      assertEquals((-2396.0), fraction2.doubleValue(), 0.01);
      assertEquals((-2396), fraction2.intValue());
      assertEquals((-2396), fraction2.getNumerator());
      assertEquals((byte) (-92), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.pow(1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4095, (-1520));
      assertNotNull(fraction0);
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals(1520, fraction0.getDenominator());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals(1520, fraction0.getDenominator());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.694079F, fraction1.floatValue(), 0.01F);
      assertEquals(2.6940789473684212, fraction1.doubleValue(), 0.01);
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(1520, fraction1.getDenominator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(4095, fraction1.getNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.intValue());
      assertEquals(1055, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.6666666666666667, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.6666666666666667, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.36, fraction1.doubleValue(), 0.01);
      assertEquals(0.36F, fraction1.floatValue(), 0.01F);
      assertEquals(9, fraction1.getProperNumerator());
      assertEquals(9, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(25, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.36, fraction1.doubleValue(), 0.01);
      assertEquals(0.36F, fraction1.floatValue(), 0.01F);
      assertEquals(9, fraction1.getProperNumerator());
      assertEquals(9, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(25, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 553);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(553, fraction1.getDenominator());
      assertEquals(499, fraction1.getProperNumerator());
      assertEquals((-3883333), fraction1.getProperWhole());
      assertEquals((-3883333.9023508136), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-16709), fraction1.shortValue());
      assertEquals((-3883334.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3883333), fraction1.intValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-3883333L), fraction1.longValue());
      assertEquals((byte) (-69), fraction1.byteValue());
      
      Fraction fraction2 = fraction1.reduce();
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertEquals(553, fraction1.getDenominator());
      assertEquals(499, fraction1.getProperNumerator());
      assertEquals((-3883333), fraction1.getProperWhole());
      assertEquals((-3883333.9023508136), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-16709), fraction1.shortValue());
      assertEquals((-3883334.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3883333), fraction1.intValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-3883333L), fraction1.longValue());
      assertEquals((byte) (-69), fraction1.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction2.getNumerator());
      assertEquals((-3883333), fraction2.getProperWhole());
      assertEquals((-3883333.9023508136), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-16709), fraction2.shortValue());
      assertEquals((-3883333L), fraction2.longValue());
      assertEquals((byte) (-69), fraction2.byteValue());
      assertEquals(553, fraction2.getDenominator());
      assertEquals((-3883333), fraction2.intValue());
      assertEquals(499, fraction2.getProperNumerator());
      assertEquals((-3883334.0F), fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = fraction0.multiplyBy(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction3);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertNotNull(fraction3);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(553, fraction1.getDenominator());
      assertEquals(499, fraction1.getProperNumerator());
      assertEquals((-3883333), fraction1.getProperWhole());
      assertEquals((-3883333.9023508136), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-16709), fraction1.shortValue());
      assertEquals((-3883334.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3883333), fraction1.intValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-3883333L), fraction1.longValue());
      assertEquals((byte) (-69), fraction1.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction2.getNumerator());
      assertEquals((-3883333), fraction2.getProperWhole());
      assertEquals((-3883333.9023508136), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-16709), fraction2.shortValue());
      assertEquals((-3883333L), fraction2.longValue());
      assertEquals((byte) (-69), fraction2.byteValue());
      assertEquals(553, fraction2.getDenominator());
      assertEquals((-3883333), fraction2.intValue());
      assertEquals(499, fraction2.getProperNumerator());
      assertEquals((-3883334.0F), fraction2.floatValue(), 0.01F);
      assertEquals(2765, fraction3.getDenominator());
      assertEquals(2158, fraction3.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction3.getNumerator());
      assertEquals((-776666.75F), fraction3.floatValue(), 0.01F);
      assertEquals((-776666.7804701627), fraction3.doubleValue(), 0.01);
      assertEquals((short)9766, fraction3.shortValue());
      assertEquals((-776666L), fraction3.longValue());
      assertEquals((byte)38, fraction3.byteValue());
      assertEquals((-776666), fraction3.getProperWhole());
      assertEquals((-776666), fraction3.intValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.getFraction("-1");
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = fraction0.ONE.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-1), fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((byte) (-1), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      
      long long0 = fraction1.longValue();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1L, long0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1630, (-3));
      assertNotNull(fraction0);
      assertEquals((short) (-543), fraction0.shortValue());
      assertEquals((-543.3333F), fraction0.floatValue(), 0.01F);
      assertEquals((-543.3333333333334), fraction0.doubleValue(), 0.01);
      assertEquals((-1630), fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals((-543), fraction0.getProperWhole());
      assertEquals((-543), fraction0.intValue());
      assertEquals((-543L), fraction0.longValue());
      assertEquals((byte) (-31), fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      
      long long0 = fraction0.longValue();
      assertEquals((-543L), long0);
      assertEquals((short) (-543), fraction0.shortValue());
      assertEquals((-543.3333F), fraction0.floatValue(), 0.01F);
      assertEquals((-543.3333333333334), fraction0.doubleValue(), 0.01);
      assertEquals((-1630), fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals((-543), fraction0.getProperWhole());
      assertEquals((-543), fraction0.intValue());
      assertEquals((-543L), fraction0.longValue());
      assertEquals((byte) (-31), fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      
      int int0 = fraction0.intValue();
      assertEquals(1, int0);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
      
      int int0 = fraction0.intValue();
      assertEquals((-3880), int0);
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(1, int0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4095, (-1520));
      assertNotNull(fraction0);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals(1520, fraction0.getDenominator());
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((-4095), fraction0.getNumerator());
      
      int int0 = fraction0.getProperWhole();
      assertEquals((-2), int0);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals(1520, fraction0.getDenominator());
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((-4095), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(3, int0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getProperWhole());
      
      int int0 = fraction0.getNumerator();
      assertEquals(2397, int0);
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1546), 468);
      assertNotNull(fraction0);
      assertEquals((-3), fraction0.intValue());
      assertEquals((short) (-3), fraction0.shortValue());
      assertEquals(234, fraction0.getDenominator());
      assertEquals((-773), fraction0.getNumerator());
      assertEquals((-3), fraction0.getProperWhole());
      assertEquals(71, fraction0.getProperNumerator());
      assertEquals((-3.3034189F), fraction0.floatValue(), 0.01F);
      assertEquals((-3.3034188034188032), fraction0.doubleValue(), 0.01);
      assertEquals((-3L), fraction0.longValue());
      assertEquals((byte) (-3), fraction0.byteValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals((-773), int0);
      assertEquals((-3), fraction0.intValue());
      assertEquals((short) (-3), fraction0.shortValue());
      assertEquals(234, fraction0.getDenominator());
      assertEquals((-773), fraction0.getNumerator());
      assertEquals((-3), fraction0.getProperWhole());
      assertEquals(71, fraction0.getProperNumerator());
      assertEquals((-3.3034189F), fraction0.floatValue(), 0.01F);
      assertEquals((-3.3034188034188032), fraction0.doubleValue(), 0.01);
      assertEquals((-3L), fraction0.longValue());
      assertEquals((byte) (-3), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("3/5");
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1");
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(265, 615, 265);
      assertNotNull(fraction0);
      assertEquals(267.3207547169811, fraction0.doubleValue(), 0.01);
      assertEquals(85, fraction0.getProperNumerator());
      assertEquals((byte)11, fraction0.byteValue());
      assertEquals(267, fraction0.getProperWhole());
      assertEquals(265, fraction0.getDenominator());
      assertEquals(70840, fraction0.getNumerator());
      assertEquals(267, fraction0.intValue());
      assertEquals(267L, fraction0.longValue());
      assertEquals(267.32074F, fraction0.floatValue(), 0.01F);
      assertEquals((short)267, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-362), 1627, 1627);
      assertNotNull(fraction0);
      assertEquals((-363.0), fraction0.doubleValue(), 0.01);
      assertEquals((-363), fraction0.getProperWhole());
      assertEquals((-363), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1627, fraction0.getDenominator());
      assertEquals((-363L), fraction0.longValue());
      assertEquals((-363.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-107), fraction0.byteValue());
      assertEquals((-590601), fraction0.getNumerator());
      assertEquals((short) (-363), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.75), fraction1.doubleValue(), 0.01);
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-0.75F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      
      double double0 = fraction1.doubleValue();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-0.75), double0, 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.75), fraction1.doubleValue(), 0.01);
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-0.75F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getFraction((-1426.93162009353));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((byte)110, fraction1.byteValue());
      assertEquals((-6385519), fraction1.getNumerator());
      assertEquals((-1426.931620111732), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1426), fraction1.shortValue());
      assertEquals((-1426), fraction1.intValue());
      assertEquals((-1426L), fraction1.longValue());
      assertEquals((-1426), fraction1.getProperWhole());
      assertEquals(4475, fraction1.getDenominator());
      assertEquals((-1426.9316F), fraction1.floatValue(), 0.01F);
      assertEquals(4169, fraction1.getProperNumerator());
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)110, fraction1.byteValue());
      assertEquals((-6385519), fraction1.getNumerator());
      assertEquals((-1426.931620111732), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1426), fraction1.shortValue());
      assertEquals((-1426), fraction1.intValue());
      assertEquals((-1426L), fraction1.longValue());
      assertEquals((-1426), fraction1.getProperWhole());
      assertEquals(4475, fraction1.getDenominator());
      assertEquals((-1426.9316F), fraction1.floatValue(), 0.01F);
      assertEquals(4169, fraction1.getProperNumerator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((-13425), fraction2.getNumerator());
      assertEquals(25542076, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals((-5.256033221418651E-4), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(13425, fraction2.getProperNumerator());
      assertEquals((-5.256033E-4F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-7760.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-7760), fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-7760), fraction2.intValue());
      assertEquals((-7760.0), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-7760), fraction2.shortValue());
      assertEquals((-7760L), fraction2.longValue());
      assertEquals((byte) (-80), fraction2.byteValue());
      assertEquals((-7760), fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4095, (-1520));
      assertNotNull(fraction0);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals((-2), fraction0.intValue());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2L), fraction0.longValue());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals(1520, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.THREE_QUARTERS.add(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals((-2), fraction0.intValue());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2L), fraction0.longValue());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals(1520, fraction0.getDenominator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.9440789F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1435, fraction1.getProperNumerator());
      assertEquals(1520, fraction1.getDenominator());
      assertEquals((-2955), fraction1.getNumerator());
      assertEquals((-1.944078947368421), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3873.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3873L), fraction1.longValue());
      assertEquals((-3873), fraction1.getProperWhole());
      assertEquals((byte) (-33), fraction1.byteValue());
      assertEquals((-3873.0), fraction1.doubleValue(), 0.01);
      assertEquals((-3873), fraction1.intValue());
      assertEquals((-3873), fraction1.getNumerator());
      assertEquals((short) (-3873), fraction1.shortValue());
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3873.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3873L), fraction1.longValue());
      assertEquals((-3873), fraction1.getProperWhole());
      assertEquals((byte) (-33), fraction1.byteValue());
      assertEquals((-3873.0), fraction1.doubleValue(), 0.01);
      assertEquals((-3873), fraction1.intValue());
      assertEquals((-3873), fraction1.getNumerator());
      assertEquals((short) (-3873), fraction1.shortValue());
      assertEquals(15000129, fraction2.intValue());
      assertEquals(1.5000129E7, fraction2.doubleValue(), 0.01);
      assertEquals(15000129, fraction2.getProperWhole());
      assertEquals((byte)65, fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.5000129E7F, fraction2.floatValue(), 0.01F);
      assertEquals((short) (-7615), fraction2.shortValue());
      assertEquals(15000129, fraction2.getNumerator());
      assertEquals(15000129L, fraction2.longValue());
      
      Fraction fraction3 = fraction2.abs();
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction0);
      assertSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertNotNull(fraction3);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3873.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3873L), fraction1.longValue());
      assertEquals((-3873), fraction1.getProperWhole());
      assertEquals((byte) (-33), fraction1.byteValue());
      assertEquals((-3873.0), fraction1.doubleValue(), 0.01);
      assertEquals((-3873), fraction1.intValue());
      assertEquals((-3873), fraction1.getNumerator());
      assertEquals((short) (-3873), fraction1.shortValue());
      assertEquals(15000129, fraction2.intValue());
      assertEquals(1.5000129E7, fraction2.doubleValue(), 0.01);
      assertEquals(15000129, fraction2.getProperWhole());
      assertEquals((byte)65, fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.5000129E7F, fraction2.floatValue(), 0.01F);
      assertEquals((short) (-7615), fraction2.shortValue());
      assertEquals(15000129, fraction2.getNumerator());
      assertEquals(15000129L, fraction2.longValue());
      assertEquals((short) (-7615), fraction3.shortValue());
      assertEquals((byte)65, fraction3.byteValue());
      assertEquals(15000129, fraction3.getProperWhole());
      assertEquals(15000129, fraction3.intValue());
      assertEquals(15000129, fraction3.getNumerator());
      assertEquals(1.5000129E7F, fraction3.floatValue(), 0.01F);
      assertEquals(15000129L, fraction3.longValue());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(1.5000129E7, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3717), 0, 330);
      assertNotNull(fraction0);
      assertEquals((-3717.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1226610), fraction0.getNumerator());
      assertEquals((-3717), fraction0.getProperWhole());
      assertEquals(330, fraction0.getDenominator());
      assertEquals((-3717L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)123, fraction0.byteValue());
      assertEquals((short) (-3717), fraction0.shortValue());
      assertEquals((-3717.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3717), fraction0.intValue());
      
      Fraction fraction1 = fraction0.abs();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((-3717.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1226610), fraction0.getNumerator());
      assertEquals((-3717), fraction0.getProperWhole());
      assertEquals(330, fraction0.getDenominator());
      assertEquals((-3717L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)123, fraction0.byteValue());
      assertEquals((short) (-3717), fraction0.shortValue());
      assertEquals((-3717.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3717), fraction0.intValue());
      assertEquals(1226610, fraction1.getNumerator());
      assertEquals(3717, fraction1.getProperWhole());
      assertEquals(3717.0, fraction1.doubleValue(), 0.01);
      assertEquals(3717L, fraction1.longValue());
      assertEquals(3717.0F, fraction1.floatValue(), 0.01F);
      assertEquals(330, fraction1.getDenominator());
      assertEquals(3717, fraction1.intValue());
      assertEquals((byte) (-123), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)3717, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2.1474836468677046E9));
      assertNotNull(fraction0);
      assertEquals((-2147483357), fraction0.getNumerator());
      assertEquals((-8355966), fraction0.getProperWhole());
      assertEquals(257, fraction0.getDenominator());
      assertEquals((-8355966), fraction0.intValue());
      assertEquals((byte) (-126), fraction0.byteValue());
      assertEquals((short)32642, fraction0.shortValue());
      assertEquals((-8355966.5F), fraction0.floatValue(), 0.01F);
      assertEquals((-8355966L), fraction0.longValue());
      assertEquals(95, fraction0.getProperNumerator());
      assertEquals((-8355966.369649805), fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      
      // Undeclared exception!
      try { 
        fraction0.pow(3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = fraction0.pow(1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 553);
      assertNotNull(fraction0);
      assertEquals((-3883333), fraction0.intValue());
      assertEquals((short) (-16709), fraction0.shortValue());
      assertEquals(553, fraction0.getDenominator());
      assertEquals((-3883334.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-69), fraction0.byteValue());
      assertEquals(499, fraction0.getProperNumerator());
      assertEquals((-3883333L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-3883333.9023508136), fraction0.doubleValue(), 0.01);
      assertEquals((-3883333), fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 381);
      assertNotNull(fraction0);
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-5636440), fraction0.getProperWhole());
      assertEquals((byte) (-88), fraction0.byteValue());
      assertEquals((-5636440.020997375), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-344), fraction0.shortValue());
      assertEquals(381, fraction0.getDenominator());
      assertEquals((-5636440L), fraction0.longValue());
      assertEquals(8, fraction0.getProperNumerator());
      assertEquals((-5636440.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-5636440), fraction0.intValue());
      
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.getDenominator();
      assertEquals(2603, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1), fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(2603, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(string0);
      assertEquals("-1", string0);
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1), fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(2603, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals("1/4", string0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      
      String string0 = fraction1.toString();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(string0);
      assertEquals("2/5", string0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.getFraction(4095, (-1520));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1520, fraction1.getDenominator());
      assertEquals(1055, fraction1.getProperNumerator());
      assertEquals((byte) (-2), fraction1.byteValue());
      assertEquals((-2), fraction1.getProperWhole());
      assertEquals((-2.694079F), fraction1.floatValue(), 0.01F);
      assertEquals((-2), fraction1.intValue());
      assertEquals((-2.6940789473684212), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-2), fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals((-4095), fraction1.getNumerator());
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(1520, fraction1.getDenominator());
      assertEquals(1055, fraction1.getProperNumerator());
      assertEquals((byte) (-2), fraction1.byteValue());
      assertEquals((-2), fraction1.getProperWhole());
      assertEquals((-2.694079F), fraction1.floatValue(), 0.01F);
      assertEquals((-2), fraction1.intValue());
      assertEquals((-2.6940789473684212), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-2), fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals((-4095), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.ONE.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      
      Fraction fraction2 = Fraction.getFraction((-2603), (-2603));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(2603, fraction2.getDenominator());
      assertEquals(2603, fraction2.getNumerator());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      
      Fraction fraction3 = fraction1.invert();
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertTrue(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertNotNull(fraction3);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction3.doubleValue(), 0.01);
      assertEquals(1, fraction3.getProperWhole());
      assertEquals(1, fraction3.getDenominator());
      assertEquals((short)1, fraction3.shortValue());
      assertEquals(1, fraction3.intValue());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
      assertEquals(1, fraction3.getNumerator());
      assertEquals((byte)1, fraction3.byteValue());
      assertEquals(1L, fraction3.longValue());
      
      int int0 = fraction3.compareTo(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertFalse(fraction0.equals((Object)fraction3));
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction3));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertEquals(0, int0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(2603, fraction2.getDenominator());
      assertEquals(2603, fraction2.getNumerator());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1.0, fraction3.doubleValue(), 0.01);
      assertEquals(1, fraction3.getProperWhole());
      assertEquals(1, fraction3.getDenominator());
      assertEquals((short)1, fraction3.shortValue());
      assertEquals(1, fraction3.intValue());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
      assertEquals(1, fraction3.getNumerator());
      assertEquals((byte)1, fraction3.byteValue());
      assertEquals(1L, fraction3.longValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction((double) 1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0, int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.ONE;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397, fraction0.getNumerator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      
      int int0 = fraction0.compareTo(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, int0);
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397, fraction0.getNumerator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      
      fraction0.ONE.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      
      fraction0.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(2603, fraction1.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(2603, fraction1.getDenominator());
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(boolean0);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(2603, fraction1.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(2603, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), (-1));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.getReducedFraction(0, 1868);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 381);
      assertNotNull(fraction0);
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((byte) (-88), fraction0.byteValue());
      assertEquals((-5636440.020997375), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-344), fraction0.shortValue());
      assertEquals((-5636440), fraction0.getProperWhole());
      assertEquals(381, fraction0.getDenominator());
      assertEquals((-5636440L), fraction0.longValue());
      assertEquals((-5636440), fraction0.intValue());
      assertEquals(8, fraction0.getProperNumerator());
      assertEquals((-5636440.0F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.getFraction(381, 381);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(381, fraction1.getDenominator());
      assertEquals(381, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      assertNotNull(fraction0);
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-183), fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-183), fraction0.getNumerator());
      assertEquals((-0.26991150442477874), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(226, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-61), fraction1.getNumerator());
      assertEquals(61, fraction1.getProperNumerator());
      assertEquals((-0.2699115F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.8, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(4, fraction2.getNumerator());
      assertEquals(4, fraction2.getProperNumerator());
      assertEquals(0.8F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-25), 2147483642);
      assertNotNull(fraction0);
      assertEquals((-1.1641532215219547E-8), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(2147483642, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-25), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(25, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-1.1641532E-8F), fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        fraction0.ONE.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals((-183), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(1356, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.ONE_FIFTH.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals((-183), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals((short)5, fraction1.shortValue());
      assertEquals(5.0, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.intValue());
      assertEquals(5L, fraction1.longValue());
      assertEquals((byte)5, fraction1.byteValue());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(5, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(5.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals((-183), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals((short)5, fraction1.shortValue());
      assertEquals(5.0, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.intValue());
      assertEquals(5L, fraction1.longValue());
      assertEquals((byte)5, fraction1.byteValue());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(5, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(5.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(5, fraction2.getProperWhole());
      assertEquals(6963, fraction2.getNumerator());
      assertEquals((short)5, fraction2.shortValue());
      assertEquals(5.134956F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)5, fraction2.byteValue());
      assertEquals(5.134955752212389, fraction2.doubleValue(), 0.01);
      assertEquals(183, fraction2.getProperNumerator());
      assertEquals(5L, fraction2.longValue());
      assertEquals(1356, fraction2.getDenominator());
      assertEquals(5, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 381);
      assertNotNull(fraction0);
      assertEquals((short) (-344), fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((byte) (-88), fraction0.byteValue());
      assertEquals((-5636440.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-5636440L), fraction0.longValue());
      assertEquals((-5636440), fraction0.getProperWhole());
      assertEquals(8, fraction0.getProperNumerator());
      assertEquals((-5636440), fraction0.intValue());
      assertEquals((-5636440.020997375), fraction0.doubleValue(), 0.01);
      assertEquals(381, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ONE;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.ONE.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(2603, fraction2.getDenominator());
      assertEquals((short)2, fraction2.shortValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(2.0F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)2, fraction2.byteValue());
      assertEquals(5206, fraction2.getNumerator());
      assertEquals(2, fraction2.intValue());
      assertEquals(2.0, fraction2.doubleValue(), 0.01);
      assertEquals(2L, fraction2.longValue());
      assertEquals(2, fraction2.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-4496), (-1197));
      assertNotNull(fraction0);
      assertEquals(905, fraction0.getProperNumerator());
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals(3.7560568086883874, fraction0.doubleValue(), 0.01);
      assertEquals((short)3, fraction0.shortValue());
      assertEquals(4496, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperWhole());
      assertEquals(1197, fraction0.getDenominator());
      assertEquals(3L, fraction0.longValue());
      assertEquals(3, fraction0.intValue());
      assertEquals(3.7560568F, fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        fraction0.pow(74);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2.147483645E9));
      assertNotNull(fraction0);
      assertEquals((-2.147483645E9), fraction0.doubleValue(), 0.01);
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)3, fraction0.shortValue());
      assertEquals((-2147483645L), fraction0.longValue());
      assertEquals((-2147483645), fraction0.intValue());
      assertEquals((-2147483645), fraction0.getNumerator());
      assertEquals((-2147483645), fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((-2.147483645E9), fraction0.doubleValue(), 0.01);
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)3, fraction0.shortValue());
      assertEquals((-2147483645L), fraction0.longValue());
      assertEquals((-2147483645), fraction0.intValue());
      assertEquals((-2147483645), fraction0.getNumerator());
      assertEquals((-2147483645), fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-4.656613E-10F), fraction1.floatValue(), 0.01F);
      assertEquals((-4.656612879582606E-10), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(2147483645, fraction1.getDenominator());
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.pow(74);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.pow(0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals((-183), fraction0.getNumerator());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.pow((-1));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals((-183), fraction0.getNumerator());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-7), fraction1.shortValue());
      assertEquals((-7.409836065573771), fraction1.doubleValue(), 0.01);
      assertEquals((-1356), fraction1.getNumerator());
      assertEquals(183, fraction1.getDenominator());
      assertEquals((-7.4098363F), fraction1.floatValue(), 0.01F);
      assertEquals(75, fraction1.getProperNumerator());
      assertEquals((-7), fraction1.getProperWhole());
      assertEquals((-7L), fraction1.longValue());
      assertEquals((byte) (-7), fraction1.byteValue());
      assertEquals((-7), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals((-183), fraction0.getNumerator());
      assertEquals(183, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.ZERO.abs();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals((-183), fraction0.getNumerator());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 381);
      assertNotNull(fraction0);
      assertEquals((-5636440.020997375), fraction0.doubleValue(), 0.01);
      assertEquals((-5636440), fraction0.getProperWhole());
      assertEquals(381, fraction0.getDenominator());
      assertEquals((byte) (-88), fraction0.byteValue());
      assertEquals(8, fraction0.getProperNumerator());
      assertEquals((-5636440.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-344), fraction0.shortValue());
      assertEquals((-5636440), fraction0.intValue());
      assertEquals((-5636440L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      Fraction fraction1 = fraction0.ONE_FIFTH.invert();
      // Undeclared exception!
      try { 
        fraction1.pow((-1098));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1564, 6);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(782, fraction1.getNumerator());
      assertEquals(260L, fraction1.longValue());
      assertEquals(260L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-4609));
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(4609, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/9TVbSj,ezW]bgi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("The string must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("j;.Vgc_WzL#c~8u^0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2.1474836260609188E9));
      String string0 = fraction0.toProperString();
      assertEquals("-270271 6247/7945", string0);
      assertEquals((-270271.78F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertEquals(2.147483647E9, fraction2.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2772));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1627, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(4223, 4223, 2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2147483645), 1585, 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE, 31);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(75, 1, (-2276));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1865), (-3), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2397), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      fraction0.toProperString();
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals("2397", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      double double0 = fraction0.doubleValue();
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      long long0 = fraction0.longValue();
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(0L, long0);
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      float float0 = fraction0.floatValue();
      assertEquals((-2.5819778E-4F), float0, 0.01F);
      assertEquals(3873, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      int int0 = fraction0.getProperNumerator();
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(0, int0);
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      Fraction fraction1 = fraction0.ONE.divideBy(fraction0);
      fraction1.ONE_HALF.toProperString();
      String string0 = fraction1.toProperString();
      assertEquals("1", string0);
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = Fraction.ZERO;
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2.147483645E9));
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      int int0 = fraction0.intValue();
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(0, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:51:41 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-2603));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2603.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-2603), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2603L), fraction1.longValue());
      assertEquals((short) (-2603), fraction1.shortValue());
      assertEquals((-2603.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-43), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-2603), fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((-2603.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-2603), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2603L), fraction1.longValue());
      assertEquals((short) (-2603), fraction1.shortValue());
      assertEquals((-2603.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-43), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-2603), fraction1.getProperWhole());
      assertEquals((-2604.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-2604L), fraction2.longValue());
      assertEquals((short) (-2604), fraction2.shortValue());
      assertEquals((-2604.0), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-2604), fraction2.getProperWhole());
      assertEquals((-6778212), fraction2.getNumerator());
      assertEquals(2603, fraction2.getDenominator());
      assertEquals((byte) (-44), fraction2.byteValue());
      assertEquals((-2604), fraction2.intValue());
      assertNotNull(fraction2);
      
      fraction2.hashCode();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((-2603.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-2603), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2603L), fraction1.longValue());
      assertEquals((short) (-2603), fraction1.shortValue());
      assertEquals((-2603.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-43), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-2603), fraction1.getProperWhole());
      assertEquals((-2604.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-2604L), fraction2.longValue());
      assertEquals((short) (-2604), fraction2.shortValue());
      assertEquals((-2604.0), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-2604), fraction2.getProperWhole());
      assertEquals((-6778212), fraction2.getNumerator());
      assertEquals(2603, fraction2.getDenominator());
      assertEquals((byte) (-44), fraction2.byteValue());
      assertEquals((-2604), fraction2.intValue());
      
      fraction2.hashCode();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((-2603.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-2603), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2603L), fraction1.longValue());
      assertEquals((short) (-2603), fraction1.shortValue());
      assertEquals((-2603.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-43), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-2603), fraction1.getProperWhole());
      assertEquals((-2604.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-2604L), fraction2.longValue());
      assertEquals((short) (-2604), fraction2.shortValue());
      assertEquals((-2604.0), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-2604), fraction2.getProperWhole());
      assertEquals((-6778212), fraction2.getNumerator());
      assertEquals(2603, fraction2.getDenominator());
      assertEquals((byte) (-44), fraction2.byteValue());
      assertEquals((-2604), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction((-634460847), (-1089));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short) (-7216), fraction1.shortValue());
      assertEquals(582608L, fraction1.longValue());
      assertEquals(582608, fraction1.getProperWhole());
      assertEquals((byte) (-48), fraction1.byteValue());
      assertEquals(363, fraction1.getDenominator());
      assertEquals(582608.7F, fraction1.floatValue(), 0.01F);
      assertEquals(245, fraction1.getProperNumerator());
      assertEquals(211486949, fraction1.getNumerator());
      assertEquals(582608, fraction1.intValue());
      assertEquals(582608.6749311294, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((short) (-7216), fraction1.shortValue());
      assertEquals(582608L, fraction1.longValue());
      assertEquals(582608, fraction1.getProperWhole());
      assertEquals((byte) (-48), fraction1.byteValue());
      assertEquals(363, fraction1.getDenominator());
      assertEquals(582608.7F, fraction1.floatValue(), 0.01F);
      assertEquals(245, fraction1.getProperNumerator());
      assertEquals(211486949, fraction1.getNumerator());
      assertEquals(582608, fraction1.intValue());
      assertEquals(582608.6749311294, fraction1.doubleValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 1);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow((-2701));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getProperWhole());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction((-1), (-2147483647));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(4.656612875245797E-10, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4.656613E-10F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(Integer.MAX_VALUE, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(4.656612875245797E-10, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4.656613E-10F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(Integer.MAX_VALUE, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals(1.396983862573739E-9, fraction2.doubleValue(), 0.01);
      assertEquals(0L, fraction2.longValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(1.3969839E-9F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction2.getDenominator());
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("SZO.ERn-=)(b$v*Sy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2603, fraction2.getDenominator());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(2603, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals((byte)1, fraction2.byteValue());
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.FOUR_FIFTHS.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 1);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-262176), (-262176));
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(1496802);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ONE.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1, fraction2.intValue());
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-634460847), 2);
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((-3.172304235E8), fraction0.doubleValue(), 0.01);
      assertEquals((-3.17230432E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-317230423), fraction0.intValue());
      assertEquals((-634460847), fraction0.getNumerator());
      assertEquals((short)29353, fraction0.shortValue());
      assertEquals((-317230423L), fraction0.longValue());
      assertEquals((-317230423), fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((-3.172304235E8), fraction0.doubleValue(), 0.01);
      assertEquals((-3.17230432E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-317230423), fraction0.intValue());
      assertEquals((-634460847), fraction0.getNumerator());
      assertEquals((short)29353, fraction0.shortValue());
      assertEquals((-317230423L), fraction0.longValue());
      assertEquals((-317230423), fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(317230423, fraction1.intValue());
      assertEquals(317230423, fraction1.getProperWhole());
      assertEquals(634460847, fraction1.getNumerator());
      assertEquals(3.17230432E8F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(317230423L, fraction1.longValue());
      assertEquals((short) (-29353), fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals((byte)87, fraction1.byteValue());
      assertEquals(3.172304235E8, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(471.53);
      assertEquals(53, fraction0.getProperNumerator());
      assertEquals(100, fraction0.getDenominator());
      assertEquals(471, fraction0.intValue());
      assertEquals(471.53F, fraction0.floatValue(), 0.01F);
      assertEquals(471.53, fraction0.doubleValue(), 0.01);
      assertEquals(471, fraction0.getProperWhole());
      assertEquals((byte) (-41), fraction0.byteValue());
      assertEquals((short)471, fraction0.shortValue());
      assertEquals(471L, fraction0.longValue());
      assertEquals(47153, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(53, fraction0.getProperNumerator());
      assertEquals(100, fraction0.getDenominator());
      assertEquals(471, fraction0.intValue());
      assertEquals(471.53F, fraction0.floatValue(), 0.01F);
      assertEquals(471.53, fraction0.doubleValue(), 0.01);
      assertEquals(471, fraction0.getProperWhole());
      assertEquals((byte) (-41), fraction0.byteValue());
      assertEquals((short)471, fraction0.shortValue());
      assertEquals(471L, fraction0.longValue());
      assertEquals(47153, fraction0.getNumerator());
      assertEquals((-471), fraction1.getProperWhole());
      assertEquals((-47153), fraction1.getNumerator());
      assertEquals((-471.53F), fraction1.floatValue(), 0.01F);
      assertEquals(100, fraction1.getDenominator());
      assertEquals((short) (-471), fraction1.shortValue());
      assertEquals((byte)41, fraction1.byteValue());
      assertEquals((-471.53), fraction1.doubleValue(), 0.01);
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals((-471), fraction1.intValue());
      assertEquals((-471L), fraction1.longValue());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2335, 47);
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49L, fraction0.longValue());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49, fraction0.intValue());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(2335, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49L, fraction0.longValue());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49, fraction0.intValue());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49L, fraction0.longValue());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49, fraction0.intValue());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-29), fraction2.intValue());
      assertEquals((-29), fraction2.getProperWhole());
      assertEquals(47, fraction2.getDenominator());
      assertEquals((-29L), fraction2.longValue());
      assertEquals((-29.80851063829787), fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-29), fraction2.byteValue());
      assertEquals((short) (-29), fraction2.shortValue());
      assertEquals((-1401), fraction2.getNumerator());
      assertEquals(38, fraction2.getProperNumerator());
      assertEquals((-29.80851F), fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 993);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-2162622), fraction1.intValue());
      assertEquals((-2162622.0F), fraction1.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-2162622L), fraction1.longValue());
      assertEquals((-2162622.0020140987), fraction1.doubleValue(), 0.01);
      assertEquals((byte)66, fraction1.byteValue());
      assertEquals((-2162622), fraction1.getProperWhole());
      assertEquals(993, fraction1.getDenominator());
      assertEquals((short)66, fraction1.shortValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-2162622), fraction1.intValue());
      assertEquals((-2162622.0F), fraction1.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-2162622L), fraction1.longValue());
      assertEquals((-2162622.0020140987), fraction1.doubleValue(), 0.01);
      assertEquals((byte)66, fraction1.byteValue());
      assertEquals((-2162622), fraction1.getProperWhole());
      assertEquals(993, fraction1.getDenominator());
      assertEquals((short)66, fraction1.shortValue());
      assertEquals((-432524.4F), fraction2.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction2.getNumerator());
      assertEquals((-432524.40040281974), fraction2.doubleValue(), 0.01);
      assertEquals((-432524), fraction2.intValue());
      assertEquals((-432524L), fraction2.longValue());
      assertEquals(1988, fraction2.getProperNumerator());
      assertEquals((byte)116, fraction2.byteValue());
      assertEquals((short)26228, fraction2.shortValue());
      assertEquals(4965, fraction2.getDenominator());
      assertEquals((-432524), fraction2.getProperWhole());
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2335, 47);
      assertEquals(49, fraction0.intValue());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(49, fraction0.intValue());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49L, fraction0.longValue());
      assertEquals(2468, fraction1.getProperWhole());
      assertEquals((byte) (-92), fraction1.byteValue());
      assertEquals(2468L, fraction1.longValue());
      assertEquals(5452225, fraction1.getNumerator());
      assertEquals(2468, fraction1.intValue());
      assertEquals(2468.187F, fraction1.floatValue(), 0.01F);
      assertEquals(2468.1869624264373, fraction1.doubleValue(), 0.01);
      assertEquals(413, fraction1.getProperNumerator());
      assertEquals((short)2468, fraction1.shortValue());
      assertEquals(2209, fraction1.getDenominator());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(985, 985, 985);
      assertEquals(986.0F, fraction0.floatValue(), 0.01F);
      assertEquals(985, fraction0.getDenominator());
      assertEquals(986, fraction0.getProperWhole());
      assertEquals(986L, fraction0.longValue());
      assertEquals((short)986, fraction0.shortValue());
      assertEquals(971210, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-38), fraction0.byteValue());
      assertEquals(986, fraction0.intValue());
      assertEquals(986.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(986.0F, fraction0.floatValue(), 0.01F);
      assertEquals(985, fraction0.getDenominator());
      assertEquals(986, fraction0.getProperWhole());
      assertEquals(986L, fraction0.longValue());
      assertEquals((short)986, fraction0.shortValue());
      assertEquals(971210, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-38), fraction0.byteValue());
      assertEquals(986, fraction0.intValue());
      assertEquals(986.0, fraction0.doubleValue(), 0.01);
      assertEquals(986L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)2, fraction2.shortValue());
      assertEquals(2L, fraction2.longValue());
      assertEquals(2, fraction2.getDenominator());
      assertEquals(5, fraction2.getNumerator());
      assertEquals(2, fraction2.getProperWhole());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(2.5, fraction2.doubleValue(), 0.01);
      assertEquals(2, fraction2.intValue());
      assertEquals((byte)2, fraction2.byteValue());
      assertEquals(2.5F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
      
      Fraction fraction3 = fraction2.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)2, fraction2.shortValue());
      assertEquals(2L, fraction2.longValue());
      assertEquals(2, fraction2.getDenominator());
      assertEquals(5, fraction2.getNumerator());
      assertEquals(2, fraction2.getProperWhole());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(2.5, fraction2.doubleValue(), 0.01);
      assertEquals(2, fraction2.intValue());
      assertEquals((byte)2, fraction2.byteValue());
      assertEquals(2.5F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction3.getNumerator());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(2.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(2L, fraction3.longValue());
      assertEquals(2.0, fraction3.doubleValue(), 0.01);
      assertEquals(2, fraction3.getProperWhole());
      assertEquals((short)2, fraction3.shortValue());
      assertEquals((byte)2, fraction3.byteValue());
      assertEquals(2, fraction3.intValue());
      assertNotNull(fraction3);
      
      Fraction fraction4 = fraction3.invert();
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction4);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction3);
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction3));
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)2, fraction2.shortValue());
      assertEquals(2L, fraction2.longValue());
      assertEquals(2, fraction2.getDenominator());
      assertEquals(5, fraction2.getNumerator());
      assertEquals(2, fraction2.getProperWhole());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(2.5, fraction2.doubleValue(), 0.01);
      assertEquals(2, fraction2.intValue());
      assertEquals((byte)2, fraction2.byteValue());
      assertEquals(2.5F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction3.getNumerator());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(2.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(2L, fraction3.longValue());
      assertEquals(2.0, fraction3.doubleValue(), 0.01);
      assertEquals(2, fraction3.getProperWhole());
      assertEquals((short)2, fraction3.shortValue());
      assertEquals((byte)2, fraction3.byteValue());
      assertEquals(2, fraction3.intValue());
      assertEquals((short)0, fraction4.shortValue());
      assertEquals((byte)0, fraction4.byteValue());
      assertEquals(0, fraction4.intValue());
      assertEquals(0.5, fraction4.doubleValue(), 0.01);
      assertEquals(1, fraction4.getNumerator());
      assertEquals(0.5F, fraction4.floatValue(), 0.01F);
      assertEquals(0L, fraction4.longValue());
      assertEquals(1, fraction4.getProperNumerator());
      assertEquals(0, fraction4.getProperWhole());
      assertEquals(2, fraction4.getDenominator());
      assertNotNull(fraction4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1101.9);
      assertEquals((short)1101, fraction0.shortValue());
      assertEquals(1101.9, fraction0.doubleValue(), 0.01);
      assertEquals(9, fraction0.getProperNumerator());
      assertEquals(1101, fraction0.getProperWhole());
      assertEquals(1101L, fraction0.longValue());
      assertEquals(11019, fraction0.getNumerator());
      assertEquals(1101, fraction0.intValue());
      assertEquals((byte)77, fraction0.byteValue());
      assertEquals(1101.9F, fraction0.floatValue(), 0.01F);
      assertEquals(10, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals((short)1101, fraction0.shortValue());
      assertEquals(1101.9, fraction0.doubleValue(), 0.01);
      assertEquals(9, fraction0.getProperNumerator());
      assertEquals(1101, fraction0.getProperWhole());
      assertEquals(1101L, fraction0.longValue());
      assertEquals(11019, fraction0.getNumerator());
      assertEquals(1101, fraction0.intValue());
      assertEquals((byte)77, fraction0.byteValue());
      assertEquals(1101.9F, fraction0.floatValue(), 0.01F);
      assertEquals(10, fraction0.getDenominator());
      assertEquals(1101, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ONE.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      
      int int0 = fraction1.getProperWhole();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      
      int int0 = fraction1.getNumerator();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-2");
      assertEquals((-2L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2), fraction0.getNumerator());
      assertEquals((-2), fraction0.getProperWhole());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1/5189");
      assertEquals(0, fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1.9271536E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-1.927153594141453E-4), fraction0.doubleValue(), 0.01);
      assertEquals(5189, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("2397");
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 2459, 1);
      assertEquals((-2460), fraction0.getProperWhole());
      assertEquals((-2460), fraction0.getNumerator());
      assertEquals((-2460), fraction0.intValue());
      assertEquals((-2460.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2460.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte)100, fraction0.byteValue());
      assertEquals((short) (-2460), fraction0.shortValue());
      assertEquals((-2460L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ONE_HALF.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.intValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.intValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals((-2), fraction2.intValue());
      assertEquals((-2), fraction2.getNumerator());
      assertEquals((short) (-2), fraction2.shortValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-2.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-2L), fraction2.longValue());
      assertEquals((-2.0), fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-2), fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-2), fraction2.getProperWhole());
      assertNotNull(fraction2);
      
      long long0 = fraction2.longValue();
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.intValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals((-2), fraction2.intValue());
      assertEquals((-2), fraction2.getNumerator());
      assertEquals((short) (-2), fraction2.shortValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-2.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-2L), fraction2.longValue());
      assertEquals((-2.0), fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-2), fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-2), fraction2.getProperWhole());
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-522), (-522));
      assertEquals(522, fraction0.getDenominator());
      assertEquals(522, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.FOUR_FIFTHS.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(522, fraction0.getDenominator());
      assertEquals(522, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.8), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.8F), fraction1.floatValue(), 0.01F);
      assertEquals((-4), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertNotNull(fraction1);
      
      float float0 = fraction1.floatValue();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(522, fraction0.getDenominator());
      assertEquals(522, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.8), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.8F), fraction1.floatValue(), 0.01F);
      assertEquals((-4), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-0.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(471.53);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(100, fraction1.getDenominator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471L, fraction1.longValue());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertEquals(471, fraction1.intValue());
      assertEquals(53, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(100, fraction1.getDenominator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471L, fraction1.longValue());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertEquals(471, fraction1.intValue());
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals(13, fraction2.getProperNumerator());
      assertEquals((-471.13), fraction2.doubleValue(), 0.01);
      assertEquals((-471), fraction2.getProperWhole());
      assertEquals((-471.13F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-471), fraction2.shortValue());
      assertEquals((-47113), fraction2.getNumerator());
      assertEquals(100, fraction2.getDenominator());
      assertEquals((-471), fraction2.intValue());
      assertEquals((byte)41, fraction2.byteValue());
      assertEquals((-471L), fraction2.longValue());
      assertNotNull(fraction2);
      
      double double0 = fraction2.doubleValue();
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(100, fraction1.getDenominator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471L, fraction1.longValue());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertEquals(471, fraction1.intValue());
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals(13, fraction2.getProperNumerator());
      assertEquals((-471.13), fraction2.doubleValue(), 0.01);
      assertEquals((-471), fraction2.getProperWhole());
      assertEquals((-471.13F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-471), fraction2.shortValue());
      assertEquals((-47113), fraction2.getNumerator());
      assertEquals(100, fraction2.getDenominator());
      assertEquals((-471), fraction2.intValue());
      assertEquals((byte)41, fraction2.byteValue());
      assertEquals((-471L), fraction2.longValue());
      assertEquals((-471.13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-1), fraction2.intValue());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-634460847), 2);
      assertEquals((short)29353, fraction0.shortValue());
      assertEquals((-317230423L), fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-634460847), fraction0.getNumerator());
      assertEquals((-317230423), fraction0.intValue());
      assertEquals((-3.172304235E8), fraction0.doubleValue(), 0.01);
      assertEquals((-3.17230432E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-317230423), fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)29353, fraction0.shortValue());
      assertEquals((-317230423L), fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-634460847), fraction0.getNumerator());
      assertEquals((-317230423), fraction0.intValue());
      assertEquals((-3.172304235E8), fraction0.doubleValue(), 0.01);
      assertEquals((-3.17230432E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-317230423), fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((-6.3446086E8F), fraction1.floatValue(), 0.01F);
      assertEquals((-6.34460847E8), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-634460847), fraction1.getProperWhole());
      assertEquals((byte)81, fraction1.byteValue());
      assertEquals((-634460847), fraction1.getNumerator());
      assertEquals((-634460847), fraction1.intValue());
      assertEquals((-634460847L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short) (-6831), fraction1.shortValue());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2158.65936);
      assertEquals(2158.6594F, fraction0.floatValue(), 0.01F);
      assertEquals((short)2158, fraction0.shortValue());
      assertEquals(13491621, fraction0.getNumerator());
      assertEquals(2158.65936, fraction0.doubleValue(), 0.01);
      assertEquals(4121, fraction0.getProperNumerator());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals(2158, fraction0.intValue());
      assertEquals(2158, fraction0.getProperWhole());
      assertEquals((byte)110, fraction0.byteValue());
      assertEquals(2158L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2158.6594F, fraction0.floatValue(), 0.01F);
      assertEquals((short)2158, fraction0.shortValue());
      assertEquals(13491621, fraction0.getNumerator());
      assertEquals(2158.65936, fraction0.doubleValue(), 0.01);
      assertEquals(4121, fraction0.getProperNumerator());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals(2158, fraction0.intValue());
      assertEquals(2158, fraction0.getProperWhole());
      assertEquals((byte)110, fraction0.byteValue());
      assertEquals(2158L, fraction0.longValue());
      assertEquals(4317L, fraction1.longValue());
      assertEquals(13491621, fraction1.getNumerator());
      assertEquals(4317, fraction1.getProperWhole());
      assertEquals(996, fraction1.getProperNumerator());
      assertEquals((short)4317, fraction1.shortValue());
      assertEquals(4317.31872, fraction1.doubleValue(), 0.01);
      assertEquals(3125, fraction1.getDenominator());
      assertEquals((byte) (-35), fraction1.byteValue());
      assertEquals(4317.319F, fraction1.floatValue(), 0.01F);
      assertEquals(4317, fraction1.intValue());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-634460847), 2);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-317230423L), fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((short)29353, fraction0.shortValue());
      assertEquals((-317230423), fraction0.intValue());
      assertEquals((-634460847), fraction0.getNumerator());
      assertEquals((-3.172304235E8), fraction0.doubleValue(), 0.01);
      assertEquals((-3.17230432E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-317230423), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-317230423L), fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((short)29353, fraction0.shortValue());
      assertEquals((-317230423), fraction0.intValue());
      assertEquals((-634460847), fraction0.getNumerator());
      assertEquals((-3.172304235E8), fraction0.doubleValue(), 0.01);
      assertEquals((-3.17230432E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-317230423), fraction0.getProperWhole());
      assertEquals((byte)87, fraction1.byteValue());
      assertEquals(317230423, fraction1.intValue());
      assertEquals(3.17230432E8F, fraction1.floatValue(), 0.01F);
      assertEquals(3.172304235E8, fraction1.doubleValue(), 0.01);
      assertEquals(634460847, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals((short) (-29353), fraction1.shortValue());
      assertEquals(317230423, fraction1.getProperWhole());
      assertEquals(317230423L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-317230423L), fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((short)29353, fraction0.shortValue());
      assertEquals((-317230423), fraction0.intValue());
      assertEquals((-634460847), fraction0.getNumerator());
      assertEquals((-3.172304235E8), fraction0.doubleValue(), 0.01);
      assertEquals((-3.17230432E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-317230423), fraction0.getProperWhole());
      assertEquals((byte)87, fraction1.byteValue());
      assertEquals(317230423, fraction1.intValue());
      assertEquals(3.17230432E8F, fraction1.floatValue(), 0.01F);
      assertEquals(3.172304235E8, fraction1.doubleValue(), 0.01);
      assertEquals(634460847, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals((short) (-29353), fraction1.shortValue());
      assertEquals(317230423, fraction1.getProperWhole());
      assertEquals(317230423L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-275), 128);
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2.1484375), fraction0.doubleValue(), 0.01);
      assertEquals((-2), fraction0.intValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-275), fraction0.getNumerator());
      assertEquals((-2.1484375F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals(128, fraction0.getDenominator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals(19, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2.1484375), fraction0.doubleValue(), 0.01);
      assertEquals((-2), fraction0.intValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-275), fraction0.getNumerator());
      assertEquals((-2.1484375F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals(128, fraction0.getDenominator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals(19, fraction0.getProperNumerator());
      assertEquals(128, fraction1.getDenominator());
      assertEquals(2, fraction1.intValue());
      assertEquals(275, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2L, fraction1.longValue());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.1484375F, fraction1.floatValue(), 0.01F);
      assertEquals(19, fraction1.getProperNumerator());
      assertEquals(2.1484375, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction((-2147483646), (-2147483646));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.ZERO.add(fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.33333334F, fraction2.floatValue(), 0.01F);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertNotNull(fraction2);
      
      boolean boolean0 = fraction2.equals(fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.33333334F, fraction2.floatValue(), 0.01F);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((-1), (-2147483645));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(4.656613E-10F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(2147483645, fraction1.getDenominator());
      assertEquals(4.656612879582606E-10, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 3);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397L, fraction0.longValue());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397L, fraction0.longValue());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(14.0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(14.0F, fraction0.floatValue(), 0.01F);
      assertEquals(14, fraction0.getNumerator());
      assertEquals((byte)14, fraction0.byteValue());
      assertEquals(14L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(14.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)14, fraction0.shortValue());
      assertEquals(14, fraction0.intValue());
      assertEquals(14, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(14.0F, fraction0.floatValue(), 0.01F);
      assertEquals(14, fraction0.getNumerator());
      assertEquals((byte)14, fraction0.byteValue());
      assertEquals(14L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(14.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)14, fraction0.shortValue());
      assertEquals(14, fraction0.intValue());
      assertEquals(14, fraction0.getProperWhole());
      assertEquals("14", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals("1/3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(471.53);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(471, fraction1.intValue());
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals(100, fraction1.getDenominator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals(471L, fraction1.longValue());
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(471, fraction1.intValue());
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals(100, fraction1.getDenominator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals(471L, fraction1.longValue());
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertEquals((-471L), fraction2.longValue());
      assertEquals((-471.13), fraction2.doubleValue(), 0.01);
      assertEquals(100, fraction2.getDenominator());
      assertEquals((-471), fraction2.getProperWhole());
      assertEquals((short) (-471), fraction2.shortValue());
      assertEquals((-471.13F), fraction2.floatValue(), 0.01F);
      assertEquals((-47113), fraction2.getNumerator());
      assertEquals((byte)41, fraction2.byteValue());
      assertEquals(13, fraction2.getProperNumerator());
      assertEquals((-471), fraction2.intValue());
      assertNotNull(fraction2);
      
      String string0 = fraction2.toProperString();
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(471, fraction1.intValue());
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals(100, fraction1.getDenominator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals(471L, fraction1.longValue());
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertEquals((-471L), fraction2.longValue());
      assertEquals((-471.13), fraction2.doubleValue(), 0.01);
      assertEquals(100, fraction2.getDenominator());
      assertEquals((-471), fraction2.getProperWhole());
      assertEquals((short) (-471), fraction2.shortValue());
      assertEquals((-471.13F), fraction2.floatValue(), 0.01F);
      assertEquals((-47113), fraction2.getNumerator());
      assertEquals((byte)41, fraction2.byteValue());
      assertEquals(13, fraction2.getProperNumerator());
      assertEquals((-471), fraction2.intValue());
      assertEquals("-471 13/100", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 1);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals("-1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      Fraction fraction2 = Fraction.FOUR_FIFTHS;
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0.8, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(4, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(4, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.8F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperWhole());
      assertNotNull(fraction2);
      
      Fraction fraction3 = Fraction.getReducedFraction(780, (-2147483307));
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertEquals((-260), fraction3.getNumerator());
      assertEquals((-3.6321586E-7F), fraction3.floatValue(), 0.01F);
      assertEquals((-3.6321586177526455E-7), fraction3.doubleValue(), 0.01);
      assertEquals((short)0, fraction3.shortValue());
      assertEquals(715827769, fraction3.getDenominator());
      assertEquals(0L, fraction3.longValue());
      assertEquals(260, fraction3.getProperNumerator());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals((byte)0, fraction3.byteValue());
      assertEquals(0, fraction3.intValue());
      assertNotNull(fraction3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fraction0.equals(object0);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertFalse(boolean0);
      
      Fraction fraction4 = Fraction.ONE_QUARTER;
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction3);
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction3));
      assertEquals(0.25, fraction4.doubleValue(), 0.01);
      assertEquals(4, fraction4.getDenominator());
      assertEquals((byte)0, fraction4.byteValue());
      assertEquals(0L, fraction4.longValue());
      assertEquals(0.25F, fraction4.floatValue(), 0.01F);
      assertEquals((short)0, fraction4.shortValue());
      assertEquals(0, fraction4.intValue());
      assertEquals(1, fraction4.getNumerator());
      assertEquals(1, fraction4.getProperNumerator());
      assertEquals(0, fraction4.getProperWhole());
      assertNotNull(fraction4);
      
      String string0 = fraction4.toProperString();
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction3);
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction3));
      assertEquals(0.25, fraction4.doubleValue(), 0.01);
      assertEquals(4, fraction4.getDenominator());
      assertEquals((byte)0, fraction4.byteValue());
      assertEquals(0L, fraction4.longValue());
      assertEquals(0.25F, fraction4.floatValue(), 0.01F);
      assertEquals((short)0, fraction4.shortValue());
      assertEquals(0, fraction4.intValue());
      assertEquals(1, fraction4.getNumerator());
      assertEquals(1, fraction4.getProperNumerator());
      assertEquals(0, fraction4.getProperWhole());
      assertEquals("1/4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertNotNull(fraction2);
      
      String string0 = fraction2.TWO_FIFTHS.toString();
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals("2/5", string0);
      assertNotNull(string0);
      
      int int0 = fraction2.getProperWhole();
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, int0);
      
      Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, 25);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertEquals(Integer.MIN_VALUE, fraction3.getNumerator());
      assertEquals((-8.5899344E7F), fraction3.floatValue(), 0.01F);
      assertEquals(25, fraction3.getDenominator());
      assertEquals((-85899345), fraction3.getProperWhole());
      assertEquals((byte) (-81), fraction3.byteValue());
      assertEquals((-85899345), fraction3.intValue());
      assertEquals(23, fraction3.getProperNumerator());
      assertEquals((-85899345L), fraction3.longValue());
      assertEquals((-8.589934592E7), fraction3.doubleValue(), 0.01);
      assertEquals((short)18351, fraction3.shortValue());
      assertNotNull(fraction3);
      
      Fraction fraction4 = Fraction.getFraction(993.0);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction4, fraction1);
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction4.equals((Object)fraction1));
      assertEquals((short)993, fraction4.shortValue());
      assertEquals(1, fraction4.getDenominator());
      assertEquals(993L, fraction4.longValue());
      assertEquals(993, fraction4.getProperWhole());
      assertEquals((byte) (-31), fraction4.byteValue());
      assertEquals(993, fraction4.intValue());
      assertEquals(993.0F, fraction4.floatValue(), 0.01F);
      assertEquals(0, fraction4.getProperNumerator());
      assertEquals(993.0, fraction4.doubleValue(), 0.01);
      assertEquals(993, fraction4.getNumerator());
      assertNotNull(fraction4);
      
      Fraction fraction5 = Fraction.TWO_QUARTERS;
      assertNotSame(fraction5, fraction1);
      assertNotSame(fraction5, fraction4);
      assertNotSame(fraction5, fraction2);
      assertNotSame(fraction5, fraction0);
      assertNotSame(fraction5, fraction3);
      assertFalse(fraction5.equals((Object)fraction1));
      assertFalse(fraction5.equals((Object)fraction4));
      assertFalse(fraction5.equals((Object)fraction2));
      assertFalse(fraction5.equals((Object)fraction0));
      assertFalse(fraction5.equals((Object)fraction3));
      assertEquals(0.5, fraction5.doubleValue(), 0.01);
      assertEquals(4, fraction5.getDenominator());
      assertEquals(0.5F, fraction5.floatValue(), 0.01F);
      assertEquals(2, fraction5.getNumerator());
      assertEquals(0L, fraction5.longValue());
      assertEquals((byte)0, fraction5.byteValue());
      assertEquals(2, fraction5.getProperNumerator());
      assertEquals(0, fraction5.intValue());
      assertEquals(0, fraction5.getProperWhole());
      assertEquals((short)0, fraction5.shortValue());
      assertNotNull(fraction5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      
      String string0 = fraction0.toString();
      assertSame(fraction0, fraction1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals("1/4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 4200);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4.761904761904762E-4, fraction0.doubleValue(), 0.01);
      assertEquals(4.7619047E-4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4200, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4.761904761904762E-4, fraction0.doubleValue(), 0.01);
      assertEquals(4.7619047E-4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4200, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4.761904761904762E-4, fraction1.doubleValue(), 0.01);
      assertEquals(4.7619047E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(2100, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction1);
      
      int int0 = fraction0.compareTo(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4.761904761904762E-4, fraction0.doubleValue(), 0.01);
      assertEquals(4.7619047E-4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4200, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(4.761904761904762E-4, fraction1.doubleValue(), 0.01);
      assertEquals(4.7619047E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(2100, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) 1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertNotNull(fraction1);
      
      int int0 = fraction0.compareTo(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      int int0 = fraction0.compareTo(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      fraction0.hashCode();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      
      fraction0.hashCode();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2158.65936);
      assertEquals(2158, fraction0.intValue());
      assertEquals((byte)110, fraction0.byteValue());
      assertEquals(2158L, fraction0.longValue());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals((short)2158, fraction0.shortValue());
      assertEquals(13491621, fraction0.getNumerator());
      assertEquals(4121, fraction0.getProperNumerator());
      assertEquals(2158.6594F, fraction0.floatValue(), 0.01F);
      assertEquals(2158.65936, fraction0.doubleValue(), 0.01);
      assertEquals(2158, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(2158.65936);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(4121, fraction1.getProperNumerator());
      assertEquals(2158, fraction1.intValue());
      assertEquals(2158.65936, fraction1.doubleValue(), 0.01);
      assertEquals(6250, fraction1.getDenominator());
      assertEquals((short)2158, fraction1.shortValue());
      assertEquals(2158.6594F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)110, fraction1.byteValue());
      assertEquals(13491621, fraction1.getNumerator());
      assertEquals(2158L, fraction1.longValue());
      assertEquals(2158, fraction1.getProperWhole());
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(2158, fraction0.intValue());
      assertEquals((byte)110, fraction0.byteValue());
      assertEquals(2158L, fraction0.longValue());
      assertEquals(6250, fraction0.getDenominator());
      assertEquals((short)2158, fraction0.shortValue());
      assertEquals(13491621, fraction0.getNumerator());
      assertEquals(4121, fraction0.getProperNumerator());
      assertEquals(2158.6594F, fraction0.floatValue(), 0.01F);
      assertEquals(2158.65936, fraction0.doubleValue(), 0.01);
      assertEquals(2158, fraction0.getProperWhole());
      assertEquals(4121, fraction1.getProperNumerator());
      assertEquals(2158, fraction1.intValue());
      assertEquals(2158.65936, fraction1.doubleValue(), 0.01);
      assertEquals(6250, fraction1.getDenominator());
      assertEquals((short)2158, fraction1.shortValue());
      assertEquals(2158.6594F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)110, fraction1.byteValue());
      assertEquals(13491621, fraction1.getNumerator());
      assertEquals(2158L, fraction1.longValue());
      assertEquals(2158, fraction1.getProperWhole());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(471.53);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals(471L, fraction1.longValue());
      assertEquals(471, fraction1.intValue());
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals(100, fraction1.getDenominator());
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)471, fraction1.shortValue());
      assertEquals(471.53, fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals(471L, fraction1.longValue());
      assertEquals(471, fraction1.intValue());
      assertEquals(47153, fraction1.getNumerator());
      assertEquals(471, fraction1.getProperWhole());
      assertEquals(53, fraction1.getProperNumerator());
      assertEquals(471.53F, fraction1.floatValue(), 0.01F);
      assertEquals(100, fraction1.getDenominator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertNotNull(fraction2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483646), 16);
      assertEquals(8, fraction0.getDenominator());
      assertEquals(7, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((-134217727), fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((-1.34217727875E8), fraction0.doubleValue(), 0.01);
      assertEquals((-1.34217728E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-134217727), fraction0.getProperWhole());
      assertEquals((-1073741823), fraction0.getNumerator());
      assertEquals((-134217727L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((-3550.3713301844728));
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short) (-3550), fraction1.shortValue());
      assertEquals((-3550.3713301920984), fraction1.doubleValue(), 0.01);
      assertEquals((-3550.371F), fraction1.floatValue(), 0.01F);
      assertEquals((-3550), fraction1.intValue());
      assertEquals(5518, fraction1.getDenominator());
      assertEquals((byte)34, fraction1.byteValue());
      assertEquals(2049, fraction1.getProperNumerator());
      assertEquals((-3550), fraction1.getProperWhole());
      assertEquals((-19590949), fraction1.getNumerator());
      assertEquals((-3550L), fraction1.longValue());
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 25);
      assertEquals((-85899345L), fraction0.longValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-85899345), fraction0.getProperWhole());
      assertEquals(23, fraction0.getProperNumerator());
      assertEquals((-85899345), fraction0.intValue());
      assertEquals((short)18351, fraction0.shortValue());
      assertEquals((-8.5899344E7F), fraction0.floatValue(), 0.01F);
      assertEquals((-8.589934592E7), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-81), fraction0.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(993.0);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte) (-31), fraction1.byteValue());
      assertEquals(993L, fraction1.longValue());
      assertEquals(993.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)993, fraction1.shortValue());
      assertEquals(993.0F, fraction1.floatValue(), 0.01F);
      assertEquals(993, fraction1.getNumerator());
      assertEquals(993, fraction1.getProperWhole());
      assertEquals(993, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1, 1);
      assertEquals((byte)2, fraction0.byteValue());
      assertEquals(2, fraction0.getProperWhole());
      assertEquals(2, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MAX_VALUE, 1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction1.getNumerator());
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2147483647L, fraction1.longValue());
      assertEquals(Integer.MAX_VALUE, fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(2.147483647E9, fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.reduce();
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction1.getNumerator());
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2147483647L, fraction1.longValue());
      assertEquals(Integer.MAX_VALUE, fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(2.147483647E9, fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals(Integer.MAX_VALUE, fraction2.intValue());
      assertEquals(2.14748365E9F, fraction2.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals(2.147483647E9, fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(2147483647L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction2.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction2.getProperWhole());
      assertNotNull(fraction2);
      
      // Undeclared exception!
      try { 
        fraction2.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.pow(2141186038);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.pow(11);
      assertEquals(4.194304E-5F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.pow(1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.pow(0);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 4285, 3);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1429.3334F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 993);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction1.subtract(fraction0);
      Fraction fraction3 = fraction0.multiplyBy(fraction2);
      Fraction fraction4 = fraction3.invert();
      assertEquals((-0.0125F), fraction3.floatValue(), 0.01F);
      assertEquals(1, fraction4.getDenominator());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 25);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 466);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(466, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.reduce();
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" Oc0r#:j/)6z/s$S_k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" Oc0r#:j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".Re&|2{Vf$2n:UY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1429 1/3");
      assertEquals(1429.3333333333333, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1288));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 993);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483643, 2147483643, 25);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-779), 2147483643, 25);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(5, (-1), 5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(28, 28, (-19));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(991, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      double double0 = fraction0.doubleValue();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1, 1);
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(4.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 1);
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
      assertEquals(1, fraction0.getDenominator());
  }
}

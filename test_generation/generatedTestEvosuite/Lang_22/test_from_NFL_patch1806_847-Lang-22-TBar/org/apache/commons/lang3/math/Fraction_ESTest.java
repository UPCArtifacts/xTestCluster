/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:56:12 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertFalse(boolean0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), 1, 1);
      assertNotNull(fraction0);
      assertEquals((-2.147483647E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals((-2147483647L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483647), fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((-2147483647), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getFraction(1, 1);
      assertNotNull(fraction1);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotNull(fraction2);
      assertEquals((-2.147483647E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals((-2147483647L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483647), fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((-2147483647), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction2.intValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((-2.14748365E9F), fraction2.floatValue(), 0.01F);
      assertEquals((-2147483648L), fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction2.getNumerator());
      assertEquals((-2.147483648E9), fraction2.doubleValue(), 0.01);
      assertEquals(Integer.MIN_VALUE, fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/KyHn[N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" {{cO;,a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" {{cO;,a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("KCR)g~)VYp*C1&`:5h.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertNotNull(fraction0);
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1, 2147483646);
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(2147483646, fraction0.getDenominator());
      assertEquals(1.0000000004656613, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.ONE_HALF.invert();
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotNull(fraction2);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2, fraction2.intValue());
      assertEquals((short)2, fraction2.shortValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(2.0, fraction2.doubleValue(), 0.01);
      assertEquals(2.0F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)2, fraction2.byteValue());
      assertEquals(2L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(2, fraction2.getProperWhole());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.getReducedFraction((-1858), (-64));
      assertNotNull(fraction1);
      assertEquals((short)29, fraction1.shortValue());
      assertEquals(32, fraction1.getDenominator());
      assertEquals(29.03125F, fraction1.floatValue(), 0.01F);
      assertEquals(29, fraction1.getProperWhole());
      assertEquals(29.03125, fraction1.doubleValue(), 0.01);
      assertEquals(929, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(29L, fraction1.longValue());
      assertEquals(29, fraction1.intValue());
      assertEquals((byte)29, fraction1.byteValue());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)29, fraction1.shortValue());
      assertEquals(32, fraction1.getDenominator());
      assertEquals(29.03125F, fraction1.floatValue(), 0.01F);
      assertEquals(29, fraction1.getProperWhole());
      assertEquals(29.03125, fraction1.doubleValue(), 0.01);
      assertEquals(929, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(29L, fraction1.longValue());
      assertEquals(29, fraction1.intValue());
      assertEquals((byte)29, fraction1.byteValue());
      assertEquals(133, fraction2.getProperNumerator());
      assertEquals((-28.83125F), fraction2.floatValue(), 0.01F);
      assertEquals((-28), fraction2.getProperWhole());
      assertEquals((-28), fraction2.intValue());
      assertEquals((-28.83125), fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-28), fraction2.byteValue());
      assertEquals((short) (-28), fraction2.shortValue());
      assertEquals(160, fraction2.getDenominator());
      assertEquals((-28L), fraction2.longValue());
      assertEquals((-4613), fraction2.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), 1273);
      assertNotNull(fraction0);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(115, fraction0.getProperNumerator());
      assertEquals((-1686947L), fraction0.longValue());
      assertEquals((-1686947.1F), fraction0.floatValue(), 0.01F);
      assertEquals((short)16989, fraction0.shortValue());
      assertEquals((-1686947), fraction0.intValue());
      assertEquals(1273, fraction0.getDenominator());
      assertEquals((-1686947.0903377847), fraction0.doubleValue(), 0.01);
      assertEquals((-1686947), fraction0.getProperWhole());
      assertEquals((-2147483646), fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(115, fraction0.getProperNumerator());
      assertEquals((-1686947L), fraction0.longValue());
      assertEquals((-1686947.1F), fraction0.floatValue(), 0.01F);
      assertEquals((short)16989, fraction0.shortValue());
      assertEquals((-1686947), fraction0.intValue());
      assertEquals(1273, fraction0.getDenominator());
      assertEquals((-1686947.0903377847), fraction0.doubleValue(), 0.01);
      assertEquals((-1686947), fraction0.getProperWhole());
      assertEquals((-2147483646), fraction0.getNumerator());
      assertEquals((-2147483646), fraction1.getNumerator());
      assertEquals(115, fraction1.getProperNumerator());
      assertEquals((-1686947.1F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)93, fraction1.byteValue());
      assertEquals((-1686947), fraction1.intValue());
      assertEquals((short)16989, fraction1.shortValue());
      assertEquals(1273, fraction1.getDenominator());
      assertEquals((-1686947.0903377847), fraction1.doubleValue(), 0.01);
      assertEquals((-1686947L), fraction1.longValue());
      assertEquals((-1686947), fraction1.getProperWhole());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1613), Integer.MAX_VALUE);
      assertNotNull(fraction0);
      assertEquals(1613, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-7.51111656777147E-7), fraction0.doubleValue(), 0.01);
      assertEquals((-1613), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-7.5111166E-7F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals(1613, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((-7.51111656777147E-7), fraction0.doubleValue(), 0.01);
      assertEquals((-1613), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-7.5111166E-7F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
      assertEquals((-7.51111656777147E-7), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1613), fraction1.getNumerator());
      assertEquals((-7.5111166E-7F), fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(Integer.MAX_VALUE, fraction1.getDenominator());
      assertEquals(1613, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), (-2217));
      assertNotNull(fraction0);
      assertEquals(968643.94F, fraction0.floatValue(), 0.01F);
      assertEquals(2115, fraction0.getProperNumerator());
      assertEquals(968643.9539918809, fraction0.doubleValue(), 0.01);
      assertEquals(968643L, fraction0.longValue());
      assertEquals(2217, fraction0.getDenominator());
      assertEquals(968643, fraction0.intValue());
      assertEquals((byte) (-61), fraction0.byteValue());
      assertEquals(968643, fraction0.getProperWhole());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals((short) (-14397), fraction0.shortValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals(968643.94F, fraction0.floatValue(), 0.01F);
      assertEquals(2115, fraction0.getProperNumerator());
      assertEquals(968643.9539918809, fraction0.doubleValue(), 0.01);
      assertEquals(968643L, fraction0.longValue());
      assertEquals(2217, fraction0.getDenominator());
      assertEquals(968643, fraction0.intValue());
      assertEquals((byte) (-61), fraction0.byteValue());
      assertEquals(968643, fraction0.getProperWhole());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals((short) (-14397), fraction0.shortValue());
      assertEquals((short) (-14397), fraction1.shortValue());
      assertEquals(968644.0F, fraction1.floatValue(), 0.01F);
      assertEquals(715827882, fraction1.getNumerator());
      assertEquals(968643, fraction1.intValue());
      assertEquals(739, fraction1.getDenominator());
      assertEquals(968643L, fraction1.longValue());
      assertEquals(705, fraction1.getProperNumerator());
      assertEquals(968643.9539918809, fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-61), fraction1.byteValue());
      assertEquals(968643, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.pow(192032);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.pow((-1));
      assertNotNull(fraction2);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1), fraction2.intValue());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals((-1), fraction2.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2623.243));
      assertNotNull(fraction0);
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals(243, fraction0.getProperNumerator());
      assertEquals((short) (-2623), fraction0.shortValue());
      assertEquals((-2623.243), fraction0.doubleValue(), 0.01);
      assertEquals((-2623.243F), fraction0.floatValue(), 0.01F);
      assertEquals((-2623), fraction0.intValue());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals((-2623L), fraction0.longValue());
      assertEquals((-2623243), fraction0.getNumerator());
      assertEquals((-2623), fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals(243, fraction0.getProperNumerator());
      assertEquals((short) (-2623), fraction0.shortValue());
      assertEquals((-2623.243), fraction0.doubleValue(), 0.01);
      assertEquals((-2623.243F), fraction0.floatValue(), 0.01F);
      assertEquals((-2623), fraction0.intValue());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals((-2623L), fraction0.longValue());
      assertEquals((-2623243), fraction0.getNumerator());
      assertEquals((-2623), fraction0.getProperWhole());
      assertEquals((short)2623, fraction1.shortValue());
      assertEquals(2623.243F, fraction1.floatValue(), 0.01F);
      assertEquals(2623, fraction1.getProperWhole());
      assertEquals(2623.243, fraction1.doubleValue(), 0.01);
      assertEquals(2623L, fraction1.longValue());
      assertEquals(2623243, fraction1.getNumerator());
      assertEquals(243, fraction1.getProperNumerator());
      assertEquals(2623, fraction1.intValue());
      assertEquals(1000, fraction1.getDenominator());
      assertEquals((byte)63, fraction1.byteValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.negate();
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0.6, fraction2.doubleValue(), 0.01);
      assertEquals(0.6F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(3, fraction2.getProperNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(486.6842893568);
      assertNotNull(fraction0);
      assertEquals(486, fraction0.getProperWhole());
      assertEquals(486, fraction0.intValue());
      assertEquals(6677, fraction0.getDenominator());
      assertEquals(3249591, fraction0.getNumerator());
      assertEquals(4569, fraction0.getProperNumerator());
      assertEquals(486.6842893515052, fraction0.doubleValue(), 0.01);
      assertEquals(486L, fraction0.longValue());
      assertEquals((byte) (-26), fraction0.byteValue());
      assertEquals(486.6843F, fraction0.floatValue(), 0.01F);
      assertEquals((short)486, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(486, fraction0.getProperWhole());
      assertEquals(486, fraction0.intValue());
      assertEquals(6677, fraction0.getDenominator());
      assertEquals(3249591, fraction0.getNumerator());
      assertEquals(4569, fraction0.getProperNumerator());
      assertEquals(486.6842893515052, fraction0.doubleValue(), 0.01);
      assertEquals(486L, fraction0.longValue());
      assertEquals((byte) (-26), fraction0.byteValue());
      assertEquals(486.6843F, fraction0.floatValue(), 0.01F);
      assertEquals((short)486, fraction0.shortValue());
      assertEquals(4569, fraction1.getProperNumerator());
      assertEquals((-486), fraction1.getProperWhole());
      assertEquals((-486L), fraction1.longValue());
      assertEquals((-3249591), fraction1.getNumerator());
      assertEquals((-486), fraction1.intValue());
      assertEquals((-486.6842893515052), fraction1.doubleValue(), 0.01);
      assertEquals((byte)26, fraction1.byteValue());
      assertEquals(6677, fraction1.getDenominator());
      assertEquals((short) (-486), fraction1.shortValue());
      assertEquals((-486.6843F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotNull(fraction1);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.invert();
      assertNotNull(fraction2);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-6), fraction2.getProperWhole());
      assertEquals((-6L), fraction2.longValue());
      assertEquals((-6.666666666666667), fraction2.doubleValue(), 0.01);
      assertEquals((-6.6666665F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals((short) (-6), fraction2.shortValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-20), fraction2.getNumerator());
      assertEquals((-6), fraction2.intValue());
      assertEquals((byte) (-6), fraction2.byteValue());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction0.multiplyBy(fraction2);
      assertNotNull(fraction3);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-6), fraction2.getProperWhole());
      assertEquals((-6L), fraction2.longValue());
      assertEquals((-6.666666666666667), fraction2.doubleValue(), 0.01);
      assertEquals((-6.6666665F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals((short) (-6), fraction2.shortValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-20), fraction2.getNumerator());
      assertEquals((-6), fraction2.intValue());
      assertEquals((byte) (-6), fraction2.byteValue());
      assertEquals(2, fraction3.getProperNumerator());
      assertEquals((-2), fraction3.getProperWhole());
      assertEquals((-2), fraction3.intValue());
      assertEquals(3, fraction3.getDenominator());
      assertEquals((byte) (-2), fraction3.byteValue());
      assertEquals((-8), fraction3.getNumerator());
      assertEquals((short) (-2), fraction3.shortValue());
      assertEquals((-2.6666667F), fraction3.floatValue(), 0.01F);
      assertEquals((-2L), fraction3.longValue());
      assertEquals((-2.6666666666666665), fraction3.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      
      long long0 = fraction0.longValue();
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 32579);
      assertNotNull(fraction0);
      assertEquals((-65916L), fraction0.longValue());
      assertEquals((byte) (-124), fraction0.byteValue());
      assertEquals((short) (-380), fraction0.shortValue());
      assertEquals(6284, fraction0.getProperNumerator());
      assertEquals((-65916), fraction0.intValue());
      assertEquals(32579, fraction0.getDenominator());
      assertEquals((-65916.195F), fraction0.floatValue(), 0.01F);
      assertEquals((-65916.19288498726), fraction0.doubleValue(), 0.01);
      assertEquals((-65916), fraction0.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      
      long long0 = fraction0.longValue();
      assertEquals((-65916L), fraction0.longValue());
      assertEquals((byte) (-124), fraction0.byteValue());
      assertEquals((short) (-380), fraction0.shortValue());
      assertEquals(6284, fraction0.getProperNumerator());
      assertEquals((-65916), fraction0.intValue());
      assertEquals(32579, fraction0.getDenominator());
      assertEquals((-65916.195F), fraction0.floatValue(), 0.01F);
      assertEquals((-65916.19288498726), fraction0.doubleValue(), 0.01);
      assertEquals((-65916), fraction0.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-65916L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.intValue();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2781, (-1));
      assertNotNull(fraction0);
      assertEquals((-2781.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-2781), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2781L), fraction0.longValue());
      assertEquals((-2781), fraction0.intValue());
      assertEquals((-2781.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-2781), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)35, fraction0.byteValue());
      assertEquals((-2781), fraction0.getProperWhole());
      
      int int0 = fraction0.intValue();
      assertEquals((-2781.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-2781), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2781L), fraction0.longValue());
      assertEquals((-2781), fraction0.intValue());
      assertEquals((-2781.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-2781), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)35, fraction0.byteValue());
      assertEquals((-2781), fraction0.getProperWhole());
      assertEquals((-2781), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.ONE_HALF.invert();
      assertNotNull(fraction1);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction1.getProperWhole();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01);
      assertEquals((-0.6666667F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotNull(fraction2);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01);
      assertEquals((-0.6666667F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1), fraction2.intValue());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction2.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      int int0 = fraction2.getProperWhole();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-0.6666666666666666), fraction1.doubleValue(), 0.01);
      assertEquals((-0.6666667F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1), fraction2.intValue());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1), int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-0.4), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-0.4F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction1.getNumerator();
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-0.4), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-0.4F), fraction1.floatValue(), 0.01F);
      assertEquals((-2), int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1");
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 34);
      assertNotNull(fraction0);
      assertEquals(34, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      
      float float0 = fraction0.floatValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2623.243));
      assertNotNull(fraction0);
      assertEquals(243, fraction0.getProperNumerator());
      assertEquals((-2623.243), fraction0.doubleValue(), 0.01);
      assertEquals((-2623L), fraction0.longValue());
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals((-2623), fraction0.getProperWhole());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals((-2623243), fraction0.getNumerator());
      assertEquals((-2623), fraction0.intValue());
      assertEquals((-2623.243F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-2623), fraction0.shortValue());
      
      float float0 = fraction0.floatValue();
      assertEquals(243, fraction0.getProperNumerator());
      assertEquals((-2623.243), fraction0.doubleValue(), 0.01);
      assertEquals((-2623L), fraction0.longValue());
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals((-2623), fraction0.getProperWhole());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals((-2623243), fraction0.getNumerator());
      assertEquals((-2623), fraction0.intValue());
      assertEquals((-2623.243F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-2623), fraction0.shortValue());
      assertEquals((-2623.243F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.2F), fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.2), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      double double0 = fraction1.doubleValue();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.2F), fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.2), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-0.2), double0, 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.ZERO.divideBy(fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      
      Fraction fraction1 = Fraction.getFraction((double) (-986));
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-986), fraction1.getNumerator());
      assertEquals((-986), fraction1.intValue());
      assertEquals((short) (-986), fraction1.shortValue());
      assertEquals((-986.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-986L), fraction1.longValue());
      assertEquals((-986.0F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)38, fraction1.byteValue());
      assertEquals((-986), fraction1.getProperWhole());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-986), fraction1.getNumerator());
      assertEquals((-986), fraction1.intValue());
      assertEquals((short) (-986), fraction1.shortValue());
      assertEquals((-986.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-986L), fraction1.longValue());
      assertEquals((-986.0F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)38, fraction1.byteValue());
      assertEquals((-986), fraction1.getProperWhole());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(2465, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((-8.113590263691683E-4), fraction2.doubleValue(), 0.01);
      assertEquals((-2), fraction2.getNumerator());
      assertEquals((-8.1135903E-4F), fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.invert();
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-6.6666665F), fraction2.floatValue(), 0.01F);
      assertEquals((-20), fraction2.getNumerator());
      assertEquals((-6), fraction2.intValue());
      assertEquals((short) (-6), fraction2.shortValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals((byte) (-6), fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals((-6L), fraction2.longValue());
      assertEquals((-6.666666666666667), fraction2.doubleValue(), 0.01);
      assertEquals((-6), fraction2.getProperWhole());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction2.add(fraction1);
      assertNotNull(fraction3);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-6.6666665F), fraction2.floatValue(), 0.01F);
      assertEquals((-20), fraction2.getNumerator());
      assertEquals((-6), fraction2.intValue());
      assertEquals((short) (-6), fraction2.shortValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals((byte) (-6), fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals((-6L), fraction2.longValue());
      assertEquals((-6.666666666666667), fraction2.doubleValue(), 0.01);
      assertEquals((-6), fraction2.getProperWhole());
      assertEquals((-6L), fraction3.longValue());
      assertEquals((-409), fraction3.getNumerator());
      assertEquals((-6.816666666666666), fraction3.doubleValue(), 0.01);
      assertEquals((-6), fraction3.intValue());
      assertEquals((short) (-6), fraction3.shortValue());
      assertEquals(49, fraction3.getProperNumerator());
      assertEquals((-6.8166666F), fraction3.floatValue(), 0.01F);
      assertEquals((byte) (-6), fraction3.byteValue());
      assertEquals((-6), fraction3.getProperWhole());
      assertEquals(60, fraction3.getDenominator());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.FOUR_FIFTHS.subtract(fraction0);
      assertNotNull(fraction2);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.4, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction0.ZERO.subtract(fraction1);
      assertNotNull(fraction3);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction3.getProperNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals((byte)0, fraction3.byteValue());
      assertEquals((-0.8), fraction3.doubleValue(), 0.01);
      assertEquals((short)0, fraction3.shortValue());
      assertEquals((-4), fraction3.getNumerator());
      assertEquals((-0.8F), fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.intValue());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(5, fraction3.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      
      Fraction fraction4 = fraction3.add(fraction2);
      assertNotNull(fraction4);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.4, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(4, fraction3.getProperNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals((byte)0, fraction3.byteValue());
      assertEquals((-0.8), fraction3.doubleValue(), 0.01);
      assertEquals((short)0, fraction3.shortValue());
      assertEquals((-4), fraction3.getNumerator());
      assertEquals((-0.8F), fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.intValue());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(5, fraction3.getDenominator());
      assertEquals((-2), fraction4.getNumerator());
      assertEquals(0, fraction4.intValue());
      assertEquals((-0.4F), fraction4.floatValue(), 0.01F);
      assertEquals(0, fraction4.getProperWhole());
      assertEquals((short)0, fraction4.shortValue());
      assertEquals((-0.4), fraction4.doubleValue(), 0.01);
      assertEquals(5, fraction4.getDenominator());
      assertEquals((byte)0, fraction4.byteValue());
      assertEquals(0L, fraction4.longValue());
      assertEquals(2, fraction4.getProperNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction4);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction3);
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction3));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction3));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), 1273);
      assertNotNull(fraction0);
      assertEquals((short)16989, fraction0.shortValue());
      assertEquals((-1686947), fraction0.intValue());
      assertEquals((-1686947L), fraction0.longValue());
      assertEquals((-1686947), fraction0.getProperWhole());
      assertEquals((-1686947.0903377847), fraction0.doubleValue(), 0.01);
      assertEquals(115, fraction0.getProperNumerator());
      assertEquals((-1686947.1F), fraction0.floatValue(), 0.01F);
      assertEquals((-2147483646), fraction0.getNumerator());
      assertEquals(1273, fraction0.getDenominator());
      assertEquals((byte)93, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals((short)16989, fraction0.shortValue());
      assertEquals((-1686947), fraction0.intValue());
      assertEquals((-1686947L), fraction0.longValue());
      assertEquals((-1686947), fraction0.getProperWhole());
      assertEquals((-1686947.0903377847), fraction0.doubleValue(), 0.01);
      assertEquals(115, fraction0.getProperNumerator());
      assertEquals((-1686947.1F), fraction0.floatValue(), 0.01F);
      assertEquals((-2147483646), fraction0.getNumerator());
      assertEquals(1273, fraction0.getDenominator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(115, fraction1.getProperNumerator());
      assertEquals(1686947L, fraction1.longValue());
      assertEquals(1686947.0903377847, fraction1.doubleValue(), 0.01);
      assertEquals(1686947.1F, fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-93), fraction1.byteValue());
      assertEquals(2147483646, fraction1.getNumerator());
      assertEquals(1686947, fraction1.intValue());
      assertEquals(1686947, fraction1.getProperWhole());
      assertEquals((short) (-16989), fraction1.shortValue());
      assertEquals(1273, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.6, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(8, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(1.6F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.abs();
      assertNotNull(fraction2);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.6, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(8, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(1.6F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(1.6, fraction2.doubleValue(), 0.01);
      assertEquals(8, fraction2.getNumerator());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1.6F, fraction2.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getProperWhole());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4567, 2781, 10000);
      assertNotNull(fraction0);
      assertEquals(4567.2781, fraction0.doubleValue(), 0.01);
      assertEquals(4567L, fraction0.longValue());
      assertEquals(4567, fraction0.intValue());
      assertEquals(4567, fraction0.getProperWhole());
      assertEquals(4567.278F, fraction0.floatValue(), 0.01F);
      assertEquals((short)4567, fraction0.shortValue());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((byte) (-41), fraction0.byteValue());
      assertEquals(2781, fraction0.getProperNumerator());
      assertEquals(45672781, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(4567.2781, fraction0.doubleValue(), 0.01);
      assertEquals(4567L, fraction0.longValue());
      assertEquals(4567, fraction0.intValue());
      assertEquals(4567, fraction0.getProperWhole());
      assertEquals(4567.278F, fraction0.floatValue(), 0.01F);
      assertEquals((short)4567, fraction0.shortValue());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((byte) (-41), fraction0.byteValue());
      assertEquals(2781, fraction0.getProperNumerator());
      assertEquals(45672781, fraction0.getNumerator());
      assertEquals(4567, fraction1.getProperWhole());
      assertEquals((short)4567, fraction1.shortValue());
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals(2781, fraction1.getProperNumerator());
      assertEquals(45672781, fraction1.getNumerator());
      assertEquals(4567.278F, fraction1.floatValue(), 0.01F);
      assertEquals(4567.2781, fraction1.doubleValue(), 0.01);
      assertEquals(4567L, fraction1.longValue());
      assertEquals(10000, fraction1.getDenominator());
      assertEquals(4567, fraction1.intValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.getReducedFraction(1, (-1089));
      assertNotNull(fraction1);
      assertEquals(1089, fraction1.getDenominator());
      assertEquals((-9.1827364E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-9.182736455463728E-4), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      fraction1.ONE_HALF.hashCode();
      assertEquals(1089, fraction1.getDenominator());
      assertEquals((-9.1827364E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-9.182736455463728E-4), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.abs();
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      
      Fraction fraction3 = Fraction.getFraction((-2623.243));
      assertNotNull(fraction3);
      assertEquals((-2623), fraction3.getProperWhole());
      assertEquals((-2623L), fraction3.longValue());
      assertEquals((-2623.243), fraction3.doubleValue(), 0.01);
      assertEquals(243, fraction3.getProperNumerator());
      assertEquals((-2623), fraction3.intValue());
      assertEquals((byte) (-63), fraction3.byteValue());
      assertEquals(1000, fraction3.getDenominator());
      assertEquals((short) (-2623), fraction3.shortValue());
      assertEquals((-2623243), fraction3.getNumerator());
      assertEquals((-2623.243F), fraction3.floatValue(), 0.01F);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fraction0.equals(object0);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertFalse(boolean0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      
      String string0 = fraction2.toProperString();
      assertNotNull(string0);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals("0", string0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction3);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483646), (-2147483646));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.ONE.invert();
      assertNotNull(fraction1);
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertTrue(boolean0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.getReducedFraction((-958), (-958));
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertFalse(boolean0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), 1, 1);
      assertNotNull(fraction0);
      assertEquals((-2147483647L), fraction0.longValue());
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals((-2147483647), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483647), fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.pow(2);
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.16F, fraction1.floatValue(), 0.01F);
      assertEquals(25, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.16, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4567, 2781, 10000);
      assertNotNull(fraction0);
      assertEquals(4567.278F, fraction0.floatValue(), 0.01F);
      assertEquals(45672781, fraction0.getNumerator());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals(4567, fraction0.intValue());
      assertEquals(4567.2781, fraction0.doubleValue(), 0.01);
      assertEquals(4567, fraction0.getProperWhole());
      assertEquals(4567L, fraction0.longValue());
      assertEquals((byte) (-41), fraction0.byteValue());
      assertEquals((short)4567, fraction0.shortValue());
      assertEquals(2781, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.pow(1);
      assertNotNull(fraction1);
      assertEquals(4567.278F, fraction0.floatValue(), 0.01F);
      assertEquals(45672781, fraction0.getNumerator());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals(4567, fraction0.intValue());
      assertEquals(4567.2781, fraction0.doubleValue(), 0.01);
      assertEquals(4567, fraction0.getProperWhole());
      assertEquals(4567L, fraction0.longValue());
      assertEquals((byte) (-41), fraction0.byteValue());
      assertEquals((short)4567, fraction0.shortValue());
      assertEquals(2781, fraction0.getProperNumerator());
      assertEquals(45672781, fraction1.getNumerator());
      assertEquals((byte) (-41), fraction1.byteValue());
      assertEquals((short)4567, fraction1.shortValue());
      assertEquals(2781, fraction1.getProperNumerator());
      assertEquals(4567L, fraction1.longValue());
      assertEquals(4567, fraction1.getProperWhole());
      assertEquals(4567.2781, fraction1.doubleValue(), 0.01);
      assertEquals(4567.278F, fraction1.floatValue(), 0.01F);
      assertEquals(4567, fraction1.intValue());
      assertEquals(10000, fraction1.getDenominator());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2858.300431698));
      assertNotNull(fraction0);
      assertEquals((-2858L), fraction0.longValue());
      assertEquals(1531, fraction0.getProperNumerator());
      assertEquals((-2858.300431711146), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-42), fraction0.byteValue());
      assertEquals((-2858.3005F), fraction0.floatValue(), 0.01F);
      assertEquals((-2858), fraction0.intValue());
      assertEquals((-2858), fraction0.getProperWhole());
      assertEquals((short) (-2858), fraction0.shortValue());
      assertEquals(5096, fraction0.getDenominator());
      assertEquals((-14565899), fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals((-2858L), fraction0.longValue());
      assertEquals(1531, fraction0.getProperNumerator());
      assertEquals((-2858.300431711146), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-42), fraction0.byteValue());
      assertEquals((-2858.3005F), fraction0.floatValue(), 0.01F);
      assertEquals((-2858), fraction0.intValue());
      assertEquals((-2858), fraction0.getProperWhole());
      assertEquals((short) (-2858), fraction0.shortValue());
      assertEquals(5096, fraction0.getDenominator());
      assertEquals((-14565899), fraction0.getNumerator());
      assertEquals((-3.4985825E-4F), fraction1.floatValue(), 0.01F);
      assertEquals((-5096), fraction1.getNumerator());
      assertEquals((-3.49858254543712E-4), fraction1.doubleValue(), 0.01);
      assertEquals(14565899, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(5096, fraction1.getProperNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 3);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals((short)2397, fraction0.shortValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperWhole();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      
      int int0 = fraction0.getDenominator();
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      String string0 = fraction1.toProperString();
      assertNotNull(string0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals("2", string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483646), 46);
      assertNotNull(fraction0);
      assertEquals((-1073741823), fraction0.getNumerator());
      assertEquals((-46684427), fraction0.intValue());
      assertEquals((-46684427L), fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((short) (-22795), fraction0.shortValue());
      assertEquals((-4.6684428E7F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-46684427), fraction0.getProperWhole());
      assertEquals(23, fraction0.getDenominator());
      assertEquals((-4.668442708695652E7), fraction0.doubleValue(), 0.01);
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((-1073741823), fraction0.getNumerator());
      assertEquals((-46684427), fraction0.intValue());
      assertEquals((-46684427L), fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((short) (-22795), fraction0.shortValue());
      assertEquals((-4.6684428E7F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-46684427), fraction0.getProperWhole());
      assertEquals(23, fraction0.getDenominator());
      assertEquals((-4.668442708695652E7), fraction0.doubleValue(), 0.01);
      assertEquals("-46684427 2/23", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 0, 2781);
      assertNotNull(fraction0);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((-2781), fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.intValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((-2781), fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2781, 2781);
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1770.0));
      assertNotNull(fraction0);
      assertEquals((-1770.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1770L), fraction0.longValue());
      assertEquals((byte)22, fraction0.byteValue());
      assertEquals((-1770), fraction0.getNumerator());
      assertEquals((-1770), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1770), fraction0.getProperWhole());
      assertEquals((-1770.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1770), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      String string0 = fraction0.FOUR_FIFTHS.toProperString();
      assertNotNull(string0);
      assertEquals((-1770.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1770L), fraction0.longValue());
      assertEquals((byte)22, fraction0.byteValue());
      assertEquals((-1770), fraction0.getNumerator());
      assertEquals((-1770), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1770), fraction0.getProperWhole());
      assertEquals((-1770.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1770), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals("4/5", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = fraction0.ONE_HALF.invert();
      assertNotNull(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = Fraction.ONE;
      assertNotNull(fraction2);
      assertEquals((short)1, fraction2.shortValue());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperWhole());
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      
      String string0 = fraction2.ONE.toString();
      assertNotNull(string0);
      assertEquals((short)1, fraction2.shortValue());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals("1/1", string0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2140), (-2140));
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals("1/1", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction1);
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertNotNull(fraction1);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((-1), int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(512, 512, 10000);
      assertNotNull(fraction0);
      assertEquals(512L, fraction0.longValue());
      assertEquals(512, fraction0.getProperNumerator());
      assertEquals(5120512, fraction0.getNumerator());
      assertEquals(512, fraction0.getProperWhole());
      assertEquals((short)512, fraction0.shortValue());
      assertEquals(512.0512F, fraction0.floatValue(), 0.01F);
      assertEquals(512, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(512.0512, fraction0.doubleValue(), 0.01);
      assertEquals(10000, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getFraction(163, (-2147483646));
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(163, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-7.590278990185148E-8), fraction1.doubleValue(), 0.01);
      assertEquals((-163), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2147483646, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-7.590279E-8F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(512L, fraction0.longValue());
      assertEquals(512, fraction0.getProperNumerator());
      assertEquals(5120512, fraction0.getNumerator());
      assertEquals(512, fraction0.getProperWhole());
      assertEquals((short)512, fraction0.shortValue());
      assertEquals(512.0512F, fraction0.floatValue(), 0.01F);
      assertEquals(512, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(512.0512, fraction0.doubleValue(), 0.01);
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(163, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-7.590278990185148E-8), fraction1.doubleValue(), 0.01);
      assertEquals((-163), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2147483646, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-7.590279E-8F), fraction1.floatValue(), 0.01F);
      assertEquals(1, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483646), 46);
      assertNotNull(fraction0);
      assertEquals((-46684427), fraction0.intValue());
      assertEquals((-46684427L), fraction0.longValue());
      assertEquals((-1073741823), fraction0.getNumerator());
      assertEquals((-46684427), fraction0.getProperWhole());
      assertEquals((short) (-22795), fraction0.shortValue());
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-4.6684428E7F), fraction0.floatValue(), 0.01F);
      assertEquals((-4.668442708695652E7), fraction0.doubleValue(), 0.01);
      assertEquals(23, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      
      Fraction fraction1 = Fraction.getFraction("-46684427 2/23");
      assertNotNull(fraction1);
      assertEquals((-4.668442708695652E7), fraction1.doubleValue(), 0.01);
      assertEquals(23, fraction1.getDenominator());
      assertEquals((-46684427L), fraction1.longValue());
      assertEquals((-1073741823), fraction1.getNumerator());
      assertEquals((-46684427), fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-46684427), fraction1.getProperWhole());
      assertEquals((byte) (-11), fraction1.byteValue());
      assertEquals((short) (-22795), fraction1.shortValue());
      assertEquals((-4.6684428E7F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-46684427), fraction0.intValue());
      assertEquals((-46684427L), fraction0.longValue());
      assertEquals((-1073741823), fraction0.getNumerator());
      assertEquals((-46684427), fraction0.getProperWhole());
      assertEquals((short) (-22795), fraction0.shortValue());
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-4.6684428E7F), fraction0.floatValue(), 0.01F);
      assertEquals((-4.668442708695652E7), fraction0.doubleValue(), 0.01);
      assertEquals(23, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((-4.668442708695652E7), fraction1.doubleValue(), 0.01);
      assertEquals(23, fraction1.getDenominator());
      assertEquals((-46684427L), fraction1.longValue());
      assertEquals((-1073741823), fraction1.getNumerator());
      assertEquals((-46684427), fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-46684427), fraction1.getProperWhole());
      assertEquals((byte) (-11), fraction1.byteValue());
      assertEquals((short) (-22795), fraction1.shortValue());
      assertEquals((-4.6684428E7F), fraction1.floatValue(), 0.01F);
      assertEquals(0, int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      
      fraction0.hashCode();
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      
      fraction0.hashCode();
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(3, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(8343, fraction0.getNumerator());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3L, fraction0.longValue());
      assertEquals(3, fraction0.intValue());
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)3, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getProperWhole());
      assertEquals(3.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.ONE_HALF.invert();
      assertNotNull(fraction1);
      assertEquals(8343, fraction0.getNumerator());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3L, fraction0.longValue());
      assertEquals(3, fraction0.intValue());
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)3, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getProperWhole());
      assertEquals(3.0, fraction0.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(8343, fraction0.getNumerator());
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3L, fraction0.longValue());
      assertEquals(3, fraction0.intValue());
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)3, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getProperWhole());
      assertEquals(3.0, fraction0.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getProperWhole());
      assertFalse(boolean0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction(1.3672932319686026E-7);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 325);
      assertNotNull(fraction0);
      assertEquals((short)11495, fraction0.shortValue());
      assertEquals(325, fraction0.getDenominator());
      assertEquals((-6607641.993846154), fraction0.doubleValue(), 0.01);
      assertEquals(323, fraction0.getProperNumerator());
      assertEquals((-6607642.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-6607641L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-6607641), fraction0.getProperWhole());
      assertEquals((-6607641), fraction0.intValue());
      assertEquals((byte) (-25), fraction0.byteValue());
      
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.getFraction(83, 514);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.1614786F, fraction1.floatValue(), 0.01F);
      assertEquals(83, fraction1.getProperNumerator());
      assertEquals(83, fraction1.getNumerator());
      assertEquals(0.1614785992217899, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(514, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertNotNull(fraction2);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.1614786F, fraction1.floatValue(), 0.01F);
      assertEquals(83, fraction1.getProperNumerator());
      assertEquals(83, fraction1.getNumerator());
      assertEquals(0.1614785992217899, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(514, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(824, 46);
      assertNotNull(fraction0);
      assertEquals(17.913044F, fraction0.floatValue(), 0.01F);
      assertEquals(21, fraction0.getProperNumerator());
      assertEquals(23, fraction0.getDenominator());
      assertEquals((byte)17, fraction0.byteValue());
      assertEquals(17L, fraction0.longValue());
      assertEquals(17, fraction0.intValue());
      assertEquals((short)17, fraction0.shortValue());
      assertEquals(17, fraction0.getProperWhole());
      assertEquals(17.91304347826087, fraction0.doubleValue(), 0.01);
      assertEquals(412, fraction0.getNumerator());
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(512, 512, 9985);
      Fraction fraction1 = Fraction.getFraction(512, 10000);
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 293);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483643, 1, 1);
      Fraction fraction1 = Fraction.getFraction((-5), 1);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1613), Integer.MAX_VALUE);
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(0.9999992488883432, fraction2.doubleValue(), 0.01);
      assertEquals((-7.51111656777147E-7), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), (-2217));
      Fraction fraction1 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getFraction((-2147483645), (-2147483645));
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.pow(Integer.MIN_VALUE);
      assertNotSame(fraction1, fraction0);
      assertEquals((byte)1, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(512, 512, 10000);
      // Undeclared exception!
      try { 
        fraction0.pow((-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.pow(0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.pow(5);
      assertNotSame(fraction1, fraction0);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 32573);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 31);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483646), 46);
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(3, 3, 3);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(4, fraction1.getNumerator());
      assertEquals((short)4, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      Fraction fraction1 = fraction0.reduce();
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("3/4");
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".W*#QK_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2623243));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(115, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483644, 2147483644, 2147483644);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2147483646), 63, 63);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1177), (-1177), 4918);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(10000, 1, (-24));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1, 1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(5317, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-3010), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      float float0 = fraction0.floatValue();
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(3, 0, 2781);
      int int0 = fraction0.intValue();
      assertEquals(8343, fraction0.getNumerator());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(3, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 23:46:38 GMT 2022
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-855), 364, 1);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1219.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte)61, fraction0.byteValue());
      assertEquals((-1219.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1219L), fraction0.longValue());
      assertEquals((short) (-1219), fraction0.shortValue());
      assertEquals((-1219), fraction0.intValue());
      assertEquals((-1219), fraction0.getProperWhole());
      assertEquals((-1219), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.ONE.pow((-2135));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1219.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte)61, fraction0.byteValue());
      assertEquals((-1219.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1219L), fraction0.longValue());
      assertEquals((short) (-1219), fraction0.shortValue());
      assertEquals((-1219), fraction0.intValue());
      assertEquals((-1219), fraction0.getProperWhole());
      assertEquals((-1219), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      
      Fraction fraction2 = Fraction.getReducedFraction(1, 2671);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction2.intValue());
      assertEquals(3.7439161362785476E-4, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(2671, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(3.7439162E-4F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
      
      int int0 = fraction1.compareTo(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1219.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte)61, fraction0.byteValue());
      assertEquals((-1219.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1219L), fraction0.longValue());
      assertEquals((short) (-1219), fraction0.shortValue());
      assertEquals((-1219), fraction0.intValue());
      assertEquals((-1219), fraction0.getProperWhole());
      assertEquals((-1219), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(3.7439161362785476E-4, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(2671, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(3.7439162E-4F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      fraction0.ONE_FIFTH.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.THREE_FIFTHS.reduce();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-878.9560801667379));
      assertNotNull(fraction0);
      assertEquals((byte) (-110), fraction0.byteValue());
      assertEquals((-878.9560801537194), fraction0.doubleValue(), 0.01);
      assertEquals(3483, fraction0.getProperNumerator());
      assertEquals((-878.95605F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-878), fraction0.shortValue());
      assertEquals((-878L), fraction0.longValue());
      assertEquals((-878), fraction0.getProperWhole());
      assertEquals((-3202037), fraction0.getNumerator());
      assertEquals(3643, fraction0.getDenominator());
      assertEquals((-878), fraction0.intValue());
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte) (-110), fraction0.byteValue());
      assertEquals((-878.9560801537194), fraction0.doubleValue(), 0.01);
      assertEquals(3483, fraction0.getProperNumerator());
      assertEquals((-878.95605F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-878), fraction0.shortValue());
      assertEquals((-878L), fraction0.longValue());
      assertEquals((-878), fraction0.getProperWhole());
      assertEquals((-3202037), fraction0.getNumerator());
      assertEquals(3643, fraction0.getDenominator());
      assertEquals((-878), fraction0.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1546, 1546);
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1546, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1546, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1546, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1546, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" pS(7XEAOB'\"0OP>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" pS(7XEAOB'\"0OP>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483647), 1, 1);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("2/2");
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.getFraction((double) 627);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(627.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)627, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(627.0, fraction1.doubleValue(), 0.01);
      assertEquals(627L, fraction1.longValue());
      assertEquals(627, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(627, fraction1.intValue());
      assertEquals((byte)115, fraction1.byteValue());
      assertEquals(627, fraction1.getNumerator());
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(627.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)627, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(627.0, fraction1.doubleValue(), 0.01);
      assertEquals(627L, fraction1.longValue());
      assertEquals(627, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(627, fraction1.intValue());
      assertEquals((byte)115, fraction1.byteValue());
      assertEquals(627, fraction1.getNumerator());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(626, fraction2.getProperWhole());
      assertEquals(626L, fraction2.longValue());
      assertEquals(626.4, fraction2.doubleValue(), 0.01);
      assertEquals((byte)114, fraction2.byteValue());
      assertEquals(626, fraction2.intValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(3132, fraction2.getNumerator());
      assertEquals(626.4F, fraction2.floatValue(), 0.01F);
      assertEquals((short)626, fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1);
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      
      Fraction fraction1 = Fraction.getFraction((double) (-2147483646));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2147483646), fraction1.getNumerator());
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals((-2.147483646E9), fraction1.doubleValue(), 0.01);
      assertEquals((-2147483646L), fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((-2147483646), fraction1.intValue());
      assertEquals((-2147483646), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((-2147483646), fraction1.getNumerator());
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals((-2.147483646E9), fraction1.doubleValue(), 0.01);
      assertEquals((-2147483646L), fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((-2147483646), fraction1.intValue());
      assertEquals((-2147483646), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals(2.147483647E9, fraction2.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, fraction2.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction2.getProperWhole());
      assertEquals(2147483647L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction2.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-11.931665526637786));
      assertNotNull(fraction0);
      assertEquals((short) (-11), fraction0.shortValue());
      assertEquals(4317, fraction0.getDenominator());
      assertEquals((-11.931665508454946), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-11), fraction0.intValue());
      assertEquals((-51509), fraction0.getNumerator());
      assertEquals((-11), fraction0.getProperWhole());
      assertEquals(4022, fraction0.getProperNumerator());
      assertEquals((-11.931665F), fraction0.floatValue(), 0.01F);
      assertEquals((-11L), fraction0.longValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short) (-11), fraction0.shortValue());
      assertEquals(4317, fraction0.getDenominator());
      assertEquals((-11.931665508454946), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-11), fraction0.intValue());
      assertEquals((-51509), fraction0.getNumerator());
      assertEquals((-11), fraction0.getProperWhole());
      assertEquals(4022, fraction0.getProperNumerator());
      assertEquals((-11.931665F), fraction0.floatValue(), 0.01F);
      assertEquals((-11L), fraction0.longValue());
      assertEquals((-11.931665508454946), fraction1.doubleValue(), 0.01);
      assertEquals((-11L), fraction1.longValue());
      assertEquals((byte) (-11), fraction1.byteValue());
      assertEquals((short) (-11), fraction1.shortValue());
      assertEquals((-51509), fraction1.getNumerator());
      assertEquals((-11), fraction1.intValue());
      assertEquals(4022, fraction1.getProperNumerator());
      assertEquals(4317, fraction1.getDenominator());
      assertEquals((-11.931665F), fraction1.floatValue(), 0.01F);
      assertEquals((-11), fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.pow(1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2184, 3);
      assertNotNull(fraction0);
      assertEquals(728, fraction0.getProperWhole());
      assertEquals(728.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)728, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(728.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(728L, fraction0.longValue());
      assertEquals(728, fraction0.getNumerator());
      assertEquals(728, fraction0.intValue());
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(728, fraction0.getProperWhole());
      assertEquals(728.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)728, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(728.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(728L, fraction0.longValue());
      assertEquals(728, fraction0.getNumerator());
      assertEquals(728, fraction0.intValue());
      assertEquals((byte)40, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short) (-728), fraction1.shortValue());
      assertEquals((-728L), fraction1.longValue());
      assertEquals((-728.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-728), fraction1.intValue());
      assertEquals((-728), fraction1.getNumerator());
      assertEquals((-728), fraction1.getProperWhole());
      assertEquals((-728.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2335, 47);
      assertNotNull(fraction0);
      assertEquals(49L, fraction0.longValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals(49, fraction0.intValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(47, fraction0.getDenominator());
      assertEquals((short)49, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(49L, fraction0.longValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals(49, fraction0.intValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(47, fraction0.getDenominator());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(49L, fraction0.longValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals(49, fraction0.intValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(47, fraction0.getDenominator());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-29L), fraction2.longValue());
      assertEquals((short) (-29), fraction2.shortValue());
      assertEquals((-29), fraction2.intValue());
      assertEquals((byte) (-29), fraction2.byteValue());
      assertEquals(47, fraction2.getDenominator());
      assertEquals((-29.80851F), fraction2.floatValue(), 0.01F);
      assertEquals((-1401), fraction2.getNumerator());
      assertEquals(38, fraction2.getProperNumerator());
      assertEquals((-29), fraction2.getProperWhole());
      assertEquals((-29.80851063829787), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1845);
      assertNotNull(fraction0);
      assertEquals((-1163947.8F), fraction0.floatValue(), 0.01F);
      assertEquals((-1163947L), fraction0.longValue());
      assertEquals((short)15701, fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(1433, fraction0.getProperNumerator());
      assertEquals((byte)85, fraction0.byteValue());
      assertEquals((-1163947), fraction0.intValue());
      assertEquals(1845, fraction0.getDenominator());
      assertEquals((-1163947), fraction0.getProperWhole());
      assertEquals((-1163947.776693767), fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((-1163947.8F), fraction0.floatValue(), 0.01F);
      assertEquals((-1163947L), fraction0.longValue());
      assertEquals((short)15701, fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(1433, fraction0.getProperNumerator());
      assertEquals((byte)85, fraction0.byteValue());
      assertEquals((-1163947), fraction0.intValue());
      assertEquals(1845, fraction0.getDenominator());
      assertEquals((-1163947), fraction0.getProperWhole());
      assertEquals((-1163947.776693767), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte) (-85), fraction2.byteValue());
      assertEquals((short)29355, fraction2.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction2.getNumerator());
      assertEquals(5123, fraction2.getProperNumerator());
      assertEquals((-232789.56F), fraction2.floatValue(), 0.01F);
      assertEquals(9225, fraction2.getDenominator());
      assertEquals((-232789), fraction2.intValue());
      assertEquals((-232789), fraction2.getProperWhole());
      assertEquals((-232789L), fraction2.longValue());
      assertEquals((-232789.5553387534), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-855), 364, 1);
      assertNotNull(fraction0);
      assertEquals((-1219.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte)61, fraction0.byteValue());
      assertEquals((-1219.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1219L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1219), fraction0.getProperWhole());
      assertEquals((-1219), fraction0.getNumerator());
      assertEquals((-1219), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1219), fraction0.shortValue());
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1219.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte)61, fraction0.byteValue());
      assertEquals((-1219.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1219L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1219), fraction0.getProperWhole());
      assertEquals((-1219), fraction0.getNumerator());
      assertEquals((-1219), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1219), fraction0.shortValue());
      assertEquals((byte) (-61), fraction1.byteValue());
      assertEquals((short)1219, fraction1.shortValue());
      assertEquals(1219.0, fraction1.doubleValue(), 0.01);
      assertEquals(1219, fraction1.getNumerator());
      assertEquals(1219, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1219L, fraction1.longValue());
      assertEquals(1219, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1219.0F, fraction1.floatValue(), 0.01F);
      
      long long0 = fraction1.longValue();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1219L, long0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1219.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte)61, fraction0.byteValue());
      assertEquals((-1219.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1219L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1219), fraction0.getProperWhole());
      assertEquals((-1219), fraction0.getNumerator());
      assertEquals((-1219), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1219), fraction0.shortValue());
      assertEquals((byte) (-61), fraction1.byteValue());
      assertEquals((short)1219, fraction1.shortValue());
      assertEquals(1219.0, fraction1.doubleValue(), 0.01);
      assertEquals(1219, fraction1.getNumerator());
      assertEquals(1219, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1219L, fraction1.longValue());
      assertEquals(1219, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1219.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 332);
      assertNotNull(fraction0);
      assertEquals((-6468324), fraction0.getProperWhole());
      assertEquals((-6468324L), fraction0.longValue());
      assertEquals((short)19740, fraction0.shortValue());
      assertEquals((byte)28, fraction0.byteValue());
      assertEquals(20, fraction0.getProperNumerator());
      assertEquals((-6468324.0F), fraction0.floatValue(), 0.01F);
      assertEquals(83, fraction0.getDenominator());
      assertEquals((-6468324.240963856), fraction0.doubleValue(), 0.01);
      assertEquals((-536870912), fraction0.getNumerator());
      assertEquals((-6468324), fraction0.intValue());
      
      long long0 = fraction0.longValue();
      assertEquals((-6468324L), long0);
      assertEquals((-6468324), fraction0.getProperWhole());
      assertEquals((-6468324L), fraction0.longValue());
      assertEquals((short)19740, fraction0.shortValue());
      assertEquals((byte)28, fraction0.byteValue());
      assertEquals(20, fraction0.getProperNumerator());
      assertEquals((-6468324.0F), fraction0.floatValue(), 0.01F);
      assertEquals(83, fraction0.getDenominator());
      assertEquals((-6468324.240963856), fraction0.doubleValue(), 0.01);
      assertEquals((-536870912), fraction0.getNumerator());
      assertEquals((-6468324), fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-167), 269);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(269, fraction0.getDenominator());
      assertEquals((-0.62081784F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(167, fraction0.getProperNumerator());
      assertEquals((-0.620817843866171), fraction0.doubleValue(), 0.01);
      assertEquals((-167), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(269, fraction0.getDenominator());
      assertEquals((-0.62081784F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(167, fraction0.getProperNumerator());
      assertEquals((-0.620817843866171), fraction0.doubleValue(), 0.01);
      assertEquals((-167), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-1.6107785F), fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(102, fraction1.getProperNumerator());
      assertEquals((-269), fraction1.getNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.6107784431137724), fraction1.doubleValue(), 0.01);
      assertEquals(167, fraction1.getDenominator());
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.ONE.reduce();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      
      int int0 = fraction1.intValue();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1845, (-125));
      assertNotNull(fraction0);
      assertEquals((-14L), fraction0.longValue());
      assertEquals((-14), fraction0.intValue());
      assertEquals((-14.76F), fraction0.floatValue(), 0.01F);
      assertEquals((-369), fraction0.getNumerator());
      assertEquals(19, fraction0.getProperNumerator());
      assertEquals((short) (-14), fraction0.shortValue());
      assertEquals((byte) (-14), fraction0.byteValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-14.76), fraction0.doubleValue(), 0.01);
      assertEquals((-14), fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2167, 2167, 1);
      assertNotNull(fraction0);
      assertEquals((short)4334, fraction0.shortValue());
      assertEquals(4334.0, fraction0.doubleValue(), 0.01);
      assertEquals(4334L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(4334, fraction0.getProperWhole());
      assertEquals((byte) (-18), fraction0.byteValue());
      assertEquals(4334, fraction0.getNumerator());
      assertEquals(4334.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(4334, fraction0.intValue());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(4334, int0);
      assertEquals((short)4334, fraction0.shortValue());
      assertEquals(4334.0, fraction0.doubleValue(), 0.01);
      assertEquals(4334L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(4334, fraction0.getProperWhole());
      assertEquals((byte) (-18), fraction0.byteValue());
      assertEquals(4334, fraction0.getNumerator());
      assertEquals(4334.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(4334, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-845), 364, 1);
      assertNotNull(fraction0);
      assertEquals((-1209), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1209), fraction0.getProperWhole());
      assertEquals((-1209.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)71, fraction0.byteValue());
      assertEquals((-1209), fraction0.getNumerator());
      assertEquals((-1209.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1209L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1209), fraction0.shortValue());
      
      int int0 = fraction0.getProperWhole();
      assertEquals((-1209), int0);
      assertEquals((-1209), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1209), fraction0.getProperWhole());
      assertEquals((-1209.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)71, fraction0.byteValue());
      assertEquals((-1209), fraction0.getNumerator());
      assertEquals((-1209.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1209L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-1209), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, int0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-986), 1737);
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.5676453655728267), fraction0.doubleValue(), 0.01);
      assertEquals(1737, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-0.5676454F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(986, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-986), fraction0.getNumerator());
      
      int int0 = fraction0.getNumerator();
      assertEquals((-986), int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-0.5676453655728267), fraction0.doubleValue(), 0.01);
      assertEquals(1737, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-0.5676454F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(986, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-986), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 10273, 261);
      assertNotNull(fraction0);
      assertEquals(40, fraction0.getProperWhole());
      assertEquals(40.360153F, fraction0.floatValue(), 0.01F);
      assertEquals(40L, fraction0.longValue());
      assertEquals(10534, fraction0.getNumerator());
      assertEquals(40, fraction0.intValue());
      assertEquals(94, fraction0.getProperNumerator());
      assertEquals(261, fraction0.getDenominator());
      assertEquals((short)40, fraction0.shortValue());
      assertEquals((byte)40, fraction0.byteValue());
      assertEquals(40.36015325670498, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1239), 5700);
      assertNotNull(fraction0);
      assertEquals(5700, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-1239), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((-0.21736842105263157), fraction0.doubleValue(), 0.01);
      assertEquals((-0.21736842F), fraction0.floatValue(), 0.01F);
      assertEquals(1239, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      
      float float0 = fraction0.floatValue();
      assertEquals((-0.21736842F), float0, 0.01F);
      assertEquals(5700, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-1239), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((-0.21736842105263157), fraction0.doubleValue(), 0.01);
      assertEquals((-0.21736842F), fraction0.floatValue(), 0.01F);
      assertEquals(1239, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3880), 1);
      assertNotNull(fraction0);
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      
      double double0 = fraction0.doubleValue();
      assertEquals((-3880.0), double0, 0.01);
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getFraction((double) 0);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertNotNull(fraction0);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ONE;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(4.656613E-10F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(4.656612875245797E-10, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-7760), fraction2.getNumerator());
      assertEquals((-7760), fraction2.intValue());
      assertEquals((-7760.0F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-7760), fraction2.shortValue());
      assertEquals((-7760.0), fraction2.doubleValue(), 0.01);
      assertEquals((-7760L), fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((byte) (-80), fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-7760), fraction2.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-855));
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((short) (-855), fraction0.shortValue());
      assertEquals((-855.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-855L), fraction0.longValue());
      assertEquals((-855), fraction0.getNumerator());
      assertEquals((-855), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-855), fraction0.intValue());
      assertEquals((-855.0), fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-87), fraction0.byteValue());
      assertEquals((short) (-855), fraction0.shortValue());
      assertEquals((-855.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-855L), fraction0.longValue());
      assertEquals((-855), fraction0.getNumerator());
      assertEquals((-855), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-855), fraction0.intValue());
      assertEquals((-855.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1710), fraction1.intValue());
      assertEquals((-1710), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short) (-1710), fraction1.shortValue());
      assertEquals((-1710.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte)82, fraction1.byteValue());
      assertEquals((-1710.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1710), fraction1.getProperWhole());
      assertEquals((-1710L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2147483640));
      assertNotNull(fraction0);
      assertEquals((-2147483640L), fraction0.longValue());
      assertEquals((byte)8, fraction0.byteValue());
      assertEquals((-2147483640), fraction0.getNumerator());
      assertEquals((-2147483640), fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.14748364E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483640), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)8, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.abs();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2147483640L), fraction0.longValue());
      assertEquals((byte)8, fraction0.byteValue());
      assertEquals((-2147483640), fraction0.getNumerator());
      assertEquals((-2147483640), fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.14748364E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483640), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)8, fraction0.shortValue());
      assertEquals((short) (-8), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2147483640, fraction1.getProperWhole());
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals(2147483640, fraction1.intValue());
      assertEquals(2.14748364E9, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2147483640L, fraction1.longValue());
      assertEquals(2147483640, fraction1.getNumerator());
      assertEquals((byte) (-8), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = Fraction.getFraction(0.0);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      
      double double0 = fraction1.doubleValue();
      assertSame(fraction1, fraction0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      
      int int0 = fraction1.getNumerator();
      assertSame(fraction1, fraction0);
      assertEquals(0, int0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = Fraction.ONE_THIRD;
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(3, fraction2.getDenominator());
      assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction1, fraction0);
      assertTrue(boolean0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Fraction fraction3 = Fraction.getFraction((double) 5);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotNull(fraction3);
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertEquals(1, fraction3.getDenominator());
      assertEquals(5.0, fraction3.doubleValue(), 0.01);
      assertEquals(5, fraction3.intValue());
      assertEquals(5.0F, fraction3.floatValue(), 0.01F);
      assertEquals((short)5, fraction3.shortValue());
      assertEquals(5, fraction3.getNumerator());
      assertEquals((byte)5, fraction3.byteValue());
      assertEquals(5L, fraction3.longValue());
      assertEquals(5, fraction3.getProperWhole());
      assertEquals(0, fraction3.getProperNumerator());
      
      Fraction fraction4 = fraction3.TWO_FIFTHS.invert();
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction4);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction4, fraction1);
      assertNotNull(fraction4);
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction4.equals((Object)fraction1));
      assertEquals(1, fraction3.getDenominator());
      assertEquals(5.0, fraction3.doubleValue(), 0.01);
      assertEquals(5, fraction3.intValue());
      assertEquals(5.0F, fraction3.floatValue(), 0.01F);
      assertEquals((short)5, fraction3.shortValue());
      assertEquals(5, fraction3.getNumerator());
      assertEquals((byte)5, fraction3.byteValue());
      assertEquals(5L, fraction3.longValue());
      assertEquals(5, fraction3.getProperWhole());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(2, fraction4.getDenominator());
      assertEquals(1, fraction4.getProperNumerator());
      assertEquals(2, fraction4.getProperWhole());
      assertEquals((short)2, fraction4.shortValue());
      assertEquals(2, fraction4.intValue());
      assertEquals(2.5F, fraction4.floatValue(), 0.01F);
      assertEquals(2.5, fraction4.doubleValue(), 0.01);
      assertEquals((byte)2, fraction4.byteValue());
      assertEquals(2L, fraction4.longValue());
      assertEquals(5, fraction4.getNumerator());
      
      Fraction fraction5 = Fraction.getFraction(0.0);
      assertSame(fraction5, fraction1);
      assertNotSame(fraction5, fraction3);
      assertNotSame(fraction5, fraction4);
      assertSame(fraction5, fraction0);
      assertNotSame(fraction5, fraction2);
      assertNotNull(fraction5);
      assertFalse(fraction5.equals((Object)fraction3));
      assertFalse(fraction5.equals((Object)fraction4));
      assertFalse(fraction5.equals((Object)fraction2));
      assertEquals((short)0, fraction5.shortValue());
      assertEquals(0, fraction5.intValue());
      assertEquals(0, fraction5.getNumerator());
      assertEquals((byte)0, fraction5.byteValue());
      assertEquals(1, fraction5.getDenominator());
      assertEquals(0L, fraction5.longValue());
      assertEquals(0, fraction5.getProperNumerator());
      assertEquals(0, fraction5.getProperWhole());
      assertEquals(0.0F, fraction5.floatValue(), 0.01F);
      assertEquals(0.0, fraction5.doubleValue(), 0.01);
      
      Fraction fraction6 = Fraction.getFraction(7351, 0, 7351);
      assertNotSame(fraction6, fraction4);
      assertNotSame(fraction6, fraction0);
      assertNotSame(fraction6, fraction5);
      assertNotSame(fraction6, fraction2);
      assertNotSame(fraction6, fraction1);
      assertNotSame(fraction6, fraction3);
      assertNotNull(fraction6);
      assertFalse(fraction6.equals((Object)fraction4));
      assertFalse(fraction6.equals((Object)fraction0));
      assertFalse(fraction6.equals((Object)fraction5));
      assertFalse(fraction6.equals((Object)fraction2));
      assertFalse(fraction6.equals((Object)fraction1));
      assertFalse(fraction6.equals((Object)fraction3));
      assertEquals(7351.0, fraction6.doubleValue(), 0.01);
      assertEquals(0, fraction6.getProperNumerator());
      assertEquals((byte) (-73), fraction6.byteValue());
      assertEquals(7351, fraction6.getProperWhole());
      assertEquals(7351, fraction6.getDenominator());
      assertEquals((short)7351, fraction6.shortValue());
      assertEquals(54037201, fraction6.getNumerator());
      assertEquals(7351.0F, fraction6.floatValue(), 0.01F);
      assertEquals(7351L, fraction6.longValue());
      assertEquals(7351, fraction6.intValue());
      
      Fraction fraction7 = fraction1.ONE_QUARTER.negate();
      assertSame(fraction1, fraction5);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction6);
      assertSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction7);
      assertNotSame(fraction7, fraction0);
      assertNotSame(fraction7, fraction1);
      assertNotSame(fraction7, fraction3);
      assertNotSame(fraction7, fraction2);
      assertNotSame(fraction7, fraction6);
      assertNotSame(fraction7, fraction5);
      assertNotSame(fraction7, fraction4);
      assertNotNull(fraction7);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction6));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction7.equals((Object)fraction0));
      assertFalse(fraction7.equals((Object)fraction1));
      assertFalse(fraction7.equals((Object)fraction3));
      assertFalse(fraction7.equals((Object)fraction2));
      assertFalse(fraction7.equals((Object)fraction6));
      assertFalse(fraction7.equals((Object)fraction5));
      assertFalse(fraction7.equals((Object)fraction4));
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4, fraction7.getDenominator());
      assertEquals(1, fraction7.getProperNumerator());
      assertEquals((byte)0, fraction7.byteValue());
      assertEquals((-0.25), fraction7.doubleValue(), 0.01);
      assertEquals(0L, fraction7.longValue());
      assertEquals((-0.25F), fraction7.floatValue(), 0.01F);
      assertEquals((short)0, fraction7.shortValue());
      assertEquals(0, fraction7.intValue());
      assertEquals((-1), fraction7.getNumerator());
      assertEquals(0, fraction7.getProperWhole());
      
      Fraction fraction8 = fraction1.reduce();
      assertSame(fraction1, fraction8);
      assertSame(fraction1, fraction5);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction6);
      assertSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction7);
      assertSame(fraction8, fraction1);
      assertSame(fraction8, fraction0);
      assertNotSame(fraction8, fraction4);
      assertNotSame(fraction8, fraction6);
      assertSame(fraction8, fraction5);
      assertNotSame(fraction8, fraction3);
      assertNotSame(fraction8, fraction2);
      assertNotSame(fraction8, fraction7);
      assertNotNull(fraction8);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction6));
      assertFalse(fraction1.equals((Object)fraction7));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction8.equals((Object)fraction4));
      assertFalse(fraction8.equals((Object)fraction6));
      assertFalse(fraction8.equals((Object)fraction3));
      assertFalse(fraction8.equals((Object)fraction2));
      assertFalse(fraction8.equals((Object)fraction7));
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction8.shortValue());
      assertEquals(0, fraction8.intValue());
      assertEquals((byte)0, fraction8.byteValue());
      assertEquals(0.0F, fraction8.floatValue(), 0.01F);
      assertEquals(0.0, fraction8.doubleValue(), 0.01);
      assertEquals(1, fraction8.getDenominator());
      assertEquals(0L, fraction8.longValue());
      assertEquals(0, fraction8.getProperNumerator());
      assertEquals(0, fraction8.getNumerator());
      assertEquals(0, fraction8.getProperWhole());
      
      String string0 = fraction1.toProperString();
      assertSame(fraction1, fraction8);
      assertSame(fraction1, fraction5);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction6);
      assertSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction7);
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction6));
      assertFalse(fraction1.equals((Object)fraction7));
      assertFalse(fraction1.equals((Object)fraction4));
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      
      long long0 = fraction8.longValue();
      assertSame(fraction1, fraction8);
      assertSame(fraction1, fraction5);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction6);
      assertSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction7);
      assertSame(fraction8, fraction1);
      assertSame(fraction8, fraction0);
      assertNotSame(fraction8, fraction4);
      assertNotSame(fraction8, fraction6);
      assertSame(fraction8, fraction5);
      assertNotSame(fraction8, fraction3);
      assertNotSame(fraction8, fraction2);
      assertNotSame(fraction8, fraction7);
      assertEquals(0L, long0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction6));
      assertFalse(fraction1.equals((Object)fraction7));
      assertFalse(fraction1.equals((Object)fraction4));
      assertFalse(fraction8.equals((Object)fraction4));
      assertFalse(fraction8.equals((Object)fraction6));
      assertFalse(fraction8.equals((Object)fraction3));
      assertFalse(fraction8.equals((Object)fraction2));
      assertFalse(fraction8.equals((Object)fraction7));
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction8.shortValue());
      assertEquals(0, fraction8.intValue());
      assertEquals((byte)0, fraction8.byteValue());
      assertEquals(0.0F, fraction8.floatValue(), 0.01F);
      assertEquals(0.0, fraction8.doubleValue(), 0.01);
      assertEquals(1, fraction8.getDenominator());
      assertEquals(0L, fraction8.longValue());
      assertEquals(0, fraction8.getProperNumerator());
      assertEquals(0, fraction8.getNumerator());
      assertEquals(0, fraction8.getProperWhole());
      
      Fraction fraction9 = Fraction.getFraction((-2270.148659852112));
      assertNotSame(fraction9, fraction7);
      assertNotSame(fraction9, fraction3);
      assertNotSame(fraction9, fraction8);
      assertNotSame(fraction9, fraction1);
      assertNotSame(fraction9, fraction6);
      assertNotSame(fraction9, fraction2);
      assertNotSame(fraction9, fraction4);
      assertNotSame(fraction9, fraction0);
      assertNotSame(fraction9, fraction5);
      assertNotNull(fraction9);
      assertFalse(fraction9.equals((Object)fraction7));
      assertFalse(fraction9.equals((Object)fraction3));
      assertFalse(fraction9.equals((Object)fraction8));
      assertFalse(fraction9.equals((Object)fraction1));
      assertFalse(fraction9.equals((Object)fraction6));
      assertFalse(fraction9.equals((Object)fraction2));
      assertFalse(fraction9.equals((Object)fraction4));
      assertFalse(fraction9.equals((Object)fraction0));
      assertFalse(fraction9.equals((Object)fraction5));
      assertEquals((-2270), fraction9.intValue());
      assertEquals((-8215668), fraction9.getNumerator());
      assertEquals(538, fraction9.getProperNumerator());
      assertEquals((short) (-2270), fraction9.shortValue());
      assertEquals((-2270.1486598507877), fraction9.doubleValue(), 0.01);
      assertEquals((byte)34, fraction9.byteValue());
      assertEquals((-2270.1487F), fraction9.floatValue(), 0.01F);
      assertEquals(3619, fraction9.getDenominator());
      assertEquals((-2270), fraction9.getProperWhole());
      assertEquals((-2270L), fraction9.longValue());
      
      Fraction fraction10 = Fraction.getFraction(3, 31);
      assertNotSame(fraction10, fraction4);
      assertNotSame(fraction10, fraction6);
      assertNotSame(fraction10, fraction1);
      assertNotSame(fraction10, fraction2);
      assertNotSame(fraction10, fraction0);
      assertNotSame(fraction10, fraction9);
      assertNotSame(fraction10, fraction7);
      assertNotSame(fraction10, fraction8);
      assertNotSame(fraction10, fraction5);
      assertNotSame(fraction10, fraction3);
      assertNotNull(fraction10);
      assertFalse(fraction10.equals((Object)fraction4));
      assertFalse(fraction10.equals((Object)fraction6));
      assertFalse(fraction10.equals((Object)fraction1));
      assertFalse(fraction10.equals((Object)fraction2));
      assertFalse(fraction10.equals((Object)fraction0));
      assertFalse(fraction10.equals((Object)fraction9));
      assertFalse(fraction10.equals((Object)fraction7));
      assertFalse(fraction10.equals((Object)fraction8));
      assertFalse(fraction10.equals((Object)fraction5));
      assertFalse(fraction10.equals((Object)fraction3));
      assertEquals(3, fraction10.getNumerator());
      assertEquals(0, fraction10.getProperWhole());
      assertEquals(3, fraction10.getProperNumerator());
      assertEquals(0L, fraction10.longValue());
      assertEquals((byte)0, fraction10.byteValue());
      assertEquals(0, fraction10.intValue());
      assertEquals(0.09677419F, fraction10.floatValue(), 0.01F);
      assertEquals(0.0967741935483871, fraction10.doubleValue(), 0.01);
      assertEquals(31, fraction10.getDenominator());
      assertEquals((short)0, fraction10.shortValue());
      
      int int1 = fraction9.intValue();
      assertNotSame(fraction9, fraction7);
      assertNotSame(fraction9, fraction3);
      assertNotSame(fraction9, fraction8);
      assertNotSame(fraction9, fraction1);
      assertNotSame(fraction9, fraction6);
      assertNotSame(fraction9, fraction10);
      assertNotSame(fraction9, fraction2);
      assertNotSame(fraction9, fraction4);
      assertNotSame(fraction9, fraction0);
      assertNotSame(fraction9, fraction5);
      assertEquals((-2270), int1);
      assertFalse(int1 == int0);
      assertFalse(fraction9.equals((Object)fraction7));
      assertFalse(fraction9.equals((Object)fraction3));
      assertFalse(fraction9.equals((Object)fraction8));
      assertFalse(fraction9.equals((Object)fraction1));
      assertFalse(fraction9.equals((Object)fraction6));
      assertFalse(fraction9.equals((Object)fraction10));
      assertFalse(fraction9.equals((Object)fraction2));
      assertFalse(fraction9.equals((Object)fraction4));
      assertFalse(fraction9.equals((Object)fraction0));
      assertFalse(fraction9.equals((Object)fraction5));
      assertEquals((-2270), fraction9.intValue());
      assertEquals((-8215668), fraction9.getNumerator());
      assertEquals(538, fraction9.getProperNumerator());
      assertEquals((short) (-2270), fraction9.shortValue());
      assertEquals((-2270.1486598507877), fraction9.doubleValue(), 0.01);
      assertEquals((byte)34, fraction9.byteValue());
      assertEquals((-2270.1487F), fraction9.floatValue(), 0.01F);
      assertEquals(3619, fraction9.getDenominator());
      assertEquals((-2270), fraction9.getProperWhole());
      assertEquals((-2270L), fraction9.longValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-11.931665526637786));
      assertNotNull(fraction0);
      assertEquals((-11.931665508454946), fraction0.doubleValue(), 0.01);
      assertEquals((-11L), fraction0.longValue());
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((short) (-11), fraction0.shortValue());
      assertEquals((-11.931665F), fraction0.floatValue(), 0.01F);
      assertEquals((-11), fraction0.getProperWhole());
      assertEquals((-11), fraction0.intValue());
      assertEquals((-51509), fraction0.getNumerator());
      assertEquals(4022, fraction0.getProperNumerator());
      assertEquals(4317, fraction0.getDenominator());
      
      fraction0.hashCode();
      assertEquals((-11.931665508454946), fraction0.doubleValue(), 0.01);
      assertEquals((-11L), fraction0.longValue());
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((short) (-11), fraction0.shortValue());
      assertEquals((-11.931665F), fraction0.floatValue(), 0.01F);
      assertEquals((-11), fraction0.getProperWhole());
      assertEquals((-11), fraction0.intValue());
      assertEquals((-51509), fraction0.getNumerator());
      assertEquals(4022, fraction0.getProperNumerator());
      assertEquals(4317, fraction0.getDenominator());
      
      fraction0.hashCode();
      assertEquals((-11.931665508454946), fraction0.doubleValue(), 0.01);
      assertEquals((-11L), fraction0.longValue());
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((short) (-11), fraction0.shortValue());
      assertEquals((-11.931665F), fraction0.floatValue(), 0.01F);
      assertEquals((-11), fraction0.getProperWhole());
      assertEquals((-11), fraction0.intValue());
      assertEquals((-51509), fraction0.getNumerator());
      assertEquals(4022, fraction0.getProperNumerator());
      assertEquals(4317, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 37);
      assertNotNull(fraction0);
      assertEquals((-58040098), fraction0.intValue());
      assertEquals((-58040098), fraction0.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-5.80401E7F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-34), fraction0.byteValue());
      assertEquals(37, fraction0.getDenominator());
      assertEquals((short)24798, fraction0.shortValue());
      assertEquals((-58040098L), fraction0.longValue());
      assertEquals(22, fraction0.getProperNumerator());
      assertEquals((-5.80400985945946E7), fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.getFraction(1, 2147483642);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2147483642, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4.656612886087819E-10, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4.656613E-10F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      
      // Undeclared exception!
      try { 
        fraction1.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.pow(1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1845);
      assertNotNull(fraction0);
      assertEquals((-1163947L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-1163947), fraction0.intValue());
      assertEquals((-1163947.8F), fraction0.floatValue(), 0.01F);
      assertEquals(1845, fraction0.getDenominator());
      assertEquals(1433, fraction0.getProperNumerator());
      assertEquals((-1163947.776693767), fraction0.doubleValue(), 0.01);
      assertEquals((short)15701, fraction0.shortValue());
      assertEquals((-1163947), fraction0.getProperWhole());
      assertEquals((byte)85, fraction0.byteValue());
      
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-2147483646));
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(3, int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(2397, int0);
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, int0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2335, 47);
      assertNotNull(fraction0);
      assertEquals(49, fraction0.intValue());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49L, fraction0.longValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(47, fraction0.getDenominator());
      assertEquals((short)49, fraction0.shortValue());
      
      int int0 = fraction0.getDenominator();
      assertEquals(47, int0);
      assertEquals(49, fraction0.intValue());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49L, fraction0.longValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(47, fraction0.getDenominator());
      assertEquals((short)49, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(197.119);
      assertNotNull(fraction0);
      assertEquals(197, fraction0.getProperWhole());
      assertEquals(197.119F, fraction0.floatValue(), 0.01F);
      assertEquals(119, fraction0.getProperNumerator());
      assertEquals(197L, fraction0.longValue());
      assertEquals(197, fraction0.intValue());
      assertEquals((short)197, fraction0.shortValue());
      assertEquals((byte) (-59), fraction0.byteValue());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals(197.119, fraction0.doubleValue(), 0.01);
      assertEquals(197119, fraction0.getNumerator());
      
      String string0 = fraction0.toProperString();
      assertEquals("197 119/1000", string0);
      assertNotNull(string0);
      assertEquals(197, fraction0.getProperWhole());
      assertEquals(197.119F, fraction0.floatValue(), 0.01F);
      assertEquals(119, fraction0.getProperNumerator());
      assertEquals(197L, fraction0.longValue());
      assertEquals(197, fraction0.intValue());
      assertEquals((short)197, fraction0.shortValue());
      assertEquals((byte) (-59), fraction0.byteValue());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals(197.119, fraction0.doubleValue(), 0.01);
      assertEquals(197119, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1), fraction0.intValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      
      String string0 = fraction0.toProperString();
      assertEquals("-1", string0);
      assertNotNull(string0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1), fraction0.intValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      
      String string0 = fraction0.toProperString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      String string0 = fraction0.toProperString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      
      String string0 = fraction0.toProperString();
      assertEquals("1/2", string0);
      assertNotNull(string0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 2);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      
      String string0 = fraction0.toString();
      assertEquals("2/2", string0);
      assertNotNull(string0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2147483647));
      Fraction fraction1 = Fraction.getReducedFraction((-4118), (-4118));
      Fraction fraction2 = fraction0.subtract(fraction1);
      int int0 = fraction1.compareTo(fraction2);
      assertEquals((-2.147483648E9), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_HALF;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-855));
      Fraction fraction1 = Fraction.getFraction((double) (-855));
      fraction1.compareTo(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-855.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      Fraction fraction1 = Fraction.ONE;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.invert();
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(3, fraction1.getNumerator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertEquals(0, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.pow(511);
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), (-2147483646));
      Fraction fraction1 = Fraction.getFraction(16, 16, 16);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(197.119);
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(500, fraction1.getDenominator());
      assertEquals(197.119, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1);
      Fraction fraction1 = Fraction.getFraction((double) (-2147483647));
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), 5);
      Fraction fraction1 = Fraction.getFraction((double) 5);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1);
      Fraction fraction1 = Fraction.getFraction((double) (-2147483647));
      Fraction fraction2 = fraction0.add(fraction1);
      // Undeclared exception!
      try { 
        fraction1.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-855), 364, 1);
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.pow(1008);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2147483647));
      Fraction fraction1 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.pow(0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 2610);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1550));
      Fraction fraction1 = fraction0.abs();
      assertEquals((-1550.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short)1550, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-855));
      Fraction fraction1 = fraction0.invert();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(855, fraction1.getDenominator());
      assertEquals((-855.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 651);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-2147483636));
      Fraction fraction1 = fraction0.reduce();
      assertEquals(2147483636, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("197 119/1000");
      assertEquals(197.119, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1219");
      assertEquals((-1219.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1219), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("U ~(.v~#);% EzvLM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("8 1p0TF9#7|9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The fraction could not be parsed as the format X Y/Z
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-650));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483632, 2147483632, 2147483632);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-24), 2147483629, 2147483629);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(629, (-1), 629);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 2);
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(2, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-855), 364, 1);
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals("-1219", string0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2147483647));
      fraction0.FOUR_FIFTHS.toString();
      Fraction fraction1 = Fraction.getReducedFraction((-4118), (-4118));
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.ONE_HALF.invert();
      assertEquals((-2.147483647E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2.147483648E9), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
      assertFalse(fraction3.equals((Object)fraction1));
  }
}

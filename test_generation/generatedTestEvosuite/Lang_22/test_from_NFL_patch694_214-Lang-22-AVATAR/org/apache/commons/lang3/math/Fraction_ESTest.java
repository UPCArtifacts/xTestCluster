/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:54:03 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1), int0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, int0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertNotNull(fraction0);
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-975), fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.pow((-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-2815), fraction1.getNumerator());
      assertEquals(2745848, fraction1.getDenominator());
      assertEquals((-0.0010251842F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(2815, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      
      Fraction fraction2 = fraction1.ONE_HALF.divideBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-2815), fraction1.getNumerator());
      assertEquals(2745848, fraction1.getDenominator());
      assertEquals((-0.0010251842F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(2815, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2815, fraction2.getDenominator());
      assertEquals((short) (-487), fraction2.shortValue());
      assertEquals((-487), fraction2.intValue());
      assertEquals((-487.71722F), fraction2.floatValue(), 0.01F);
      assertEquals((byte)25, fraction2.byteValue());
      assertEquals((-487), fraction2.getProperWhole());
      assertEquals((-487.71722912966254), fraction2.doubleValue(), 0.01);
      assertEquals((-1372924), fraction2.getNumerator());
      assertEquals((-487L), fraction2.longValue());
      assertEquals(2019, fraction2.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ONE;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2781, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(2781, fraction0.intValue());
      assertEquals(2781, fraction0.getProperWhole());
      assertEquals(2781.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2781, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(2781.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-35), fraction0.byteValue());
      assertEquals(7733961, fraction0.getNumerator());
      assertEquals(2781L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(2781, fraction0.intValue());
      assertEquals(2781, fraction0.getProperWhole());
      assertEquals(2781.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2781, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(2781.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-35), fraction0.byteValue());
      assertEquals(7733961, fraction0.getNumerator());
      assertEquals(2781L, fraction0.longValue());
      assertEquals((short)2781, fraction1.shortValue());
      assertEquals(2781.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2781.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2781, fraction1.getProperWhole());
      assertEquals(2781L, fraction1.longValue());
      assertEquals(2781, fraction1.getNumerator());
      assertEquals(2781, fraction1.intValue());
      assertEquals((byte) (-35), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" @!7(|+$d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" @!7(|+$d\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("i,(8]$i+1EAm.{ZU4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1/2");
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1040, 640);
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.625, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(400, fraction0.getProperNumerator());
      assertEquals(1040, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.625F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(640, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getFraction((-2041.3007058598));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-2041L), fraction1.longValue());
      assertEquals((-4337764), fraction1.getNumerator());
      assertEquals((-2041.3007F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)7, fraction1.byteValue());
      assertEquals((-2041.300705882353), fraction1.doubleValue(), 0.01);
      assertEquals((-2041), fraction1.intValue());
      assertEquals(639, fraction1.getProperNumerator());
      assertEquals((short) (-2041), fraction1.shortValue());
      assertEquals((-2041), fraction1.getProperWhole());
      assertEquals(2125, fraction1.getDenominator());
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.625, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(400, fraction0.getProperNumerator());
      assertEquals(1040, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.625F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(640, fraction0.getDenominator());
      assertEquals((-2041L), fraction1.longValue());
      assertEquals((-4337764), fraction1.getNumerator());
      assertEquals((-2041.3007F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)7, fraction1.byteValue());
      assertEquals((-2041.300705882353), fraction1.doubleValue(), 0.01);
      assertEquals((-2041), fraction1.intValue());
      assertEquals(639, fraction1.getProperNumerator());
      assertEquals((short) (-2041), fraction1.shortValue());
      assertEquals((-2041), fraction1.getProperWhole());
      assertEquals(2125, fraction1.getDenominator());
      assertEquals(251792, fraction2.getProperNumerator());
      assertEquals((-2042.925705882353), fraction2.doubleValue(), 0.01);
      assertEquals((-2042L), fraction2.longValue());
      assertEquals((short) (-2042), fraction2.shortValue());
      assertEquals(272000, fraction2.getDenominator());
      assertEquals((-555675792), fraction2.getNumerator());
      assertEquals((byte)6, fraction2.byteValue());
      assertEquals((-2042), fraction2.getProperWhole());
      assertEquals((-2042), fraction2.intValue());
      assertEquals((-2042.9257F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 2147483646);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-4.656613E-10F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2147483646, fraction0.getDenominator());
      assertEquals((-4.656612877414201E-10), fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.ONE;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-4.656613E-10F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2147483646, fraction0.getDenominator());
      assertEquals((-4.656612877414201E-10), fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2147483646, fraction2.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1.0000000004656613, fraction2.doubleValue(), 0.01);
      assertEquals((short)1, fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertNotNull(fraction0);
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((byte)49, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.4344582593251), fraction1.doubleValue(), 0.01);
      assertEquals(1223, fraction1.getProperNumerator());
      assertEquals((-975.43445F), fraction1.floatValue(), 0.01F);
      assertEquals(2815, fraction1.getDenominator());
      assertEquals((short) (-975), fraction1.shortValue());
      assertEquals((-2745848), fraction1.getNumerator());
      assertEquals((byte)49, fraction1.byteValue());
      assertEquals((-975), fraction1.getProperWhole());
      assertEquals((-975), fraction1.intValue());
      assertEquals((-975L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(6561, 1);
      assertNotNull(fraction0);
      assertEquals(6561, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(6561.0, fraction0.doubleValue(), 0.01);
      assertEquals(6561L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(6561.0F, fraction0.floatValue(), 0.01F);
      assertEquals(6561, fraction0.getNumerator());
      assertEquals(6561, fraction0.intValue());
      assertEquals((byte) (-95), fraction0.byteValue());
      assertEquals((short)6561, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(6561, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(6561.0, fraction0.doubleValue(), 0.01);
      assertEquals(6561L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(6561.0F, fraction0.floatValue(), 0.01F);
      assertEquals(6561, fraction0.getNumerator());
      assertEquals(6561, fraction0.intValue());
      assertEquals((byte) (-95), fraction0.byteValue());
      assertEquals((short)6561, fraction0.shortValue());
      assertEquals(6561, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(6561, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(6561.0F, fraction1.floatValue(), 0.01F);
      assertEquals(6561, fraction1.getProperWhole());
      assertEquals(6561.0, fraction1.doubleValue(), 0.01);
      assertEquals(6561L, fraction1.longValue());
      assertEquals((byte) (-95), fraction1.byteValue());
      assertEquals((short)6561, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-302.2851));
      assertNotNull(fraction0);
      assertEquals((-302.2851), fraction0.doubleValue(), 0.01);
      assertEquals((-302.2851F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-302), fraction0.shortValue());
      assertEquals((byte) (-46), fraction0.byteValue());
      assertEquals((-302L), fraction0.longValue());
      assertEquals((-302), fraction0.getProperWhole());
      assertEquals(2851, fraction0.getProperNumerator());
      assertEquals((-302), fraction0.intValue());
      assertEquals((-3022851), fraction0.getNumerator());
      assertEquals(10000, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.pow(1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-302.2851), fraction0.doubleValue(), 0.01);
      assertEquals((-302.2851F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-302), fraction0.shortValue());
      assertEquals((byte) (-46), fraction0.byteValue());
      assertEquals((-302L), fraction0.longValue());
      assertEquals((-302), fraction0.getProperWhole());
      assertEquals(2851, fraction0.getProperNumerator());
      assertEquals((-302), fraction0.intValue());
      assertEquals((-3022851), fraction0.getNumerator());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((-302.2851F), fraction1.floatValue(), 0.01F);
      assertEquals((short) (-302), fraction1.shortValue());
      assertEquals((-302L), fraction1.longValue());
      assertEquals((-302.2851), fraction1.doubleValue(), 0.01);
      assertEquals(2851, fraction1.getProperNumerator());
      assertEquals(10000, fraction1.getDenominator());
      assertEquals((-302), fraction1.getProperWhole());
      assertEquals((byte) (-46), fraction1.byteValue());
      assertEquals((-3022851), fraction1.getNumerator());
      assertEquals((-302), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.pow(29);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1100), 1, 1);
      assertNotNull(fraction0);
      assertEquals((-1101), fraction0.getProperWhole());
      assertEquals((-1101.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short) (-1101), fraction0.shortValue());
      assertEquals((-1101L), fraction0.longValue());
      assertEquals((byte) (-77), fraction0.byteValue());
      assertEquals((-1101), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1101), fraction0.intValue());
      assertEquals((-1101.0), fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-1101), fraction0.getProperWhole());
      assertEquals((-1101.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short) (-1101), fraction0.shortValue());
      assertEquals((-1101L), fraction0.longValue());
      assertEquals((byte) (-77), fraction0.byteValue());
      assertEquals((-1101), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1101), fraction0.intValue());
      assertEquals((-1101.0), fraction0.doubleValue(), 0.01);
      assertEquals((short)1101, fraction1.shortValue());
      assertEquals(1101, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1101, fraction1.getProperWhole());
      assertEquals(1101.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1101L, fraction1.longValue());
      assertEquals(1101, fraction1.getNumerator());
      assertEquals((byte)77, fraction1.byteValue());
      assertEquals(1101.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1);
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.ONE.multiplyBy(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.getFraction((-1100), 1, 1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1101), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short) (-1101), fraction1.shortValue());
      assertEquals((-1101.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1101L), fraction1.longValue());
      assertEquals((-1101.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1101), fraction1.intValue());
      assertEquals((byte) (-77), fraction1.byteValue());
      assertEquals((-1101), fraction1.getNumerator());
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1101), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short) (-1101), fraction1.shortValue());
      assertEquals((-1101.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1101L), fraction1.longValue());
      assertEquals((-1101.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1101), fraction1.intValue());
      assertEquals((byte) (-77), fraction1.byteValue());
      assertEquals((-1101), fraction1.getNumerator());
      assertEquals((-3303), fraction2.getNumerator());
      assertEquals((-825), fraction2.getProperWhole());
      assertEquals(4, fraction2.getDenominator());
      assertEquals((-825.75), fraction2.doubleValue(), 0.01);
      assertEquals(3, fraction2.getProperNumerator());
      assertEquals((-825.75F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-825), fraction2.shortValue());
      assertEquals((-825), fraction2.intValue());
      assertEquals((byte) (-57), fraction2.byteValue());
      assertEquals((-825L), fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.ONE_QUARTER.pow((-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((byte)4, fraction1.byteValue());
      assertEquals(4L, fraction1.longValue());
      assertEquals((short)4, fraction1.shortValue());
      assertEquals(4.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4, fraction1.intValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getProperWhole());
      
      long long0 = fraction1.longValue();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(4L, long0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((byte)4, fraction1.byteValue());
      assertEquals(4L, fraction1.longValue());
      assertEquals((short)4, fraction1.shortValue());
      assertEquals(4.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4, fraction1.intValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertNotNull(fraction0);
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-2745848), fraction0.getNumerator());
      
      long long0 = fraction0.longValue();
      assertEquals((-975L), long0);
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-2745848), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1161), 2156);
      assertNotNull(fraction0);
      assertEquals((-0.5384972170686456), fraction0.doubleValue(), 0.01);
      assertEquals((-1161), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1161, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-0.5384972F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2156, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-0.5384972170686456), fraction0.doubleValue(), 0.01);
      assertEquals((-1161), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1161, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-0.5384972F), fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2156, fraction0.getDenominator());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(995, fraction1.getProperNumerator());
      assertEquals((-2156), fraction1.getNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.8570198105081825), fraction1.doubleValue(), 0.01);
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1161, fraction1.getDenominator());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1.8570198F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4146, (-2147483645));
      assertNotNull(fraction0);
      assertEquals((-4146), fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4146, fraction0.getProperNumerator());
      assertEquals((-1.9306316998749483E-6), fraction0.doubleValue(), 0.01);
      assertEquals(2147483645, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-1.9306317E-6F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-4146), fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4146, fraction0.getProperNumerator());
      assertEquals((-1.9306316998749483E-6), fraction0.doubleValue(), 0.01);
      assertEquals(2147483645, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-1.9306317E-6F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-77), fraction1.byteValue());
      assertEquals((-517965.2F), fraction1.floatValue(), 0.01F);
      assertEquals((-517965.182103232), fraction1.doubleValue(), 0.01);
      assertEquals((-517965L), fraction1.longValue());
      assertEquals((-2147483645), fraction1.getNumerator());
      assertEquals((-517965), fraction1.getProperWhole());
      assertEquals(755, fraction1.getProperNumerator());
      assertEquals(4146, fraction1.getDenominator());
      assertEquals((-517965), fraction1.intValue());
      assertEquals((short)6323, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      
      int int0 = fraction0.intValue();
      assertEquals(1, int0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-4), 2);
      assertNotNull(fraction0);
      assertEquals((-2.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2L), fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((-2.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-4), fraction0.getNumerator());
      assertEquals((-2), fraction0.intValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      int int0 = fraction0.intValue();
      assertEquals((-2), int0);
      assertEquals((-2.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2L), fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((-2.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-4), fraction0.getNumerator());
      assertEquals((-2), fraction0.intValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3880), 7);
      assertNotNull(fraction0);
      assertEquals((byte) (-42), fraction0.byteValue());
      assertEquals(7, fraction0.getDenominator());
      assertEquals((-554.2857142857143), fraction0.doubleValue(), 0.01);
      assertEquals((-554), fraction0.getProperWhole());
      assertEquals((-554.2857F), fraction0.floatValue(), 0.01F);
      assertEquals((-554), fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((short) (-554), fraction0.shortValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-554L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(713, 4);
      assertNotNull(fraction0);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(178, fraction0.getProperWhole());
      assertEquals(178.25F, fraction0.floatValue(), 0.01F);
      assertEquals(178L, fraction0.longValue());
      assertEquals(713, fraction0.getNumerator());
      assertEquals((short)178, fraction0.shortValue());
      assertEquals((byte) (-78), fraction0.byteValue());
      assertEquals(178, fraction0.intValue());
      assertEquals(178.25, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, int0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1176.229662));
      assertNotNull(fraction0);
      assertEquals((-1176), fraction0.getProperWhole());
      assertEquals((-1176.2296F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1176), fraction0.shortValue());
      assertEquals(1787, fraction0.getProperNumerator());
      assertEquals((-9152243), fraction0.getNumerator());
      assertEquals(7781, fraction0.getDenominator());
      assertEquals((-1176L), fraction0.longValue());
      assertEquals((byte)104, fraction0.byteValue());
      assertEquals((-1176), fraction0.intValue());
      assertEquals((-1176.2296619971726), fraction0.doubleValue(), 0.01);
      
      int int0 = fraction0.getProperWhole();
      assertEquals((-1176), int0);
      assertEquals((-1176), fraction0.getProperWhole());
      assertEquals((-1176.2296F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1176), fraction0.shortValue());
      assertEquals(1787, fraction0.getProperNumerator());
      assertEquals((-9152243), fraction0.getNumerator());
      assertEquals(7781, fraction0.getDenominator());
      assertEquals((-1176L), fraction0.longValue());
      assertEquals((byte)104, fraction0.byteValue());
      assertEquals((-1176), fraction0.intValue());
      assertEquals((-1176.2296619971726), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, int0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1176.229662));
      assertNotNull(fraction0);
      assertEquals((-1176), fraction0.intValue());
      assertEquals((-9152243), fraction0.getNumerator());
      assertEquals((-1176.2296F), fraction0.floatValue(), 0.01F);
      assertEquals((-1176L), fraction0.longValue());
      assertEquals(7781, fraction0.getDenominator());
      assertEquals((-1176.2296619971726), fraction0.doubleValue(), 0.01);
      assertEquals((byte)104, fraction0.byteValue());
      assertEquals(1787, fraction0.getProperNumerator());
      assertEquals((short) (-1176), fraction0.shortValue());
      assertEquals((-1176), fraction0.getProperWhole());
      
      int int0 = fraction0.getNumerator();
      assertEquals((-9152243), int0);
      assertEquals((-1176), fraction0.intValue());
      assertEquals((-9152243), fraction0.getNumerator());
      assertEquals((-1176.2296F), fraction0.floatValue(), 0.01F);
      assertEquals((-1176L), fraction0.longValue());
      assertEquals(7781, fraction0.getDenominator());
      assertEquals((-1176.2296619971726), fraction0.doubleValue(), 0.01);
      assertEquals((byte)104, fraction0.byteValue());
      assertEquals(1787, fraction0.getProperNumerator());
      assertEquals((short) (-1176), fraction0.shortValue());
      assertEquals((-1176), fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("2209345 307/972");
      assertNotNull(fraction0);
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(972, fraction0.getDenominator());
      assertEquals(2209345, fraction0.getProperWhole());
      assertEquals(2209345L, fraction0.longValue());
      assertEquals((byte)65, fraction0.byteValue());
      assertEquals(2209345.3158436213, fraction0.doubleValue(), 0.01);
      assertEquals(2209345, fraction0.intValue());
      assertEquals(2209345.2F, fraction0.floatValue(), 0.01F);
      assertEquals(307, fraction0.getProperNumerator());
      assertEquals((short) (-18879), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.ONE_HALF.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2, fraction1.intValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1, 1);
      assertNotNull(fraction0);
      assertEquals((byte)2, fraction0.byteValue());
      assertEquals((short)2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperWhole());
      assertEquals(2.0, fraction0.doubleValue(), 0.01);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.intValue());
      
      String string0 = fraction0.toProperString();
      assertEquals("2", string0);
      assertNotNull(string0);
      assertEquals((byte)2, fraction0.byteValue());
      assertEquals((short)2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperWhole());
      assertEquals(2.0, fraction0.doubleValue(), 0.01);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-453));
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(453, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(20, fraction1.getDenominator());
      assertEquals((-0.05F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.05), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      
      float float0 = fraction1.floatValue();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-0.05F), float0, 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(20, fraction1.getDenominator());
      assertEquals((-0.05F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.05), fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(20, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      
      double double0 = fraction1.doubleValue();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-0.15), double0, 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(20, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.6666667F, fraction2.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1);
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-1), fraction2.intValue());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1), fraction2.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 6561);
      assertNotNull(fraction0);
      assertEquals(6561, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1.5241579027587258E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-1.5241579E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction((-1100), 1, 1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1101), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1101), fraction1.getProperWhole());
      assertEquals((-1101L), fraction1.longValue());
      assertEquals((short) (-1101), fraction1.shortValue());
      assertEquals((byte) (-77), fraction1.byteValue());
      assertEquals((-1101.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1101.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1101), fraction1.intValue());
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(6561, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-1.5241579027587258E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-1.5241579E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1101), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1101), fraction1.getProperWhole());
      assertEquals((-1101L), fraction1.longValue());
      assertEquals((short) (-1101), fraction1.shortValue());
      assertEquals((byte) (-77), fraction1.byteValue());
      assertEquals((-1101.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1101.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1101), fraction1.intValue());
      assertEquals((-7223662), fraction2.getNumerator());
      assertEquals((-1101), fraction2.getProperWhole());
      assertEquals((-1101L), fraction2.longValue());
      assertEquals((-1101.0001524157904), fraction2.doubleValue(), 0.01);
      assertEquals((-1101), fraction2.intValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((-1101.0001F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-1101), fraction2.shortValue());
      assertEquals(6561, fraction2.getDenominator());
      assertEquals((byte) (-77), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 6561);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals((-1.5241579027587258E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(6561, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-1.5241579E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals((-1.5241579027587258E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(6561, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-1.5241579E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(6561, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-3.0483158055174517E-4), fraction1.doubleValue(), 0.01);
      assertEquals((-3.0483157E-4F), fraction1.floatValue(), 0.01F);
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1);
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getFraction(6561, 1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(6561, fraction1.getNumerator());
      assertEquals(6561, fraction1.getProperWhole());
      assertEquals(6561.0F, fraction1.floatValue(), 0.01F);
      assertEquals(6561L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-95), fraction1.byteValue());
      assertEquals((short)6561, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(6561.0, fraction1.doubleValue(), 0.01);
      assertEquals(6561, fraction1.intValue());
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(6561, fraction1.getNumerator());
      assertEquals(6561, fraction1.getProperWhole());
      assertEquals(6561.0F, fraction1.floatValue(), 0.01F);
      assertEquals(6561L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-95), fraction1.byteValue());
      assertEquals((short)6561, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(6561.0, fraction1.doubleValue(), 0.01);
      assertEquals(6561, fraction1.intValue());
      assertEquals(6562.0F, fraction2.floatValue(), 0.01F);
      assertEquals(6562, fraction2.getNumerator());
      assertEquals(6562, fraction2.intValue());
      assertEquals(6562.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(6562, fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(6562L, fraction2.longValue());
      assertEquals((short)6562, fraction2.shortValue());
      assertEquals((byte) (-94), fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483636), (-1370));
      assertNotNull(fraction0);
      assertEquals(1567506L, fraction0.longValue());
      assertEquals(1073741818, fraction0.getNumerator());
      assertEquals((short) (-5358), fraction0.shortValue());
      assertEquals((byte)18, fraction0.byteValue());
      assertEquals(1567506, fraction0.intValue());
      assertEquals(208, fraction0.getProperNumerator());
      assertEquals(1567506.303649635, fraction0.doubleValue(), 0.01);
      assertEquals(685, fraction0.getDenominator());
      assertEquals(1567506.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1567506, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1567506L, fraction0.longValue());
      assertEquals(1073741818, fraction0.getNumerator());
      assertEquals((short) (-5358), fraction0.shortValue());
      assertEquals((byte)18, fraction0.byteValue());
      assertEquals(1567506, fraction0.intValue());
      assertEquals(208, fraction0.getProperNumerator());
      assertEquals(1567506.303649635, fraction0.doubleValue(), 0.01);
      assertEquals(685, fraction0.getDenominator());
      assertEquals(1567506.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1567506, fraction0.getProperWhole());
      assertEquals(1567506L, fraction1.longValue());
      assertEquals(208, fraction1.getProperNumerator());
      assertEquals(1567506, fraction1.intValue());
      assertEquals((byte)18, fraction1.byteValue());
      assertEquals(1073741818, fraction1.getNumerator());
      assertEquals((short) (-5358), fraction1.shortValue());
      assertEquals(1567506.2F, fraction1.floatValue(), 0.01F);
      assertEquals(1567506, fraction1.getProperWhole());
      assertEquals(1567506.303649635, fraction1.doubleValue(), 0.01);
      assertEquals(685, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1253.40165084542);
      assertNotNull(fraction0);
      assertEquals(8048092, fraction0.getNumerator());
      assertEquals(6421, fraction0.getDenominator());
      assertEquals(1253, fraction0.getProperWhole());
      assertEquals(1253, fraction0.intValue());
      assertEquals(1253.4016F, fraction0.floatValue(), 0.01F);
      assertEquals(2579, fraction0.getProperNumerator());
      assertEquals((short)1253, fraction0.shortValue());
      assertEquals(1253.4016508332036, fraction0.doubleValue(), 0.01);
      assertEquals(1253L, fraction0.longValue());
      assertEquals((byte) (-27), fraction0.byteValue());
      
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1040, 640);
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(640, fraction0.getDenominator());
      assertEquals(1.625F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.625, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1040, fraction0.getNumerator());
      assertEquals(400, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(640, fraction0.getDenominator());
      assertEquals(1.625F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.625, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1040, fraction0.getNumerator());
      assertEquals(400, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1176.229662));
      assertNotNull(fraction0);
      assertEquals((-1176L), fraction0.longValue());
      assertEquals((-1176.2296619971726), fraction0.doubleValue(), 0.01);
      assertEquals(1787, fraction0.getProperNumerator());
      assertEquals(7781, fraction0.getDenominator());
      assertEquals((-1176.2296F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1176), fraction0.shortValue());
      assertEquals((-1176), fraction0.intValue());
      assertEquals((byte)104, fraction0.byteValue());
      assertEquals((-1176), fraction0.getProperWhole());
      assertEquals((-9152243), fraction0.getNumerator());
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertNotNull(fraction0);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975), fraction0.intValue());
      
      Fraction fraction1 = fraction0.pow((-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-2815), fraction1.getNumerator());
      assertEquals((-0.0010251842F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2815, fraction1.getProperNumerator());
      assertEquals(2745848, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction1.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.pow(10);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(9765625, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1.048576E-4, fraction1.doubleValue(), 0.01);
      assertEquals(1024, fraction1.getProperNumerator());
      assertEquals(1.048576E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(1024, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-605.392));
      assertNotNull(fraction0);
      assertEquals((-605L), fraction0.longValue());
      assertEquals(125, fraction0.getDenominator());
      assertEquals((-605.392), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-605), fraction0.shortValue());
      assertEquals(49, fraction0.getProperNumerator());
      assertEquals((-605.392F), fraction0.floatValue(), 0.01F);
      assertEquals((-605), fraction0.intValue());
      assertEquals((byte) (-93), fraction0.byteValue());
      assertEquals((-75674), fraction0.getNumerator());
      assertEquals((-605), fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((-605L), fraction0.longValue());
      assertEquals(125, fraction0.getDenominator());
      assertEquals((-605.392), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-605), fraction0.shortValue());
      assertEquals(49, fraction0.getProperNumerator());
      assertEquals((-605.392F), fraction0.floatValue(), 0.01F);
      assertEquals((-605), fraction0.intValue());
      assertEquals((byte) (-93), fraction0.byteValue());
      assertEquals((-75674), fraction0.getNumerator());
      assertEquals((-605), fraction0.getProperWhole());
      assertEquals(75674, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.0016518222F), fraction1.floatValue(), 0.01F);
      assertEquals((-125), fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.0016518222903507149), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(125, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-1));
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(3, int0);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 10000, 46);
      assertNotNull(fraction0);
      assertEquals(217, fraction0.intValue());
      assertEquals(10000, fraction0.getNumerator());
      assertEquals(217L, fraction0.longValue());
      assertEquals((short)217, fraction0.shortValue());
      assertEquals(217.39131F, fraction0.floatValue(), 0.01F);
      assertEquals(217.3913043478261, fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-39), fraction0.byteValue());
      assertEquals(46, fraction0.getDenominator());
      assertEquals(18, fraction0.getProperNumerator());
      assertEquals(217, fraction0.getProperWhole());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(217, int0);
      assertEquals(217, fraction0.intValue());
      assertEquals(10000, fraction0.getNumerator());
      assertEquals(217L, fraction0.longValue());
      assertEquals((short)217, fraction0.shortValue());
      assertEquals(217.39131F, fraction0.floatValue(), 0.01F);
      assertEquals(217.3913043478261, fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-39), fraction0.byteValue());
      assertEquals(46, fraction0.getDenominator());
      assertEquals(18, fraction0.getProperNumerator());
      assertEquals(217, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 10000, 46);
      assertNotNull(fraction0);
      assertEquals(217.39131F, fraction0.floatValue(), 0.01F);
      assertEquals(46, fraction0.getDenominator());
      assertEquals((short)217, fraction0.shortValue());
      assertEquals(18, fraction0.getProperNumerator());
      assertEquals(217, fraction0.getProperWhole());
      assertEquals(217.3913043478261, fraction0.doubleValue(), 0.01);
      assertEquals(217L, fraction0.longValue());
      assertEquals(10000, fraction0.getNumerator());
      assertEquals((byte) (-39), fraction0.byteValue());
      assertEquals(217, fraction0.intValue());
      
      int int0 = fraction0.getDenominator();
      assertEquals(46, int0);
      assertEquals(217.39131F, fraction0.floatValue(), 0.01F);
      assertEquals(46, fraction0.getDenominator());
      assertEquals((short)217, fraction0.shortValue());
      assertEquals(18, fraction0.getProperNumerator());
      assertEquals(217, fraction0.getProperWhole());
      assertEquals(217.3913043478261, fraction0.doubleValue(), 0.01);
      assertEquals(217L, fraction0.longValue());
      assertEquals(10000, fraction0.getNumerator());
      assertEquals((byte) (-39), fraction0.byteValue());
      assertEquals(217, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      assertNotNull(fraction0);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      
      String string0 = fraction0.toProperString();
      assertEquals("-1", string0);
      assertNotNull(string0);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      String string0 = fraction0.toProperString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      String string0 = fraction0.toProperString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      
      String string0 = fraction0.toProperString();
      assertEquals("-2147483648", string0);
      assertNotNull(string0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      
      String string1 = fraction0.toProperString();
      assertEquals("-2147483648", string1);
      assertNotNull(string1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      String string0 = fraction0.TWO_QUARTERS.toString();
      assertEquals("2/4", string0);
      assertNotNull(string0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      String string1 = fraction0.toProperString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2147483648", string1);
      assertNotNull(string1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-302.2851));
      assertNotNull(fraction0);
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((-3022851), fraction0.getNumerator());
      assertEquals((-302), fraction0.getProperWhole());
      assertEquals((byte) (-46), fraction0.byteValue());
      assertEquals((-302.2851), fraction0.doubleValue(), 0.01);
      assertEquals((-302), fraction0.intValue());
      assertEquals(2851, fraction0.getProperNumerator());
      assertEquals((-302L), fraction0.longValue());
      assertEquals((-302.2851F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-302), fraction0.shortValue());
      
      String string0 = fraction0.toString();
      assertEquals("-3022851/10000", string0);
      assertNotNull(string0);
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((-3022851), fraction0.getNumerator());
      assertEquals((-302), fraction0.getProperWhole());
      assertEquals((byte) (-46), fraction0.byteValue());
      assertEquals((-302.2851), fraction0.doubleValue(), 0.01);
      assertEquals((-302), fraction0.intValue());
      assertEquals(2851, fraction0.getProperNumerator());
      assertEquals((-302L), fraction0.longValue());
      assertEquals((-302.2851F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-302), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, int0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2375));
      assertNotNull(fraction0);
      assertEquals((-2375.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-2375L), fraction0.longValue());
      assertEquals((-2375), fraction0.getProperWhole());
      assertEquals((byte) (-71), fraction0.byteValue());
      assertEquals((-2375), fraction0.getNumerator());
      assertEquals((-2375), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2375.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-2375), fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction((double) (-2375));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2375.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short) (-2375), fraction1.shortValue());
      assertEquals((-2375.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2375), fraction1.getProperWhole());
      assertEquals((byte) (-71), fraction1.byteValue());
      assertEquals((-2375), fraction1.getNumerator());
      assertEquals((-2375), fraction1.intValue());
      assertEquals((-2375L), fraction1.longValue());
      
      int int0 = fraction0.compareTo(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, int0);
      assertEquals((-2375.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-2375L), fraction0.longValue());
      assertEquals((-2375), fraction0.getProperWhole());
      assertEquals((byte) (-71), fraction0.byteValue());
      assertEquals((-2375), fraction0.getNumerator());
      assertEquals((-2375), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2375.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-2375), fraction0.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2375.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short) (-2375), fraction1.shortValue());
      assertEquals((-2375.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2375), fraction1.getProperWhole());
      assertEquals((byte) (-71), fraction1.byteValue());
      assertEquals((-2375), fraction1.getNumerator());
      assertEquals((-2375), fraction1.intValue());
      assertEquals((-2375L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      
      fraction0.hashCode();
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      
      fraction0.hashCode();
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1932.530422);
      assertNotNull(fraction0);
      assertEquals((byte) (-116), fraction0.byteValue());
      assertEquals(3938497, fraction0.getNumerator());
      assertEquals(1932.5304219823356, fraction0.doubleValue(), 0.01);
      assertEquals(1081, fraction0.getProperNumerator());
      assertEquals(1932, fraction0.intValue());
      assertEquals(1932.5304F, fraction0.floatValue(), 0.01F);
      assertEquals(1932, fraction0.getProperWhole());
      assertEquals(1932L, fraction0.longValue());
      assertEquals(2038, fraction0.getDenominator());
      assertEquals((short)1932, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction(1932.530422);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((byte) (-116), fraction1.byteValue());
      assertEquals(3938497, fraction1.getNumerator());
      assertEquals(1081, fraction1.getProperNumerator());
      assertEquals(1932, fraction1.getProperWhole());
      assertEquals(1932.5304219823356, fraction1.doubleValue(), 0.01);
      assertEquals(1932, fraction1.intValue());
      assertEquals(1932.5304F, fraction1.floatValue(), 0.01F);
      assertEquals(2038, fraction1.getDenominator());
      assertEquals(1932L, fraction1.longValue());
      assertEquals((short)1932, fraction1.shortValue());
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(boolean0);
      assertEquals((byte) (-116), fraction0.byteValue());
      assertEquals(3938497, fraction0.getNumerator());
      assertEquals(1932.5304219823356, fraction0.doubleValue(), 0.01);
      assertEquals(1081, fraction0.getProperNumerator());
      assertEquals(1932, fraction0.intValue());
      assertEquals(1932.5304F, fraction0.floatValue(), 0.01F);
      assertEquals(1932, fraction0.getProperWhole());
      assertEquals(1932L, fraction0.longValue());
      assertEquals(2038, fraction0.getDenominator());
      assertEquals((short)1932, fraction0.shortValue());
      assertEquals((byte) (-116), fraction1.byteValue());
      assertEquals(3938497, fraction1.getNumerator());
      assertEquals(1081, fraction1.getProperNumerator());
      assertEquals(1932, fraction1.getProperWhole());
      assertEquals(1932.5304219823356, fraction1.doubleValue(), 0.01);
      assertEquals(1932, fraction1.intValue());
      assertEquals(1932.5304F, fraction1.floatValue(), 0.01F);
      assertEquals(2038, fraction1.getDenominator());
      assertEquals(1932L, fraction1.longValue());
      assertEquals((short)1932, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1932.530422);
      assertNotNull(fraction0);
      assertEquals(1932L, fraction0.longValue());
      assertEquals(1932, fraction0.getProperWhole());
      assertEquals(1932.5304219823356, fraction0.doubleValue(), 0.01);
      assertEquals((short)1932, fraction0.shortValue());
      assertEquals(2038, fraction0.getDenominator());
      assertEquals(1081, fraction0.getProperNumerator());
      assertEquals(1932.5304F, fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-116), fraction0.byteValue());
      assertEquals(3938497, fraction0.getNumerator());
      assertEquals(1932, fraction0.intValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertEquals(1932L, fraction0.longValue());
      assertEquals(1932, fraction0.getProperWhole());
      assertEquals(1932.5304219823356, fraction0.doubleValue(), 0.01);
      assertEquals((short)1932, fraction0.shortValue());
      assertEquals(2038, fraction0.getDenominator());
      assertEquals(1081, fraction0.getProperNumerator());
      assertEquals(1932.5304F, fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-116), fraction0.byteValue());
      assertEquals(3938497, fraction0.getNumerator());
      assertEquals(1932, fraction0.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1932.530422);
      assertNotNull(fraction0);
      assertEquals((short)1932, fraction0.shortValue());
      assertEquals(3938497, fraction0.getNumerator());
      assertEquals(1081, fraction0.getProperNumerator());
      assertEquals(1932.5304219823356, fraction0.doubleValue(), 0.01);
      assertEquals(1932, fraction0.getProperWhole());
      assertEquals(1932L, fraction0.longValue());
      assertEquals(1932, fraction0.intValue());
      assertEquals(1932.5304F, fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-116), fraction0.byteValue());
      assertEquals(2038, fraction0.getDenominator());
      
      boolean boolean0 = fraction0.equals("1/1");
      assertFalse(boolean0);
      assertEquals((short)1932, fraction0.shortValue());
      assertEquals(3938497, fraction0.getNumerator());
      assertEquals(1081, fraction0.getProperNumerator());
      assertEquals(1932.5304219823356, fraction0.doubleValue(), 0.01);
      assertEquals(1932, fraction0.getProperWhole());
      assertEquals(1932L, fraction0.longValue());
      assertEquals(1932, fraction0.intValue());
      assertEquals(1932.5304F, fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-116), fraction0.byteValue());
      assertEquals(2038, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-302.2851));
      assertNotNull(fraction0);
      assertEquals((-302L), fraction0.longValue());
      assertEquals((-302), fraction0.intValue());
      assertEquals((short) (-302), fraction0.shortValue());
      assertEquals((-302.2851), fraction0.doubleValue(), 0.01);
      assertEquals((-302), fraction0.getProperWhole());
      assertEquals(2851, fraction0.getProperNumerator());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((byte) (-46), fraction0.byteValue());
      assertEquals((-3022851), fraction0.getNumerator());
      assertEquals((-302.2851F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals((-302L), fraction0.longValue());
      assertEquals((-302), fraction0.intValue());
      assertEquals((short) (-302), fraction0.shortValue());
      assertEquals((-302.2851), fraction0.doubleValue(), 0.01);
      assertEquals((-302), fraction0.getProperWhole());
      assertEquals(2851, fraction0.getProperNumerator());
      assertEquals(10000, fraction0.getDenominator());
      assertEquals((byte) (-46), fraction0.byteValue());
      assertEquals((-3022851), fraction0.getNumerator());
      assertEquals((-302.2851F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.getReducedFraction(4146, (-2147483645));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1.9306317E-6F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2147483645, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4146, fraction1.getProperNumerator());
      assertEquals((-4146), fraction1.getNumerator());
      assertEquals((-1.9306316998749483E-6), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      
      Fraction fraction2 = fraction1.pow((-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1.9306317E-6F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2147483645, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(4146, fraction1.getProperNumerator());
      assertEquals((-4146), fraction1.getNumerator());
      assertEquals((-1.9306316998749483E-6), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-517965.182103232), fraction2.doubleValue(), 0.01);
      assertEquals((-517965), fraction2.intValue());
      assertEquals((-517965L), fraction2.longValue());
      assertEquals(4146, fraction2.getDenominator());
      assertEquals((-517965.2F), fraction2.floatValue(), 0.01F);
      assertEquals((-517965), fraction2.getProperWhole());
      assertEquals((short)6323, fraction2.shortValue());
      assertEquals((byte) (-77), fraction2.byteValue());
      assertEquals((-2147483645), fraction2.getNumerator());
      assertEquals(755, fraction2.getProperNumerator());
      
      // Undeclared exception!
      try { 
        fraction2.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1932.530422);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1932.5304F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1932.530422);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(2038, fraction0.getDenominator());
      assertEquals(1932.5304F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      Fraction fraction1 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(1.1666666666666667, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.getFraction(629, 2147483638);
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.pow(581);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.pow(0);
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1040, 640);
      Fraction fraction1 = fraction0.abs();
      assertEquals(1.625F, fraction1.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2041.3007058598));
      Fraction fraction1 = fraction0.abs();
      assertEquals((-4337764), fraction0.getNumerator());
      assertEquals(2041.3007F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2147483620));
      Fraction fraction1 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 68);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 10000, 46);
      Fraction fraction1 = fraction0.ONE_FIFTH.reduce();
      assertEquals(217.3913043478261, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483646), (-2147483646));
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.reduce();
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(2147483646, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-85899345 23/25");
      assertEquals((-8.589934592E7), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".$Fa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2147483620));
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((-2147483620), fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2147483619));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-2147483619), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-3412), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483638, 0, 2147483638);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, 955, 155);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(605, (-75), 1357);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1310), 0, (-1310));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(3081, 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1603), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      double double0 = fraction0.doubleValue();
      assertEquals(0.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1932.530422);
      float float0 = fraction0.floatValue();
      assertEquals(2038, fraction0.getDenominator());
      assertEquals(1932.5304F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1603), 411);
      String string0 = fraction0.toProperString();
      assertEquals("-3 370/411", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      String string0 = fraction0.toProperString();
      assertEquals("1/5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
  }
}

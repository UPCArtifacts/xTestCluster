/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:49:30 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertNotNull(fraction1);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      fraction0.hashCode();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotNull(fraction2);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0.6666667F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.getDenominator());
      assertEquals(0.6666666666666666, fraction2.doubleValue(), 0.01);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0.6666667F, fraction2.floatValue(), 0.01F);
      assertEquals(3, fraction2.getDenominator());
      assertEquals(0.6666666666666666, fraction2.doubleValue(), 0.01);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3880), (-3880));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 54);
      assertNotNull(fraction1);
      assertEquals(38, fraction1.getProperNumerator());
      assertEquals((-3.9768216E7F), fraction1.floatValue(), 0.01F);
      assertEquals(54, fraction1.getDenominator());
      assertEquals((-3.97682157037037E7), fraction1.doubleValue(), 0.01);
      assertEquals((short)12137, fraction1.shortValue());
      assertEquals((-39768215L), fraction1.longValue());
      assertEquals((-39768215), fraction1.getProperWhole());
      assertEquals((byte)105, fraction1.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-39768215), fraction1.intValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(38, fraction1.getProperNumerator());
      assertEquals((-3.9768216E7F), fraction1.floatValue(), 0.01F);
      assertEquals(54, fraction1.getDenominator());
      assertEquals((-3.97682157037037E7), fraction1.doubleValue(), 0.01);
      assertEquals((short)12137, fraction1.shortValue());
      assertEquals((-39768215L), fraction1.longValue());
      assertEquals((-39768215), fraction1.getProperWhole());
      assertEquals((byte)105, fraction1.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-39768215), fraction1.intValue());
      assertEquals((-39768214), fraction2.intValue());
      assertEquals((-3.97682147037037E7), fraction2.doubleValue(), 0.01);
      assertEquals((byte)106, fraction2.byteValue());
      assertEquals((-3.9768216E7F), fraction2.floatValue(), 0.01F);
      assertEquals((short)12138, fraction2.shortValue());
      assertEquals((-39768214L), fraction2.longValue());
      assertEquals((-2147483594), fraction2.getNumerator());
      assertEquals(38, fraction2.getProperNumerator());
      assertEquals(54, fraction2.getDenominator());
      assertEquals((-39768214), fraction2.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      
      Fraction fraction3 = fraction2.subtract(fraction0);
      assertNotNull(fraction3);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(38, fraction1.getProperNumerator());
      assertEquals((-3.9768216E7F), fraction1.floatValue(), 0.01F);
      assertEquals(54, fraction1.getDenominator());
      assertEquals((-3.97682157037037E7), fraction1.doubleValue(), 0.01);
      assertEquals((short)12137, fraction1.shortValue());
      assertEquals((-39768215L), fraction1.longValue());
      assertEquals((-39768215), fraction1.getProperWhole());
      assertEquals((byte)105, fraction1.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-39768215), fraction1.intValue());
      assertEquals((-39768214), fraction2.intValue());
      assertEquals((-3.97682147037037E7), fraction2.doubleValue(), 0.01);
      assertEquals((byte)106, fraction2.byteValue());
      assertEquals((-3.9768216E7F), fraction2.floatValue(), 0.01F);
      assertEquals((short)12138, fraction2.shortValue());
      assertEquals((-39768214L), fraction2.longValue());
      assertEquals((-2147483594), fraction2.getNumerator());
      assertEquals(38, fraction2.getProperNumerator());
      assertEquals(54, fraction2.getDenominator());
      assertEquals((-39768214), fraction2.getProperWhole());
      assertEquals((-39768215), fraction3.intValue());
      assertEquals((-3.97682157037037E7), fraction3.doubleValue(), 0.01);
      assertEquals((short)12137, fraction3.shortValue());
      assertEquals(38, fraction3.getProperNumerator());
      assertEquals((-39768215L), fraction3.longValue());
      assertEquals((byte)105, fraction3.byteValue());
      assertEquals((-3.9768216E7F), fraction3.floatValue(), 0.01F);
      assertEquals(54, fraction3.getDenominator());
      assertEquals((-39768215), fraction3.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction3.getNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertTrue(fraction3.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.TWO_QUARTERS.invert();
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2L, fraction1.longValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.reduce();
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2L, fraction1.longValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction2.getProperWhole());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(2.0, fraction2.doubleValue(), 0.01);
      assertEquals(2.0F, fraction2.floatValue(), 0.01F);
      assertEquals(2L, fraction2.longValue());
      assertEquals((short)2, fraction2.shortValue());
      assertEquals((byte)2, fraction2.byteValue());
      assertEquals(2, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/)-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" }");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" }\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".se%ZQ+w61RH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3880), (-3880));
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotNull(fraction2);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals(2L, fraction1.longValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.intValue());
      
      Fraction fraction1 = fraction0.reduce();
      assertNotNull(fraction1);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880L), fraction1.longValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.pow(51);
      assertNotNull(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.intValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.intValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)3880, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3880, fraction1.intValue());
      assertEquals(3880.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)40, fraction1.byteValue());
      assertEquals(3880.0F, fraction1.floatValue(), 0.01F);
      assertEquals(3880, fraction1.getNumerator());
      assertEquals(3880L, fraction1.longValue());
      assertEquals(3880, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(16, 16);
      assertNotNull(fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(16, fraction0.getDenominator());
      assertEquals(16, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(16, fraction0.getDenominator());
      assertEquals(16, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((-16), fraction1.getNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(16, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getReducedFraction((-1), (-1790));
      assertNotNull(fraction1);
      assertEquals(5.586592E-4F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5.586592178770949E-4, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1790, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(5.586592E-4F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5.586592178770949E-4, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1790, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((-388), fraction2.getNumerator());
      assertEquals(30, fraction2.getProperNumerator());
      assertEquals((-2), fraction2.intValue());
      assertEquals((-2.1675978F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-2), fraction2.shortValue());
      assertEquals((-2L), fraction2.longValue());
      assertEquals((-2.1675977653631286), fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-2), fraction2.byteValue());
      assertEquals(179, fraction2.getDenominator());
      assertEquals((-2), fraction2.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2323, 2323);
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      
      long long0 = fraction0.longValue();
      assertEquals(1L, long0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction1);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotNull(fraction2);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.2), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      
      Fraction fraction3 = fraction2.subtract(fraction1);
      assertNotNull(fraction3);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.2), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((short) (-1), fraction3.shortValue());
      assertEquals((byte) (-1), fraction3.byteValue());
      assertEquals((-1), fraction3.intValue());
      assertEquals((-1), fraction3.getNumerator());
      assertEquals((-1L), fraction3.longValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals((-1.0F), fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals((-1.0), fraction3.doubleValue(), 0.01);
      assertEquals((-1), fraction3.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      
      long long0 = fraction3.longValue();
      assertEquals((-1L), long0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.2), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((short) (-1), fraction3.shortValue());
      assertEquals((byte) (-1), fraction3.byteValue());
      assertEquals((-1), fraction3.intValue());
      assertEquals((-1), fraction3.getNumerator());
      assertEquals((-1L), fraction3.longValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals((-1.0F), fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals((-1.0), fraction3.doubleValue(), 0.01);
      assertEquals((-1), fraction3.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      assertNotNull(fraction0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.pow((-1));
      assertNotNull(fraction1);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(1.6666666666666667, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.intValue();
      assertEquals(1, int0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(1.6666666666666667, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-449), (-1));
      assertNotNull(fraction0);
      assertEquals(449.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)449, fraction0.shortValue());
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals(449.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(449, fraction0.getProperWhole());
      assertEquals(449L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(449, fraction0.intValue());
      assertEquals(449, fraction0.getNumerator());
      
      int int0 = fraction0.getProperWhole();
      assertEquals(449, int0);
      assertEquals(449.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)449, fraction0.shortValue());
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals(449.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(449, fraction0.getProperWhole());
      assertEquals(449L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(449, fraction0.intValue());
      assertEquals(449, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-419), 327);
      assertNotNull(fraction0);
      assertEquals((-1.2813456F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-419), fraction0.getNumerator());
      assertEquals(92, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(327, fraction0.getDenominator());
      assertEquals((-1.2813455657492354), fraction0.doubleValue(), 0.01);
      assertEquals((-1L), fraction0.longValue());
      
      int int0 = fraction0.getProperWhole();
      assertEquals((-1), int0);
      assertEquals((-1.2813456F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-419), fraction0.getNumerator());
      assertEquals(92, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(327, fraction0.getDenominator());
      assertEquals((-1.2813455657492354), fraction0.doubleValue(), 0.01);
      assertEquals((-1L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(3, int0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      
      int int0 = fraction0.getNumerator();
      assertEquals((-3880), int0);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1");
      assertNotNull(fraction0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0/1");
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-85899345 23/25");
      assertNotNull(fraction0);
      assertEquals(23, fraction0.getProperNumerator());
      assertEquals((-85899345), fraction0.getProperWhole());
      assertEquals((byte) (-81), fraction0.byteValue());
      assertEquals((-8.589934592E7), fraction0.doubleValue(), 0.01);
      assertEquals((short)18351, fraction0.shortValue());
      assertEquals((-85899345), fraction0.intValue());
      assertEquals((-85899345L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-8.5899344E7F), fraction0.floatValue(), 0.01F);
      assertEquals(25, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1/2");
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("164 2/15");
      assertNotNull(fraction0);
      assertEquals((byte) (-92), fraction0.byteValue());
      assertEquals(2462, fraction0.getNumerator());
      assertEquals(164.13333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(164, fraction0.getProperWhole());
      assertEquals(164, fraction0.intValue());
      assertEquals(164.13333F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(164L, fraction0.longValue());
      assertEquals((short)164, fraction0.shortValue());
      assertEquals(15, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 265, 1630);
      assertNotNull(fraction0);
      assertEquals((-1.1625766871165644), fraction0.doubleValue(), 0.01);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1895), fraction0.getNumerator());
      assertEquals(1630, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals(265, fraction0.getProperNumerator());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.1625767F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.intValue());
      assertEquals((byte) (-1), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-720.0));
      assertNotNull(fraction0);
      assertEquals((-720L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-720), fraction0.getProperWhole());
      assertEquals((-720), fraction0.intValue());
      assertEquals((byte)48, fraction0.byteValue());
      assertEquals((-720), fraction0.getNumerator());
      assertEquals((short) (-720), fraction0.shortValue());
      assertEquals((-720.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-720.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      
      float float0 = fraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction1);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotNull(fraction2);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((-0.2), fraction2.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      
      float float0 = fraction2.floatValue();
      assertEquals((-0.2F), float0, 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((-0.2), fraction2.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-5612), 6561, 6561);
      assertNotNull(fraction0);
      assertEquals((-5613.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-5613), fraction0.intValue());
      assertEquals((-5613.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)19, fraction0.byteValue());
      assertEquals((-5613), fraction0.getProperWhole());
      assertEquals((-36826893), fraction0.getNumerator());
      assertEquals(6561, fraction0.getDenominator());
      assertEquals((short) (-5613), fraction0.shortValue());
      assertEquals((-5613L), fraction0.longValue());
      
      double double0 = fraction0.doubleValue();
      assertEquals((-5613.0), double0, 0.01);
      assertEquals((-5613.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-5613), fraction0.intValue());
      assertEquals((-5613.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)19, fraction0.byteValue());
      assertEquals((-5613), fraction0.getProperWhole());
      assertEquals((-36826893), fraction0.getNumerator());
      assertEquals(6561, fraction0.getDenominator());
      assertEquals((short) (-5613), fraction0.shortValue());
      assertEquals((-5613L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction1);
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertNotNull(fraction2);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divideBy(fraction0);
      assertNotNull(fraction1);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(4850, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((-2.061855670103093E-4), fraction1.doubleValue(), 0.01);
      assertEquals((-2.0618556E-4F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction1);
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertNotNull(fraction2);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-7760), fraction2.intValue());
      assertEquals((-7760), fraction2.getNumerator());
      assertEquals((-7760), fraction2.getProperWhole());
      assertEquals((short) (-7760), fraction2.shortValue());
      assertEquals((-7760.0), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-7760L), fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((byte) (-80), fraction2.byteValue());
      assertEquals((-7760.0F), fraction2.floatValue(), 0.01F);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 46);
      assertNotNull(fraction0);
      assertEquals(6, fraction0.getProperNumerator());
      assertEquals((-4.6684428E7F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-22795), fraction0.shortValue());
      assertEquals((-46684427L), fraction0.longValue());
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-46684427), fraction0.intValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(46, fraction0.getDenominator());
      assertEquals((-4.668442713043478E7), fraction0.doubleValue(), 0.01);
      assertEquals((-46684427), fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(6, fraction0.getProperNumerator());
      assertEquals((-4.6684428E7F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-22795), fraction0.shortValue());
      assertEquals((-46684427L), fraction0.longValue());
      assertEquals((byte) (-11), fraction0.byteValue());
      assertEquals((-46684427), fraction0.intValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(46, fraction0.getDenominator());
      assertEquals((-4.668442713043478E7), fraction0.doubleValue(), 0.01);
      assertEquals((-46684427), fraction0.getProperWhole());
      assertEquals((-93368854), fraction1.getProperWhole());
      assertEquals((-9.3368856E7F), fraction1.floatValue(), 0.01F);
      assertEquals(6, fraction1.getProperNumerator());
      assertEquals((-93368854), fraction1.intValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals(23, fraction1.getDenominator());
      assertEquals((-9.336885426086956E7), fraction1.doubleValue(), 0.01);
      assertEquals((-93368854L), fraction1.longValue());
      assertEquals((short)19946, fraction1.shortValue());
      assertEquals((byte) (-22), fraction1.byteValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483646, (-1662));
      assertNotNull(fraction0);
      assertEquals((short)18612, fraction0.shortValue());
      assertEquals((-1292108.1F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-76), fraction0.byteValue());
      assertEquals((-1292108), fraction0.intValue());
      assertEquals(150, fraction0.getProperNumerator());
      assertEquals((-1292108.0902527075), fraction0.doubleValue(), 0.01);
      assertEquals(1662, fraction0.getDenominator());
      assertEquals((-1292108L), fraction0.longValue());
      assertEquals((-2147483646), fraction0.getNumerator());
      assertEquals((-1292108), fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals((short)18612, fraction0.shortValue());
      assertEquals((-1292108.1F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-76), fraction0.byteValue());
      assertEquals((-1292108), fraction0.intValue());
      assertEquals(150, fraction0.getProperNumerator());
      assertEquals((-1292108.0902527075), fraction0.doubleValue(), 0.01);
      assertEquals(1662, fraction0.getDenominator());
      assertEquals((-1292108L), fraction0.longValue());
      assertEquals((-2147483646), fraction0.getNumerator());
      assertEquals((-1292108), fraction0.getProperWhole());
      assertEquals(1292108L, fraction1.longValue());
      assertEquals(1292108.0902527075, fraction1.doubleValue(), 0.01);
      assertEquals(1662, fraction1.getDenominator());
      assertEquals((short) (-18612), fraction1.shortValue());
      assertEquals(1292108, fraction1.intValue());
      assertEquals(1292108.1F, fraction1.floatValue(), 0.01F);
      assertEquals(2147483646, fraction1.getNumerator());
      assertEquals((byte)76, fraction1.byteValue());
      assertEquals(150, fraction1.getProperNumerator());
      assertEquals(1292108, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 3032);
      assertNotNull(fraction0);
      assertEquals(3032, fraction0.intValue());
      assertEquals(3032, fraction0.getNumerator());
      assertEquals(3032.0, fraction0.doubleValue(), 0.01);
      assertEquals(3032.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3032, fraction0.getProperWhole());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(3032L, fraction0.longValue());
      assertEquals((short)3032, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(3032, fraction0.intValue());
      assertEquals(3032, fraction0.getNumerator());
      assertEquals(3032.0, fraction0.doubleValue(), 0.01);
      assertEquals(3032.0F, fraction0.floatValue(), 0.01F);
      assertEquals(3032, fraction0.getProperWhole());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(3032L, fraction0.longValue());
      assertEquals((short)3032, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3032L, fraction1.longValue());
      assertEquals(3032, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3032, fraction1.getProperWhole());
      assertEquals(3032.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)3032, fraction1.shortValue());
      assertEquals(3032.0, fraction1.doubleValue(), 0.01);
      assertEquals(3032, fraction1.intValue());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 35);
      assertNotNull(fraction0);
      assertEquals((byte)125, fraction0.byteValue());
      assertEquals(35, fraction0.getDenominator());
      assertEquals((-6.1356675657142855E7), fraction0.doubleValue(), 0.01);
      assertEquals((-61356675L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-61356675), fraction0.intValue());
      assertEquals((-6.1356676E7F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-14979), fraction0.shortValue());
      assertEquals(23, fraction0.getProperNumerator());
      assertEquals((-61356675), fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 31);
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((-69273666), fraction0.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(31, fraction0.getDenominator());
      assertEquals((-69273666L), fraction0.longValue());
      assertEquals((short) (-2114), fraction0.shortValue());
      assertEquals((-6.9273664E7F), fraction0.floatValue(), 0.01F);
      assertEquals((-6.927366606451613E7), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-66), fraction0.byteValue());
      assertEquals((-69273666), fraction0.intValue());
      
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.6666666666666667, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.pow((-225));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.pow(1);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = fraction0.negate();
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals((-0.5), fraction1.doubleValue(), 0.01);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 81);
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(27, 27, 27);
      assertNotNull(fraction0);
      assertEquals((short)28, fraction0.shortValue());
      assertEquals(28, fraction0.intValue());
      assertEquals(756, fraction0.getNumerator());
      assertEquals(28, fraction0.getProperWhole());
      assertEquals(28L, fraction0.longValue());
      assertEquals(28.0F, fraction0.floatValue(), 0.01F);
      assertEquals(27, fraction0.getDenominator());
      assertEquals((byte)28, fraction0.byteValue());
      assertEquals(28.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction0.getDenominator();
      assertEquals(5, int0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 3032);
      assertNotNull(fraction0);
      assertEquals(3032, fraction0.getProperWhole());
      assertEquals(3032, fraction0.getNumerator());
      assertEquals(3032.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3032.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)3032, fraction0.shortValue());
      assertEquals(3032, fraction0.intValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(3032L, fraction0.longValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals("3032", string0);
      assertEquals(3032, fraction0.getProperWhole());
      assertEquals(3032, fraction0.getNumerator());
      assertEquals(3032.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(3032.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)3032, fraction0.shortValue());
      assertEquals(3032, fraction0.intValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(3032L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.invert();
      assertNotNull(fraction1);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(4.1718815185648727E-4, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2397, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(4.1718816E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.toProperString();
      assertNotNull(string0);
      assertEquals("1/2397", string0);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(4.1718815185648727E-4, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2397, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(4.1718816E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2512, (-2362));
      assertNotNull(fraction0);
      assertEquals(1181, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0635055F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1.0635055038103303), fraction0.doubleValue(), 0.01);
      assertEquals(75, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1256), fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((short) (-1), fraction0.shortValue());
      
      String string0 = fraction0.toProperString();
      assertNotNull(string0);
      assertEquals("-1 75/1181", string0);
      assertEquals(1181, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0635055F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1.0635055038103303), fraction0.doubleValue(), 0.01);
      assertEquals(75, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((-1256), fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((short) (-1), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      
      double double0 = (-2130.094437664386);
      Fraction fraction1 = Fraction.getFraction((-2130.094437664386));
      assertNotNull(fraction1);
      assertEquals((byte) (-82), fraction1.byteValue());
      assertEquals(309, fraction1.getProperNumerator());
      assertEquals((-2130L), fraction1.longValue());
      assertEquals((-2130.0945F), fraction1.floatValue(), 0.01F);
      assertEquals((short) (-2130), fraction1.shortValue());
      assertEquals((-2130.094437652812), fraction1.doubleValue(), 0.01);
      assertEquals((-2130), fraction1.getProperWhole());
      assertEquals((-6969669), fraction1.getNumerator());
      assertEquals((-2130), fraction1.intValue());
      assertEquals(3272, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction0.ONE.toProperString();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1));
      assertNotNull(fraction0);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      
      String string0 = fraction0.ZERO.toProperString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      
      String string0 = fraction0.ONE.toProperString();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction1);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.FOUR_FIFTHS.toString();
      assertNotNull(string0);
      assertEquals("4/5", string0);
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals("2397/1", string0);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483646, 3071);
      assertNotNull(fraction0);
      assertEquals(699278.2956691631, fraction0.doubleValue(), 0.01);
      assertEquals(908, fraction0.getProperNumerator());
      assertEquals(699278.3F, fraction0.floatValue(), 0.01F);
      assertEquals(699278L, fraction0.longValue());
      assertEquals(3071, fraction0.getDenominator());
      assertEquals(699278, fraction0.intValue());
      assertEquals((short) (-21618), fraction0.shortValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(699278, fraction0.getProperWhole());
      assertEquals((byte) (-114), fraction0.byteValue());
      
      fraction0.hashCode();
      assertEquals(699278.2956691631, fraction0.doubleValue(), 0.01);
      assertEquals(908, fraction0.getProperNumerator());
      assertEquals(699278.3F, fraction0.floatValue(), 0.01F);
      assertEquals(699278L, fraction0.longValue());
      assertEquals(3071, fraction0.getDenominator());
      assertEquals(699278, fraction0.intValue());
      assertEquals((short) (-21618), fraction0.shortValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(699278, fraction0.getProperWhole());
      assertEquals((byte) (-114), fraction0.byteValue());
      
      fraction0.hashCode();
      assertEquals(699278.2956691631, fraction0.doubleValue(), 0.01);
      assertEquals(908, fraction0.getProperNumerator());
      assertEquals(699278.3F, fraction0.floatValue(), 0.01F);
      assertEquals(699278L, fraction0.longValue());
      assertEquals(3071, fraction0.getDenominator());
      assertEquals(699278, fraction0.intValue());
      assertEquals((short) (-21618), fraction0.shortValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(699278, fraction0.getProperWhole());
      assertEquals((byte) (-114), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotNull(fraction1);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertNotNull(fraction0);
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      boolean boolean0 = fraction0.equals("-1");
      assertFalse(boolean0);
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.getReducedFraction((-2539), (-2539));
      assertNotNull(fraction1);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertNotNull(fraction2);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(132, (-2397));
      assertNotNull(fraction0);
      assertEquals((-0.055068836F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-0.05506883604505632), fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2397, fraction0.getDenominator());
      assertEquals(132, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-132), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.getReducedFraction((-2397), (-2147483646));
      assertNotNull(fraction1);
      assertEquals(1.116190106716184E-6, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(715827882, fraction1.getDenominator());
      assertEquals(1.1161901E-6F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(799, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(799, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483630, 1115);
      assertNotNull(fraction0);
      assertEquals(1925994, fraction0.getProperWhole());
      assertEquals(1925994.2869955157, fraction0.doubleValue(), 0.01);
      assertEquals(1115, fraction0.getDenominator());
      assertEquals((short)25450, fraction0.shortValue());
      assertEquals((byte)106, fraction0.byteValue());
      assertEquals(320, fraction0.getProperNumerator());
      assertEquals(2147483630, fraction0.getNumerator());
      assertEquals(1925994L, fraction0.longValue());
      assertEquals(1925994, fraction0.intValue());
      assertEquals(1925994.2F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(1925994, fraction0.getProperWhole());
      assertEquals(1925994.2869955157, fraction0.doubleValue(), 0.01);
      assertEquals(1115, fraction0.getDenominator());
      assertEquals((short)25450, fraction0.shortValue());
      assertEquals((byte)106, fraction0.byteValue());
      assertEquals(320, fraction0.getProperNumerator());
      assertEquals(2147483630, fraction0.getNumerator());
      assertEquals(1925994L, fraction0.longValue());
      assertEquals(1925994, fraction0.intValue());
      assertEquals(1925994.2F, fraction0.floatValue(), 0.01F);
      assertEquals((short) (-14636), fraction1.shortValue());
      assertEquals(3851988, fraction1.intValue());
      assertEquals(3851988.5739910314, fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-44), fraction1.byteValue());
      assertEquals(128, fraction1.getProperNumerator());
      assertEquals(3851988L, fraction1.longValue());
      assertEquals(223, fraction1.getDenominator());
      assertEquals(858993452, fraction1.getNumerator());
      assertEquals(3851988, fraction1.getProperWhole());
      assertEquals(3851988.8F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.reduce();
      assertNotNull(fraction2);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertNotNull(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-0.5), fraction1.doubleValue(), 0.01);
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3880), (-3880));
      assertNotNull(fraction0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 54);
      assertNotNull(fraction1);
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((byte)105, fraction1.byteValue());
      assertEquals((-39768215), fraction1.getProperWhole());
      assertEquals((-39768215L), fraction1.longValue());
      assertEquals(54, fraction1.getDenominator());
      assertEquals((short)12137, fraction1.shortValue());
      assertEquals((-3.97682157037037E7), fraction1.doubleValue(), 0.01);
      assertEquals((-3.9768216E7F), fraction1.floatValue(), 0.01F);
      assertEquals((-39768215), fraction1.intValue());
      assertEquals(38, fraction1.getProperNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNotNull(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 2147483646);
      assertNotNull(fraction1);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(2147483646, fraction1.getDenominator());
      assertEquals((-1.0000000009313226), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2462), (-2462));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.getFraction((-2462), 2147483646);
      assertNotNull(fraction1);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-1.1464580904193764E-6), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(2462, fraction1.getProperNumerator());
      assertEquals(2147483646, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-1.1464581E-6F), fraction1.floatValue(), 0.01F);
      assertEquals((-2462), fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-1.1464580904193764E-6), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(2462, fraction1.getProperNumerator());
      assertEquals(2147483646, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-1.1464581E-6F), fraction1.floatValue(), 0.01F);
      assertEquals((-2462), fraction1.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(2147483646, fraction2.getDenominator());
      assertEquals(0.9999988535419095, fraction2.doubleValue(), 0.01);
      assertEquals(2147481184, fraction2.getProperNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(2147481184, fraction2.getNumerator());
      assertEquals(0.99999887F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      
      // Undeclared exception!
      try { 
        fraction0.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.intValue());
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 54);
      assertNotNull(fraction1);
      assertEquals((-3.9768216E7F), fraction1.floatValue(), 0.01F);
      assertEquals(38, fraction1.getProperNumerator());
      assertEquals((-39768215L), fraction1.longValue());
      assertEquals((-3.97682157037037E7), fraction1.doubleValue(), 0.01);
      assertEquals((byte)105, fraction1.byteValue());
      assertEquals((short)12137, fraction1.shortValue());
      assertEquals((-39768215), fraction1.intValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals(54, fraction1.getDenominator());
      assertEquals((-39768215), fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 11);
      assertNotNull(fraction0);
      assertEquals((short)5958, fraction0.shortValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((byte)70, fraction0.byteValue());
      assertEquals(11, fraction0.getDenominator());
      assertEquals((-1.95225792E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-195225786L), fraction0.longValue());
      assertEquals((-195225786), fraction0.intValue());
      assertEquals((-1.952257861818182E8), fraction0.doubleValue(), 0.01);
      assertEquals((-195225786), fraction0.getProperWhole());
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.pow(2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1));
      Fraction fraction1 = fraction0.pow((-1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((-1), fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.pow(0);
      assertEquals(1, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 46);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 54);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.reduce();
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-806));
      Fraction fraction1 = fraction0.reduce();
      assertEquals(806, fraction0.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("';z\",v.Q`hfTm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((double) Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2539));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(2147483641, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.pow(Integer.MIN_VALUE);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483646, 2147483646, 2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, 16, 16);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(10, (-1), 10);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(67, 877, (-449));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("28 71/290");
      assertEquals(28.244827F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-375), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      double double0 = fraction0.doubleValue();
      assertEquals(2397.0, double0, 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      int int0 = fraction0.getProperNumerator();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(9, 9);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      int int0 = fraction0.intValue();
      assertEquals((-3880), int0);
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:58:23 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_HALF;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, int0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2397));
      assertEquals((short) (-2397), fraction0.shortValue());
      assertEquals((-2397), fraction0.getNumerator());
      assertEquals((byte) (-93), fraction0.byteValue());
      assertEquals((-2397), fraction0.intValue());
      assertEquals((-2397.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2397.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2397L), fraction0.longValue());
      assertEquals((-2397), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      fraction0.hashCode();
      assertEquals((short) (-2397), fraction0.shortValue());
      assertEquals((-2397), fraction0.getNumerator());
      assertEquals((byte) (-93), fraction0.byteValue());
      assertEquals((-2397), fraction0.intValue());
      assertEquals((-2397.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2397.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2397L), fraction0.longValue());
      assertEquals((-2397), fraction0.getProperWhole());
      
      fraction0.hashCode();
      assertEquals((short) (-2397), fraction0.shortValue());
      assertEquals((-2397), fraction0.getNumerator());
      assertEquals((byte) (-93), fraction0.byteValue());
      assertEquals((-2397), fraction0.intValue());
      assertEquals((-2397.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2397.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2397L), fraction0.longValue());
      assertEquals((-2397), fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(2377, Integer.MAX_VALUE);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1.106876880445926E-6, fraction1.doubleValue(), 0.01);
      assertEquals(1.1068769E-6F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(2377, fraction1.getProperNumerator());
      assertEquals(2377, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".C{oq|sHz/`$u/]%)R");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("5/5");
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1409), 3);
      assertEquals((-469), fraction0.intValue());
      assertEquals((-469), fraction0.getProperWhole());
      assertEquals((-469L), fraction0.longValue());
      assertEquals((short) (-469), fraction0.shortValue());
      assertEquals((-469.6666666666667), fraction0.doubleValue(), 0.01);
      assertEquals((-1409), fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)43, fraction0.byteValue());
      assertEquals((-469.66666F), fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-469), fraction0.intValue());
      assertEquals((-469), fraction0.getProperWhole());
      assertEquals((-469L), fraction0.longValue());
      assertEquals((short) (-469), fraction0.shortValue());
      assertEquals((-469.6666666666667), fraction0.doubleValue(), 0.01);
      assertEquals((-1409), fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)43, fraction0.byteValue());
      assertEquals((-469.66666F), fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(470.06668F, fraction1.floatValue(), 0.01F);
      assertEquals(7051, fraction1.getNumerator());
      assertEquals(15, fraction1.getDenominator());
      assertEquals(470, fraction1.intValue());
      assertEquals(470, fraction1.getProperWhole());
      assertEquals(470.06666666666666, fraction1.doubleValue(), 0.01);
      assertEquals(470L, fraction1.longValue());
      assertEquals((byte) (-42), fraction1.byteValue());
      assertEquals((short)470, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1), fraction1.intValue());
      assertEquals(2603, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.pow(41);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1), fraction1.intValue());
      assertEquals(2603, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((-1), fraction2.intValue());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals((-1L), fraction2.longValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2623.243));
      assertEquals((-2623), fraction0.intValue());
      assertEquals((-2623243), fraction0.getNumerator());
      assertEquals((-2623.243F), fraction0.floatValue(), 0.01F);
      assertEquals((-2623.243), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-2623), fraction0.shortValue());
      assertEquals(243, fraction0.getProperNumerator());
      assertEquals((-2623L), fraction0.longValue());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals((-2623), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2623), fraction0.intValue());
      assertEquals((-2623243), fraction0.getNumerator());
      assertEquals((-2623.243F), fraction0.floatValue(), 0.01F);
      assertEquals((-2623.243), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-2623), fraction0.shortValue());
      assertEquals(243, fraction0.getProperNumerator());
      assertEquals((-2623L), fraction0.longValue());
      assertEquals(1000, fraction0.getDenominator());
      assertEquals((byte) (-63), fraction0.byteValue());
      assertEquals((-2623), fraction0.getProperWhole());
      assertEquals((byte)63, fraction1.byteValue());
      assertEquals(2623.243, fraction1.doubleValue(), 0.01);
      assertEquals(1000, fraction1.getDenominator());
      assertEquals(2623L, fraction1.longValue());
      assertEquals((short)2623, fraction1.shortValue());
      assertEquals(243, fraction1.getProperNumerator());
      assertEquals(2623243, fraction1.getNumerator());
      assertEquals(2623.243F, fraction1.floatValue(), 0.01F);
      assertEquals(2623, fraction1.intValue());
      assertEquals(2623, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2335, 47);
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49L, fraction0.longValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49, fraction0.intValue());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(2335, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49L, fraction0.longValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49, fraction0.intValue());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(49, fraction0.getProperWhole());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(49L, fraction0.longValue());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals(49, fraction0.intValue());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-29.80851063829787), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-29), fraction2.shortValue());
      assertEquals((-29L), fraction2.longValue());
      assertEquals((byte) (-29), fraction2.byteValue());
      assertEquals((-29), fraction2.intValue());
      assertEquals((-29.80851F), fraction2.floatValue(), 0.01F);
      assertEquals((-29), fraction2.getProperWhole());
      assertEquals(38, fraction2.getProperNumerator());
      assertEquals((-1401), fraction2.getNumerator());
      assertEquals(47, fraction2.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(704, (-2147483623));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(704, fraction0.getProperNumerator());
      assertEquals((-3.2782555E-7F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-3.2782555008104014E-7), fraction0.doubleValue(), 0.01);
      assertEquals((-704), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2147483623, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ONE.multiplyBy(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(704, fraction0.getProperNumerator());
      assertEquals((-3.2782555E-7F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-3.2782555008104014E-7), fraction0.doubleValue(), 0.01);
      assertEquals((-704), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2147483623, fraction0.getDenominator());
      assertEquals((-704), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(704, fraction1.getProperNumerator());
      assertEquals((-3.2782555008104014E-7), fraction1.doubleValue(), 0.01);
      assertEquals((-3.2782555E-7F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2147483623, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-2397));
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2397, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(1L, long0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2397, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1923));
      assertEquals((-1923.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1923), fraction0.intValue());
      assertEquals((-1923.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1923L), fraction0.longValue());
      assertEquals((short) (-1923), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1923), fraction0.getNumerator());
      assertEquals((byte)125, fraction0.byteValue());
      assertEquals((-1923), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals((-1923L), long0);
      assertEquals((-1923.0), fraction0.doubleValue(), 0.01);
      assertEquals((-1923), fraction0.intValue());
      assertEquals((-1923.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1923L), fraction0.longValue());
      assertEquals((short) (-1923), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1923), fraction0.getNumerator());
      assertEquals((byte)125, fraction0.byteValue());
      assertEquals((-1923), fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(8624, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow((-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals(13711293, fraction1.getDenominator());
      assertEquals(8624, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-6.28970586508508E-4), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-6.2897056E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-8624), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.invert();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals(13711293, fraction1.getDenominator());
      assertEquals(8624, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-6.28970586508508E-4), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-6.2897056E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-8624), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-1589), fraction2.intValue());
      assertEquals((-1589.8994666048238), fraction2.doubleValue(), 0.01);
      assertEquals((-1589.8994F), fraction2.floatValue(), 0.01F);
      assertEquals((-13711293), fraction2.getNumerator());
      assertEquals(8624, fraction2.getDenominator());
      assertEquals((-1589L), fraction2.longValue());
      assertEquals((-1589), fraction2.getProperWhole());
      assertEquals(7757, fraction2.getProperNumerator());
      assertEquals((byte) (-53), fraction2.byteValue());
      assertEquals((short) (-1589), fraction2.shortValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      
      Fraction fraction3 = fraction2.reduce();
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals(13711293, fraction1.getDenominator());
      assertEquals(8624, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-6.28970586508508E-4), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-6.2897056E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-8624), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-1589), fraction2.intValue());
      assertEquals((-1589.8994666048238), fraction2.doubleValue(), 0.01);
      assertEquals((-1589.8994F), fraction2.floatValue(), 0.01F);
      assertEquals((-13711293), fraction2.getNumerator());
      assertEquals(8624, fraction2.getDenominator());
      assertEquals((-1589L), fraction2.longValue());
      assertEquals((-1589), fraction2.getProperWhole());
      assertEquals(7757, fraction2.getProperNumerator());
      assertEquals((byte) (-53), fraction2.byteValue());
      assertEquals((short) (-1589), fraction2.shortValue());
      assertEquals((-13711293), fraction3.getNumerator());
      assertEquals((byte) (-53), fraction3.byteValue());
      assertEquals((-1589.8994666048238), fraction3.doubleValue(), 0.01);
      assertEquals((-1589L), fraction3.longValue());
      assertEquals((short) (-1589), fraction3.shortValue());
      assertEquals(8624, fraction3.getDenominator());
      assertEquals((-1589), fraction3.intValue());
      assertEquals(7757, fraction3.getProperNumerator());
      assertEquals((-1589.8994F), fraction3.floatValue(), 0.01F);
      assertEquals((-1589), fraction3.getProperWhole());
      assertNotNull(fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction3);
      assertSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals(1589, fraction1.getProperWhole());
      assertEquals(1589.8994F, fraction1.floatValue(), 0.01F);
      assertEquals(13711293, fraction1.getNumerator());
      assertEquals(7757, fraction1.getProperNumerator());
      assertEquals(1589, fraction1.intValue());
      assertEquals(8624, fraction1.getDenominator());
      assertEquals(1589L, fraction1.longValue());
      assertEquals((byte)53, fraction1.byteValue());
      assertEquals((short)1589, fraction1.shortValue());
      assertEquals(1589.8994666048238, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.intValue();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1589, int0);
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals(1589, fraction1.getProperWhole());
      assertEquals(1589.8994F, fraction1.floatValue(), 0.01F);
      assertEquals(13711293, fraction1.getNumerator());
      assertEquals(7757, fraction1.getProperNumerator());
      assertEquals(1589, fraction1.intValue());
      assertEquals(8624, fraction1.getDenominator());
      assertEquals(1589L, fraction1.longValue());
      assertEquals((byte)53, fraction1.byteValue());
      assertEquals((short)1589, fraction1.shortValue());
      assertEquals(1589.8994666048238, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 6);
      assertEquals((short) (-21845), fraction0.shortValue());
      assertEquals((-357913941L), fraction0.longValue());
      assertEquals((-3.57913952E8F), fraction0.floatValue(), 0.01F);
      assertEquals((-3.579139413333333E8), fraction0.doubleValue(), 0.01);
      assertEquals((-1073741824), fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte) (-85), fraction0.byteValue());
      assertEquals((-357913941), fraction0.intValue());
      assertEquals((-357913941), fraction0.getProperWhole());
      assertEquals(3, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975), fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow((-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975), fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2815, fraction1.getProperNumerator());
      assertEquals((-0.0010251842F), fraction1.floatValue(), 0.01F);
      assertEquals(2745848, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-2815), fraction1.getNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.getProperWhole();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, int0);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975), fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2815, fraction1.getProperNumerator());
      assertEquals((-0.0010251842F), fraction1.floatValue(), 0.01F);
      assertEquals(2745848, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-2815), fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, int0);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals((-13711293), int0);
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(2598);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), 1630, 31);
      assertEquals((short) (-2449), fraction0.shortValue());
      assertEquals((-2449.5806F), fraction0.floatValue(), 0.01F);
      assertEquals((-2449.5806451612902), fraction0.doubleValue(), 0.01);
      assertEquals((-2449L), fraction0.longValue());
      assertEquals((-75937), fraction0.getNumerator());
      assertEquals((-2449), fraction0.intValue());
      assertEquals(18, fraction0.getProperNumerator());
      assertEquals((byte)111, fraction0.byteValue());
      assertEquals((-2449), fraction0.getProperWhole());
      assertEquals(31, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 265, 1630);
      assertEquals(0.16257668711656442, fraction0.doubleValue(), 0.01);
      assertEquals(265, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1630, fraction0.getDenominator());
      assertEquals(265, fraction0.getProperNumerator());
      assertEquals(0.16257669F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(963, 963, 37);
      assertEquals(989L, fraction0.longValue());
      assertEquals(989.02704F, fraction0.floatValue(), 0.01F);
      assertEquals(989, fraction0.getProperWhole());
      assertEquals((short)989, fraction0.shortValue());
      assertEquals(37, fraction0.getDenominator());
      assertEquals(989, fraction0.intValue());
      assertEquals(989.027027027027, fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-35), fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(36594, fraction0.getNumerator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1041.121682158489);
      assertEquals(1041.1217F, fraction0.floatValue(), 0.01F);
      assertEquals(3020294, fraction0.getNumerator());
      assertEquals((short)1041, fraction0.shortValue());
      assertEquals(1041L, fraction0.longValue());
      assertEquals((byte)17, fraction0.byteValue());
      assertEquals(353, fraction0.getProperNumerator());
      assertEquals(1041, fraction0.intValue());
      assertEquals(1041.121682178559, fraction0.doubleValue(), 0.01);
      assertEquals(2901, fraction0.getDenominator());
      assertEquals(1041, fraction0.getProperWhole());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.003636363636350004);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0036363637F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(275, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.0036363636363636364, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-1923));
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1923, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1923, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-0.4F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.4), fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      double double0 = fraction1.doubleValue();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-0.4), double0, 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((-0.4F), fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.4), fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975), fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-4877), fraction2.intValue());
      assertEquals((-4877L), fraction2.longValue());
      assertEquals((-4877.172291296625), fraction2.doubleValue(), 0.01);
      assertEquals(97, fraction2.getProperNumerator());
      assertEquals((-4877), fraction2.getProperWhole());
      assertEquals((-4877.1724F), fraction2.floatValue(), 0.01F);
      assertEquals((byte) (-13), fraction2.byteValue());
      assertEquals((-2745848), fraction2.getNumerator());
      assertEquals((short) (-4877), fraction2.shortValue());
      assertEquals(563, fraction2.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(2, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483647), 1);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((-2147483647L), fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals((-2147483647), fraction0.intValue());
      assertEquals((-2147483647), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((-2147483647L), fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((-2147483647), fraction0.getNumerator());
      assertEquals((-2147483647), fraction0.intValue());
      assertEquals((-2147483647), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals(2.147483647E9, fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals(Integer.MAX_VALUE, fraction1.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction1.intValue());
      assertEquals(2147483647L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-1));
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483596, 36);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5.965232211111111E7, fraction0.doubleValue(), 0.01);
      assertEquals((short)14562, fraction0.shortValue());
      assertEquals((byte) (-30), fraction0.byteValue());
      assertEquals(59652322, fraction0.intValue());
      assertEquals(59652322, fraction0.getProperWhole());
      assertEquals(5.9652324E7F, fraction0.floatValue(), 0.01F);
      assertEquals(59652322L, fraction0.longValue());
      assertEquals(36, fraction0.getDenominator());
      assertEquals(2147483596, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(10000, 1);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(10000, fraction0.intValue());
      assertEquals((short)10000, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(10000, fraction0.getNumerator());
      assertEquals(10000L, fraction0.longValue());
      assertEquals((byte)16, fraction0.byteValue());
      assertEquals(10000.0F, fraction0.floatValue(), 0.01F);
      assertEquals(10000.0, fraction0.doubleValue(), 0.01);
      assertEquals(10000, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.pow((-826));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(1);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals(Integer.MIN_VALUE, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-2.147483648E9), fraction1.doubleValue(), 0.01);
      assertEquals(Integer.MIN_VALUE, fraction1.intValue());
      assertEquals((-2147483648L), fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1.5, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 274);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(3, int0);
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1463), (-1));
      assertEquals(1463.0, fraction0.doubleValue(), 0.01);
      assertEquals(1463L, fraction0.longValue());
      assertEquals(1463, fraction0.getProperWhole());
      assertEquals(1463.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1463, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte) (-73), fraction0.byteValue());
      assertEquals(1463, fraction0.intValue());
      assertEquals(1463, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(1463, int0);
      assertEquals(1463.0, fraction0.doubleValue(), 0.01);
      assertEquals(1463L, fraction0.longValue());
      assertEquals(1463, fraction0.getProperWhole());
      assertEquals(1463.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1463, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte) (-73), fraction0.byteValue());
      assertEquals(1463, fraction0.intValue());
      assertEquals(1463, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals(2815, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals((-975), int0);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals(2815, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2335, 47);
      assertEquals(49, fraction0.getProperWhole());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals(49L, fraction0.longValue());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(47, int0);
      assertEquals(49, fraction0.getProperWhole());
      assertEquals((short)49, fraction0.shortValue());
      assertEquals(47, fraction0.getDenominator());
      assertEquals(2335, fraction0.getNumerator());
      assertEquals(49.680851063829785, fraction0.doubleValue(), 0.01);
      assertEquals(49L, fraction0.longValue());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals(49.68085F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(49, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1, 1);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("2", string0);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2, fraction0.shortValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("3/4", string0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.negate();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1), fraction2.intValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction2.shortValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      
      String string0 = fraction2.toProperString();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals("-1", string0);
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1), fraction2.intValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction2.shortValue());
      assertNotNull(string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("1", string0);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("0", string0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("-1589 7757/8624", string0);
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertNotNull(string0);
      
      String string1 = fraction0.toProperString();
      assertEquals("-1589 7757/8624", string1);
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.FOUR_FIFTHS.toString();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals("4/5", string0);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertNotNull(string0);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals("-13711293/8624", string0);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589), fraction0.getProperWhole());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, int0);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), int0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow((-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals(2815, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-2815), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2745848, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      assertEquals((-0.0010251842F), fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, int0);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals(2815, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-2815), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(2745848, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      assertEquals((-0.0010251842F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(2815, fraction0.getDenominator());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertNotNull(fraction0);
      
      fraction0.ZERO.hashCode();
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(2815, fraction0.getDenominator());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction(5740, 5740);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(boolean0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((-1589), fraction0.intValue());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((-1589), fraction0.intValue());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(2.023772038839411E-9);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(0.0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2416, 2416, 2416);
      assertEquals(2417, fraction0.getProperWhole());
      assertEquals(2416, fraction0.getDenominator());
      assertEquals(2417L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)113, fraction0.byteValue());
      assertEquals(2417, fraction0.intValue());
      assertEquals(5839472, fraction0.getNumerator());
      assertEquals((short)2417, fraction0.shortValue());
      assertEquals(2417.0, fraction0.doubleValue(), 0.01);
      assertEquals(2417.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((-1), (-3910));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2.5575448E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(2.557544757033248E-4, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(3910, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(2.023772038839411E-9);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0.6, fraction2.doubleValue(), 0.01);
      assertEquals(0.6F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(3, fraction2.getProperNumerator());
      assertNotNull(fraction2);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), (-1));
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((-975), fraction0.intValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short) (-974), fraction2.shortValue());
      assertEquals((-974.4344582593251), fraction2.doubleValue(), 0.01);
      assertEquals((-974L), fraction2.longValue());
      assertEquals(1223, fraction2.getProperNumerator());
      assertEquals((-974.43445F), fraction2.floatValue(), 0.01F);
      assertEquals((byte)50, fraction2.byteValue());
      assertEquals((-974), fraction2.intValue());
      assertEquals((-2743033), fraction2.getNumerator());
      assertEquals((-974), fraction2.getProperWhole());
      assertEquals(2815, fraction2.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction(10000, 10000);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.intValue());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((-975), fraction0.intValue());
      assertEquals((-975), fraction0.getProperWhole());
      assertEquals((-975L), fraction0.longValue());
      assertEquals((byte)49, fraction0.byteValue());
      assertEquals(1223, fraction0.getProperNumerator());
      assertEquals((-975.43445F), fraction0.floatValue(), 0.01F);
      assertEquals((-2745848), fraction0.getNumerator());
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(2815, fraction0.getDenominator());
      assertEquals((short) (-975), fraction0.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)50, fraction2.byteValue());
      assertEquals((-974.6844582593251), fraction2.doubleValue(), 0.01);
      assertEquals((-974L), fraction2.longValue());
      assertEquals(11260, fraction2.getDenominator());
      assertEquals((-974.68445F), fraction2.floatValue(), 0.01F);
      assertEquals((-974), fraction2.getProperWhole());
      assertEquals((-974), fraction2.intValue());
      assertEquals((-10974947), fraction2.getNumerator());
      assertEquals(7707, fraction2.getProperNumerator());
      assertEquals((short) (-974), fraction2.shortValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589), fraction0.getProperWhole());
      assertEquals(7757, fraction0.getProperNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-53), fraction0.byteValue());
      assertEquals((-1589), fraction0.intValue());
      assertEquals(8624, fraction0.getDenominator());
      assertEquals((short) (-1589), fraction0.shortValue());
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
      assertEquals((-1589L), fraction0.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-6.2897056E-4F), fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-8624), fraction1.getNumerator());
      assertEquals(13711293, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(8624, fraction1.getProperNumerator());
      assertEquals((-6.28970586508508E-4), fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 704);
      Fraction fraction1 = fraction0.ONE.pow(704);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(704, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.pow(0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 5);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1962, 1962);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1962, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4.5157271588713854E-8);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 704);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(704, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/ypjX`uE(x7,##Q4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("z.Jxz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1));
      Fraction fraction1 = fraction0.pow((-480));
      int int0 = fraction1.getProperWhole();
      assertEquals(1, int0);
      assertEquals((short) (-1), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-4049), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 25);
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-8.589934492E7), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.023772038839411E-9);
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction0.compareTo(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483633, 2147483633, 2147483633);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, 43, 43);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1 2/3");
      assertEquals(1.6666666F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-395), (-395), 2158);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2543, 2543, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1589 7757/8624");
      assertEquals((-1589.8994666048238), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, (-525));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(704, (-2147483623));
      Fraction fraction1 = fraction0.divideBy(fraction0);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals((-975.4344582593251), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      float float0 = fraction0.floatValue();
      assertEquals((-975.43445F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-975.4344582491926));
      Fraction fraction1 = fraction0.pow((-1));
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals((-0.0010251842053893734), fraction1.doubleValue(), 0.01);
      assertEquals(2815, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1589.8994666028));
      int int0 = fraction0.intValue();
      assertEquals((-1589), int0);
      assertEquals((-13711293), fraction0.getNumerator());
      assertEquals((-1589.8994F), fraction0.floatValue(), 0.01F);
  }
}

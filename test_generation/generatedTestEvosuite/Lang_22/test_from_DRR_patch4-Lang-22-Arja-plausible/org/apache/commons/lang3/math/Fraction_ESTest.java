/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:47:20 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction(5, 40);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(8, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.125, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.125F, fraction1.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(8, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.125, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.125F, fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-2603));
      assertEquals((-2603L), fraction1.longValue());
      assertEquals((byte) (-43), fraction1.byteValue());
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-2603), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2603), fraction1.getProperWhole());
      assertEquals((short) (-2603), fraction1.shortValue());
      assertEquals((-2603.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((-2603L), fraction1.longValue());
      assertEquals((byte) (-43), fraction1.byteValue());
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-2603), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2603), fraction1.getProperWhole());
      assertEquals((short) (-2603), fraction1.shortValue());
      assertEquals((-2603.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2604L, fraction2.longValue());
      assertEquals(2604, fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((byte)44, fraction2.byteValue());
      assertEquals(2604, fraction2.intValue());
      assertEquals(2604.0, fraction2.doubleValue(), 0.01);
      assertEquals(6778212, fraction2.getNumerator());
      assertEquals((short)2604, fraction2.shortValue());
      assertEquals(2604.0F, fraction2.floatValue(), 0.01F);
      assertEquals(2603, fraction2.getDenominator());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      
      int int0 = fraction0.compareTo(fraction2);
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((-2603L), fraction1.longValue());
      assertEquals((byte) (-43), fraction1.byteValue());
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-2603), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2603), fraction1.getProperWhole());
      assertEquals((short) (-2603), fraction1.shortValue());
      assertEquals((-2603.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2603.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2604L, fraction2.longValue());
      assertEquals(2604, fraction2.getProperWhole());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((byte)44, fraction2.byteValue());
      assertEquals(2604, fraction2.intValue());
      assertEquals(2604.0, fraction2.doubleValue(), 0.01);
      assertEquals(6778212, fraction2.getNumerator());
      assertEquals((short)2604, fraction2.shortValue());
      assertEquals(2604.0F, fraction2.floatValue(), 0.01F);
      assertEquals(2603, fraction2.getDenominator());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.getNumerator());
      assertNotNull(fraction0);
      
      fraction0.hashCode();
      assertEquals((-3880), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.getNumerator());
      
      fraction0.hashCode();
      assertEquals((-3880), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/NW!qu/(]Z@f%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" w|qw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" w|qw\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(";''3z\".nv\"m>Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880L), fraction1.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880L), fraction1.longValue());
      assertEquals(3880, fraction2.intValue());
      assertEquals((short)3880, fraction2.shortValue());
      assertEquals(3, fraction2.getDenominator());
      assertEquals(3880L, fraction2.longValue());
      assertEquals(3880.3333F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)40, fraction2.byteValue());
      assertEquals(3880.3333333333335, fraction2.doubleValue(), 0.01);
      assertEquals(11641, fraction2.getNumerator());
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(3880, fraction2.getProperWhole());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 2860);
      assertEquals((-750868.44F), fraction1.floatValue(), 0.01F);
      assertEquals((-750868), fraction1.getProperWhole());
      assertEquals((byte) (-20), fraction1.byteValue());
      assertEquals((-750868.4083916084), fraction1.doubleValue(), 0.01);
      assertEquals(2860, fraction1.getDenominator());
      assertEquals((-750868), fraction1.intValue());
      assertEquals((-750868L), fraction1.longValue());
      assertEquals(1168, fraction1.getProperNumerator());
      assertEquals((short) (-29972), fraction1.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((-750868.44F), fraction1.floatValue(), 0.01F);
      assertEquals((-750868), fraction1.getProperWhole());
      assertEquals((byte) (-20), fraction1.byteValue());
      assertEquals((-750868.4083916084), fraction1.doubleValue(), 0.01);
      assertEquals(2860, fraction1.getDenominator());
      assertEquals((-750868), fraction1.intValue());
      assertEquals((-750868L), fraction1.longValue());
      assertEquals(1168, fraction1.getProperNumerator());
      assertEquals((short) (-29972), fraction1.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-750867L), fraction2.longValue());
      assertEquals((-750867), fraction2.intValue());
      assertEquals((byte) (-19), fraction2.byteValue());
      assertEquals((-750867), fraction2.getProperWhole());
      assertEquals((-750867.44F), fraction2.floatValue(), 0.01F);
      assertEquals((-750867.4083916084), fraction2.doubleValue(), 0.01);
      assertEquals((-2147480788), fraction2.getNumerator());
      assertEquals(2860, fraction2.getDenominator());
      assertEquals(1168, fraction2.getProperNumerator());
      assertEquals((short) (-29971), fraction2.shortValue());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction2.subtract(fraction0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((-750868.44F), fraction1.floatValue(), 0.01F);
      assertEquals((-750868), fraction1.getProperWhole());
      assertEquals((byte) (-20), fraction1.byteValue());
      assertEquals((-750868.4083916084), fraction1.doubleValue(), 0.01);
      assertEquals(2860, fraction1.getDenominator());
      assertEquals((-750868), fraction1.intValue());
      assertEquals((-750868L), fraction1.longValue());
      assertEquals(1168, fraction1.getProperNumerator());
      assertEquals((short) (-29972), fraction1.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals((-750867L), fraction2.longValue());
      assertEquals((-750867), fraction2.intValue());
      assertEquals((byte) (-19), fraction2.byteValue());
      assertEquals((-750867), fraction2.getProperWhole());
      assertEquals((-750867.44F), fraction2.floatValue(), 0.01F);
      assertEquals((-750867.4083916084), fraction2.doubleValue(), 0.01);
      assertEquals((-2147480788), fraction2.getNumerator());
      assertEquals(2860, fraction2.getDenominator());
      assertEquals(1168, fraction2.getProperNumerator());
      assertEquals((short) (-29971), fraction2.shortValue());
      assertEquals((-750868.4083916084), fraction3.doubleValue(), 0.01);
      assertEquals(2860, fraction3.getDenominator());
      assertEquals((-750868), fraction3.getProperWhole());
      assertEquals((-750868.44F), fraction3.floatValue(), 0.01F);
      assertEquals((byte) (-20), fraction3.byteValue());
      assertEquals((-750868L), fraction3.longValue());
      assertEquals(1168, fraction3.getProperNumerator());
      assertEquals((-750868), fraction3.intValue());
      assertEquals((short) (-29972), fraction3.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction3.getNumerator());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotNull(fraction3);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertTrue(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(100);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1));
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow((-1));
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short)3880, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(3880.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)40, fraction1.byteValue());
      assertEquals(3880L, fraction1.longValue());
      assertEquals(3880, fraction1.getProperWhole());
      assertEquals(3880, fraction1.getNumerator());
      assertEquals(3880, fraction1.intValue());
      assertEquals(3880.0F, fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((-112.1784033));
      assertEquals((-112L), fraction1.longValue());
      assertEquals((-112.178406F), fraction1.floatValue(), 0.01F);
      assertEquals(213, fraction1.getDenominator());
      assertEquals((-112.17840375586854), fraction1.doubleValue(), 0.01);
      assertEquals((-112), fraction1.getProperWhole());
      assertEquals((short) (-112), fraction1.shortValue());
      assertEquals((-112), fraction1.intValue());
      assertEquals(38, fraction1.getProperNumerator());
      assertEquals((byte) (-112), fraction1.byteValue());
      assertEquals((-23894), fraction1.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-112L), fraction1.longValue());
      assertEquals((-112.178406F), fraction1.floatValue(), 0.01F);
      assertEquals(213, fraction1.getDenominator());
      assertEquals((-112.17840375586854), fraction1.doubleValue(), 0.01);
      assertEquals((-112), fraction1.getProperWhole());
      assertEquals((short) (-112), fraction1.shortValue());
      assertEquals((-112), fraction1.intValue());
      assertEquals(38, fraction1.getProperNumerator());
      assertEquals((byte) (-112), fraction1.byteValue());
      assertEquals((-23894), fraction1.getNumerator());
      assertEquals(213, fraction2.getDenominator());
      assertEquals((-56L), fraction2.longValue());
      assertEquals((-56), fraction2.intValue());
      assertEquals((-56.089203F), fraction2.floatValue(), 0.01F);
      assertEquals((-56.08920187793427), fraction2.doubleValue(), 0.01);
      assertEquals((short) (-56), fraction2.shortValue());
      assertEquals((-11947), fraction2.getNumerator());
      assertEquals((byte) (-56), fraction2.byteValue());
      assertEquals(19, fraction2.getProperNumerator());
      assertEquals((-56), fraction2.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), (-1));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.2, fraction1.doubleValue(), 0.01);
      assertEquals(1.2F, fraction1.floatValue(), 0.01F);
      assertEquals(6, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.invert();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.2, fraction1.doubleValue(), 0.01);
      assertEquals(1.2F, fraction1.floatValue(), 0.01F);
      assertEquals(6, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(5, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.8333333F, fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction2.getNumerator());
      assertEquals(0.8333333333333334, fraction2.doubleValue(), 0.01);
      assertEquals(6, fraction2.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2603));
      assertEquals((short) (-2603), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2603L), fraction0.longValue());
      assertEquals((byte) (-43), fraction0.byteValue());
      assertEquals((-2603), fraction0.getNumerator());
      assertEquals((-2603), fraction0.intValue());
      assertEquals((-2603.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2603), fraction0.getProperWhole());
      assertEquals((-2603.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals((short) (-2603), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2603L), fraction0.longValue());
      assertEquals((byte) (-43), fraction0.byteValue());
      assertEquals((-2603), fraction0.getNumerator());
      assertEquals((-2603), fraction0.intValue());
      assertEquals((-2603.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2603), fraction0.getProperWhole());
      assertEquals((-2603.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2603), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 1);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3880), 1619);
      assertEquals((-2.3965410747374922), fraction0.doubleValue(), 0.01);
      assertEquals(1619, fraction0.getDenominator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(642, fraction0.getProperNumerator());
      assertEquals((-2.396541F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((short) (-2), fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals((-2.3965410747374922), fraction0.doubleValue(), 0.01);
      assertEquals(1619, fraction0.getDenominator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals(642, fraction0.getProperNumerator());
      assertEquals((-2.396541F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2603));
      assertEquals((-2603), fraction0.getProperWhole());
      assertEquals((-2603.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2603.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-2603), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2603L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2603), fraction0.getNumerator());
      assertEquals((-2603), fraction0.intValue());
      assertEquals((byte) (-43), fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals((-2603), fraction0.getProperWhole());
      assertEquals((-2603.0), fraction0.doubleValue(), 0.01);
      assertEquals((-2603.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-2603), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2603L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2603), fraction0.getNumerator());
      assertEquals((-2603), fraction0.intValue());
      assertEquals((byte) (-43), fraction0.byteValue());
      assertEquals((-2603), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0/1");
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1/1");
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3880), 32, 1015);
      assertEquals((-3880.0315F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880.031527093596), fraction0.doubleValue(), 0.01);
      assertEquals((-3938232), fraction0.getNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(1015, fraction0.getDenominator());
      assertEquals(32, fraction0.getProperNumerator());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-1923));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1923, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      float float0 = fraction1.floatValue();
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-0.15), fraction1.doubleValue(), 0.01);
      assertEquals(20, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.15F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-0.15F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((-3880), 1);
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-7760.0), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-7760), fraction2.getProperWhole());
      assertEquals((-7760L), fraction2.longValue());
      assertEquals((short) (-7760), fraction2.shortValue());
      assertEquals((byte) (-80), fraction2.byteValue());
      assertEquals((-7760), fraction2.getNumerator());
      assertEquals((-7760.0F), fraction2.floatValue(), 0.01F);
      assertEquals((-7760), fraction2.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.getProperWhole());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(Integer.MAX_VALUE, fraction0.intValue());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals(2.147483647E9, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction1.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction1.getNumerator());
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals(2147483647L, fraction1.longValue());
      assertEquals(Integer.MAX_VALUE, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2860, 2860);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(2860, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2860, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 2483);
      assertEquals((-864874), fraction0.intValue());
      assertEquals(1506, fraction0.getProperNumerator());
      assertEquals((-864874L), fraction0.longValue());
      assertEquals((short) (-12906), fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-864874.6065243657), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-106), fraction0.byteValue());
      assertEquals(2483, fraction0.getDenominator());
      assertEquals((-864874), fraction0.getProperWhole());
      assertEquals((-864874.6F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      fraction0.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
      
      fraction0.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.pow(139);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(1);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction0.byteValue());
      assertEquals((short) (-1), fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-1), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1), fraction0.getProperWhole());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.ZERO.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 274);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 2860);
      assertEquals((-750868), fraction0.intValue());
      assertEquals((-750868L), fraction0.longValue());
      assertEquals((short) (-29972), fraction0.shortValue());
      assertEquals((-750868.44F), fraction0.floatValue(), 0.01F);
      assertEquals((-750868.4083916084), fraction0.doubleValue(), 0.01);
      assertEquals(2860, fraction0.getDenominator());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((byte) (-20), fraction0.byteValue());
      assertEquals(1168, fraction0.getProperNumerator());
      assertEquals((-750868), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals((-750868), fraction0.intValue());
      assertEquals((-750868L), fraction0.longValue());
      assertEquals((short) (-29972), fraction0.shortValue());
      assertEquals((-750868.44F), fraction0.floatValue(), 0.01F);
      assertEquals((-750868.4083916084), fraction0.doubleValue(), 0.01);
      assertEquals(2860, fraction0.getDenominator());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((byte) (-20), fraction0.byteValue());
      assertEquals(1168, fraction0.getProperNumerator());
      assertEquals((-750868), fraction0.getProperWhole());
      assertNotNull(string0);
      assertEquals("-750868 1168/2860", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      String string0 = fraction1.toProperString();
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483646, 2147483646);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2147483646, fraction0.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2147483646, fraction0.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertNotNull(string0);
      assertEquals("-3880/1", string0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      
      String string1 = fraction0.ONE_FIFTH.toString();
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotNull(string1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("1/5", string1);
      
      Fraction fraction2 = Fraction.getFraction((-1626), 2);
      assertEquals((byte) (-45), fraction2.byteValue());
      assertEquals((-813.0F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-813), fraction2.shortValue());
      assertEquals((-1626), fraction2.getNumerator());
      assertEquals(2, fraction2.getDenominator());
      assertEquals((-813), fraction2.getProperWhole());
      assertEquals((-813), fraction2.intValue());
      assertEquals((-813L), fraction2.longValue());
      assertEquals((-813.0), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction1.multiplyBy(fraction0);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals(15054400, fraction3.intValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(15054400, fraction3.getProperWhole());
      assertEquals(15054400L, fraction3.longValue());
      assertEquals((short) (-18880), fraction3.shortValue());
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(15054400, fraction3.getNumerator());
      assertEquals(1.50544E7F, fraction3.floatValue(), 0.01F);
      assertEquals((byte)64, fraction3.byteValue());
      assertEquals(1.50544E7, fraction3.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotNull(fraction3);
      assertTrue(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertTrue(fraction1.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      
      Fraction fraction4 = fraction2.divideBy(fraction1);
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880), fraction1.intValue());
      assertEquals((byte) (-45), fraction2.byteValue());
      assertEquals((-813.0F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-813), fraction2.shortValue());
      assertEquals((-1626), fraction2.getNumerator());
      assertEquals(2, fraction2.getDenominator());
      assertEquals((-813), fraction2.getProperWhole());
      assertEquals((-813), fraction2.intValue());
      assertEquals((-813L), fraction2.longValue());
      assertEquals((-813.0), fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(3880, fraction4.getDenominator());
      assertEquals((byte)0, fraction4.byteValue());
      assertEquals(813, fraction4.getProperNumerator());
      assertEquals(813, fraction4.getNumerator());
      assertEquals(0, fraction4.intValue());
      assertEquals(0, fraction4.getProperWhole());
      assertEquals(0L, fraction4.longValue());
      assertEquals(0.20953608F, fraction4.floatValue(), 0.01F);
      assertEquals((short)0, fraction4.shortValue());
      assertEquals(0.2095360824742268, fraction4.doubleValue(), 0.01);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction2);
      assertNotNull(fraction4);
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertTrue(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction0));
      assertFalse(fraction4.equals((Object)fraction2));
      
      Fraction fraction5 = Fraction.getFraction("-3880/1");
      assertEquals((-3880.0), fraction5.doubleValue(), 0.01);
      assertEquals((byte) (-40), fraction5.byteValue());
      assertEquals((-3880L), fraction5.longValue());
      assertEquals((-3880), fraction5.getProperWhole());
      assertEquals((-3880.0F), fraction5.floatValue(), 0.01F);
      assertEquals(1, fraction5.getDenominator());
      assertEquals((-3880), fraction5.getNumerator());
      assertEquals((-3880), fraction5.intValue());
      assertEquals((short) (-3880), fraction5.shortValue());
      assertEquals(0, fraction5.getProperNumerator());
      assertNotSame(fraction5, fraction1);
      assertNotSame(fraction5, fraction4);
      assertNotSame(fraction5, fraction2);
      assertNotSame(fraction5, fraction3);
      assertNotSame(fraction5, fraction0);
      assertNotNull(fraction5);
      assertTrue(fraction5.equals((Object)fraction0));
      assertFalse(fraction5.equals((Object)fraction4));
      assertFalse(fraction5.equals((Object)fraction2));
      assertTrue(fraction5.equals((Object)fraction1));
      assertFalse(fraction5.equals((Object)fraction3));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483626, 2147483626);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction((-2003), (-2003));
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 2147483646);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2.147483646E9, fraction0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(2147483646L, fraction0.longValue());
      assertEquals(2147483646, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals(2147483646, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.reduce();
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fraction0.equals(object0);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1866.61691244));
      assertEquals(3323, fraction0.getDenominator());
      assertEquals((byte) (-74), fraction0.byteValue());
      assertEquals((-1866L), fraction0.longValue());
      assertEquals((-1866.617F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1866), fraction0.shortValue());
      assertEquals((-1866), fraction0.getProperWhole());
      assertEquals((-1866.6169124285284), fraction0.doubleValue(), 0.01);
      assertEquals(2050, fraction0.getProperNumerator());
      assertEquals((-1866), fraction0.intValue());
      assertEquals((-6202768), fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((-919.61));
      assertEquals(100, fraction1.getDenominator());
      assertEquals((short) (-919), fraction1.shortValue());
      assertEquals((-919.61F), fraction1.floatValue(), 0.01F);
      assertEquals((-919), fraction1.getProperWhole());
      assertEquals((-91961), fraction1.getNumerator());
      assertEquals(61, fraction1.getProperNumerator());
      assertEquals((-919L), fraction1.longValue());
      assertEquals((byte)105, fraction1.byteValue());
      assertEquals((-919.61), fraction1.doubleValue(), 0.01);
      assertEquals((-919), fraction1.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(3323, fraction0.getDenominator());
      assertEquals((byte) (-74), fraction0.byteValue());
      assertEquals((-1866L), fraction0.longValue());
      assertEquals((-1866.617F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-1866), fraction0.shortValue());
      assertEquals((-1866), fraction0.getProperWhole());
      assertEquals((-1866.6169124285284), fraction0.doubleValue(), 0.01);
      assertEquals(2050, fraction0.getProperNumerator());
      assertEquals((-1866), fraction0.intValue());
      assertEquals((-6202768), fraction0.getNumerator());
      assertEquals(100, fraction1.getDenominator());
      assertEquals((short) (-919), fraction1.shortValue());
      assertEquals((-919.61F), fraction1.floatValue(), 0.01F);
      assertEquals((-919), fraction1.getProperWhole());
      assertEquals((-91961), fraction1.getNumerator());
      assertEquals(61, fraction1.getProperNumerator());
      assertEquals((-919L), fraction1.longValue());
      assertEquals((byte)105, fraction1.byteValue());
      assertEquals((-919.61), fraction1.doubleValue(), 0.01);
      assertEquals((-919), fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4, 4);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)0, fraction2.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      
      // Undeclared exception!
      try { 
        fraction1.divideBy(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.getNumerator());
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2146930315), 4058);
      assertEquals((-529061.1914736324), fraction0.doubleValue(), 0.01);
      assertEquals(777, fraction0.getProperNumerator());
      assertEquals((-2146930315), fraction0.getNumerator());
      assertEquals((-529061.2F), fraction0.floatValue(), 0.01F);
      assertEquals(4058, fraction0.getDenominator());
      assertEquals((-529061L), fraction0.longValue());
      assertEquals((byte)91, fraction0.byteValue());
      assertEquals((short) (-4773), fraction0.shortValue());
      assertEquals((-529061), fraction0.getProperWhole());
      assertEquals((-529061), fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2146930315), 4058);
      assertEquals((-529061.1914736324), fraction0.doubleValue(), 0.01);
      assertEquals((-2146930315), fraction0.getNumerator());
      assertEquals(777, fraction0.getProperNumerator());
      assertEquals((-529061), fraction0.intValue());
      assertEquals(4058, fraction0.getDenominator());
      assertEquals((-529061.2F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-4773), fraction0.shortValue());
      assertEquals((-529061), fraction0.getProperWhole());
      assertEquals((byte)91, fraction0.byteValue());
      assertEquals((-529061L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals((-529061.1914736324), fraction0.doubleValue(), 0.01);
      assertEquals((-2146930315), fraction0.getNumerator());
      assertEquals(777, fraction0.getProperNumerator());
      assertEquals((-529061), fraction0.intValue());
      assertEquals(4058, fraction0.getDenominator());
      assertEquals((-529061.2F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-4773), fraction0.shortValue());
      assertEquals((-529061), fraction0.getProperWhole());
      assertEquals((byte)91, fraction0.byteValue());
      assertEquals((-529061L), fraction0.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1546.642394854832));
      assertEquals((-1546), fraction0.getProperWhole());
      assertEquals((short) (-1546), fraction0.shortValue());
      assertEquals(618, fraction0.getDenominator());
      assertEquals((-1546L), fraction0.longValue());
      assertEquals(397, fraction0.getProperNumerator());
      assertEquals((-955825), fraction0.getNumerator());
      assertEquals((-1546.6423F), fraction0.floatValue(), 0.01F);
      assertEquals((-1546.6423948220065), fraction0.doubleValue(), 0.01);
      assertEquals((byte) (-10), fraction0.byteValue());
      assertEquals((-1546), fraction0.intValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 47);
      assertEquals((byte) (-5), fraction0.byteValue());
      assertEquals((-45691141L), fraction0.longValue());
      assertEquals((-45691141), fraction0.getProperWhole());
      assertEquals(21, fraction0.getProperNumerator());
      assertEquals((-4.569114E7F), fraction0.floatValue(), 0.01F);
      assertEquals(47, fraction0.getDenominator());
      assertEquals((-45691141), fraction0.intValue());
      assertEquals((short) (-12549), fraction0.shortValue());
      assertEquals((-4.569114144680851E7), fraction0.doubleValue(), 0.01);
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.ONE.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(Integer.MIN_VALUE, 2860);
      assertEquals((-750868), fraction1.getProperWhole());
      assertEquals((short) (-29972), fraction1.shortValue());
      assertEquals((-750868.44F), fraction1.floatValue(), 0.01F);
      assertEquals((-750868), fraction1.intValue());
      assertEquals((byte) (-20), fraction1.byteValue());
      assertEquals(Integer.MIN_VALUE, fraction1.getNumerator());
      assertEquals(1168, fraction1.getProperNumerator());
      assertEquals((-750868L), fraction1.longValue());
      assertEquals((-750868.4083916084), fraction1.doubleValue(), 0.01);
      assertEquals(2860, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483646, 2147483646);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2147483646, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2147483646, fraction0.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1866.61691244));
      assertEquals((-1866L), fraction0.longValue());
      assertEquals((-6202768), fraction0.getNumerator());
      assertEquals((byte) (-74), fraction0.byteValue());
      assertEquals((-1866.6169124285284), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-1866), fraction0.shortValue());
      assertEquals((-1866), fraction0.intValue());
      assertEquals((-1866.617F), fraction0.floatValue(), 0.01F);
      assertEquals(2050, fraction0.getProperNumerator());
      assertEquals(3323, fraction0.getDenominator());
      assertEquals((-1866), fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction(3482, 2742);
      assertEquals(1.269876F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1741, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(370, fraction1.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.2698760029175784, fraction1.doubleValue(), 0.01);
      assertEquals(1371, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try { 
        fraction1.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2146930315));
      assertEquals((short)29045, fraction0.shortValue());
      assertEquals((-2.1469303E9F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)117, fraction0.byteValue());
      assertEquals((-2146930315), fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2146930315), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2146930315), fraction0.getProperWhole());
      assertEquals((-2146930315L), fraction0.longValue());
      assertEquals((-2.146930315E9), fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((-2146930315), (-4));
      assertEquals((short) (-7262), fraction1.shortValue());
      assertEquals((byte) (-94), fraction1.byteValue());
      assertEquals(5.36732576E8F, fraction1.floatValue(), 0.01F);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(536732578, fraction1.getProperWhole());
      assertEquals(2146930315, fraction1.getNumerator());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(5.3673257875E8, fraction1.doubleValue(), 0.01);
      assertEquals(536732578, fraction1.intValue());
      assertEquals(536732578L, fraction1.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.pow((-702));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2147483646, 2147483646);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(2147483646, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals(2147483646, fraction0.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2147483646, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(2147483646, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1899);
      assertEquals((byte) (-97), fraction0.byteValue());
      assertEquals((-1130849.8F), fraction0.floatValue(), 0.01F);
      assertEquals((-1130849), fraction0.intValue());
      assertEquals(1397, fraction0.getProperNumerator());
      assertEquals((-1130849L), fraction0.longValue());
      assertEquals((short) (-16737), fraction0.shortValue());
      assertEquals((-1130849), fraction0.getProperWhole());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-1130849.7356503422), fraction0.doubleValue(), 0.01);
      assertEquals(1899, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals((short)1, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1237);
      assertEquals((-1736041.8F), fraction0.floatValue(), 0.01F);
      assertEquals(1237, fraction0.getDenominator());
      assertEquals((short) (-32105), fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((-1736041), fraction0.intValue());
      assertEquals(931, fraction0.getProperNumerator());
      assertEquals((byte) (-105), fraction0.byteValue());
      assertEquals((-1736041.752627324), fraction0.doubleValue(), 0.01);
      assertEquals((-1736041), fraction0.getProperWhole());
      assertEquals((-1736041L), fraction0.longValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 2860);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1168, fraction0.getProperNumerator());
      assertEquals((-536870912), fraction1.getNumerator());
      assertEquals((-750868L), fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction0.getDenominator());
      assertSame(fraction1, fraction0);
      assertEquals(1, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("^Svy,?7 ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"^Svy,?7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".1w(dR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2146930315));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(85, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(4, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1856, 1856, 1856);
      assertEquals(1857.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483646, 2147483646, 2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1818, (-19), 1818);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1), (-1), (-2489));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1), (-1), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, 1, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1794), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, (-1794));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 2147483646);
      String string0 = fraction0.toProperString();
      assertEquals(2147483646, fraction0.getNumerator());
      assertEquals("2147483646", string0);
      assertEquals(2.147483646E9, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1884), 2);
      fraction0.TWO_QUARTERS.toProperString();
      fraction0.ONE_HALF.hashCode();
      Fraction.getFraction((double) (-1884));
      Fraction fraction1 = Fraction.getFraction(549, 31);
      Fraction fraction2 = Fraction.getFraction(2099.6926);
      fraction2.ONE_QUARTER.multiplyBy(fraction0);
      fraction0.pow(2);
      Fraction fraction3 = Fraction.getFraction("2/4");
      Fraction fraction4 = Fraction.getFraction(4635.05);
      fraction4.ONE.invert();
      Fraction fraction5 = Fraction.getFraction(549, (-1884));
      fraction5.TWO_QUARTERS.toProperString();
      fraction2.THREE_QUARTERS.negate();
      Fraction fraction6 = fraction2.multiplyBy(fraction3);
      fraction2.TWO_QUARTERS.toProperString();
      // Undeclared exception!
      try { 
        fraction1.multiplyBy(fraction6);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2146930315));
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      int int0 = fraction0.intValue();
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, int0);
      assertEquals(2603, fraction0.getDenominator());
  }
}

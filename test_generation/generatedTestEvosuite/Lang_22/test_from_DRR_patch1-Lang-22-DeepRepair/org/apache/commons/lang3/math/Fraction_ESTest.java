/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:43:00 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1, 1, 1);
      assertEquals(2, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2, fraction0.shortValue());
      assertEquals(2, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getNumerator());
      assertEquals((byte)2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)2, fraction0.shortValue());
      assertEquals(2, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getNumerator());
      assertEquals((byte)2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(5, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 2147483642);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2147483642, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(4.656612886087819E-10, fraction0.doubleValue(), 0.01);
      assertEquals(4.656613E-10F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(Integer.MIN_VALUE, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(658, 658);
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(658, fraction0.getDenominator());
      assertEquals(658, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.intValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(658, fraction0.getDenominator());
      assertEquals(658, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("4/5");
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3880), fraction1.intValue());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(3880.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(3880, fraction2.getProperWhole());
      assertEquals((short)3880, fraction2.shortValue());
      assertEquals(3880.0, fraction2.doubleValue(), 0.01);
      assertEquals(3880, fraction2.getNumerator());
      assertEquals(3880, fraction2.intValue());
      assertEquals((byte)40, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(3880L, fraction2.longValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1546), 468);
      assertEquals((-3), fraction0.getProperWhole());
      assertEquals((-3), fraction0.intValue());
      assertEquals((-773), fraction0.getNumerator());
      assertEquals((-3.3034188034188032), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-3), fraction0.shortValue());
      assertEquals((byte) (-3), fraction0.byteValue());
      assertEquals(71, fraction0.getProperNumerator());
      assertEquals((-3L), fraction0.longValue());
      assertEquals((-3.3034189F), fraction0.floatValue(), 0.01F);
      assertEquals(234, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals((-3), fraction0.getProperWhole());
      assertEquals((-3), fraction0.intValue());
      assertEquals((-773), fraction0.getNumerator());
      assertEquals((-3.3034188034188032), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-3), fraction0.shortValue());
      assertEquals((byte) (-3), fraction0.byteValue());
      assertEquals(71, fraction0.getProperNumerator());
      assertEquals((-3L), fraction0.longValue());
      assertEquals((-3.3034189F), fraction0.floatValue(), 0.01F);
      assertEquals(234, fraction0.getDenominator());
      assertEquals((-3.3034188034188032), fraction1.doubleValue(), 0.01);
      assertEquals((-3), fraction1.intValue());
      assertEquals((-773), fraction1.getNumerator());
      assertEquals((-3), fraction1.getProperWhole());
      assertEquals(71, fraction1.getProperNumerator());
      assertEquals((short) (-3), fraction1.shortValue());
      assertEquals((byte) (-3), fraction1.byteValue());
      assertEquals(234, fraction1.getDenominator());
      assertEquals((-3L), fraction1.longValue());
      assertEquals((-3.3034189F), fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483642, (-1));
      assertEquals((-2147483642), fraction0.getNumerator());
      assertEquals((-2147483642), fraction0.getProperWhole());
      assertEquals((-2.147483642E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483642), fraction0.intValue());
      assertEquals((byte)6, fraction0.byteValue());
      assertEquals((short)6, fraction0.shortValue());
      assertEquals((-2147483642L), fraction0.longValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals((-2147483642), fraction0.getNumerator());
      assertEquals((-2147483642), fraction0.getProperWhole());
      assertEquals((-2.147483642E9), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483642), fraction0.intValue());
      assertEquals((byte)6, fraction0.byteValue());
      assertEquals((short)6, fraction0.shortValue());
      assertEquals((-2147483642L), fraction0.longValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte)6, fraction1.byteValue());
      assertEquals((-2147483642), fraction1.getNumerator());
      assertEquals((-2147483642), fraction1.intValue());
      assertEquals((-2147483642), fraction1.getProperWhole());
      assertEquals((-2.147483642E9), fraction1.doubleValue(), 0.01);
      assertEquals((-2147483642L), fraction1.longValue());
      assertEquals((short)6, fraction1.shortValue());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.5), fraction1.doubleValue(), 0.01);
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.reduce();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-2), fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals((-0.5), fraction1.doubleValue(), 0.01);
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      assertEquals((-0.5), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(2, fraction2.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 985);
      assertEquals((short)985, fraction0.shortValue());
      assertEquals((byte) (-39), fraction0.byteValue());
      assertEquals(985, fraction0.intValue());
      assertEquals(985.0, fraction0.doubleValue(), 0.01);
      assertEquals(985, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(985L, fraction0.longValue());
      assertEquals(985, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(985.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertEquals((short)985, fraction0.shortValue());
      assertEquals((byte) (-39), fraction0.byteValue());
      assertEquals(985, fraction0.intValue());
      assertEquals(985.0, fraction0.doubleValue(), 0.01);
      assertEquals(985, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(985L, fraction0.longValue());
      assertEquals(985, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(985.0F, fraction0.floatValue(), 0.01F);
      assertEquals(985.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte) (-39), fraction1.byteValue());
      assertEquals(985.0, fraction1.doubleValue(), 0.01);
      assertEquals(985, fraction1.intValue());
      assertEquals(985, fraction1.getNumerator());
      assertEquals(985L, fraction1.longValue());
      assertEquals(985, fraction1.getProperWhole());
      assertEquals((short)985, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4095, (-1520));
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals(1520, fraction0.getDenominator());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals(1520, fraction0.getDenominator());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals(1055, fraction1.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(1520, fraction1.getDenominator());
      assertEquals(4095, fraction1.getNumerator());
      assertEquals(2.694079F, fraction1.floatValue(), 0.01F);
      assertEquals(2.6940789473684212, fraction1.doubleValue(), 0.01);
      assertEquals(2, fraction1.intValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals((byte)2, fraction1.byteValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.16, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(25, fraction1.getDenominator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0.16F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.16, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(25, fraction1.getDenominator());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0.16F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.6666666666666667, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(5, fraction1.getNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.6666666666666667, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.6666666F, fraction1.floatValue(), 0.01F);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.getNumerator());
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction2.getProperWhole());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction("-1");
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.ONE.multiplyBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1), fraction2.intValue());
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1L), fraction2.longValue());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.abs();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      
      long long0 = fraction2.longValue();
      assertEquals(1L, long0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)1, fraction2.shortValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getProperWhole());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals((byte)1, fraction2.byteValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1630, (-3));
      assertEquals((-543L), fraction0.longValue());
      assertEquals((-1630), fraction0.getNumerator());
      assertEquals((-543), fraction0.getProperWhole());
      assertEquals((-543), fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte) (-31), fraction0.byteValue());
      assertEquals((-543.3333F), fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals((-543.3333333333334), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-543), fraction0.shortValue());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals((-543L), long0);
      assertEquals((-543L), fraction0.longValue());
      assertEquals((-1630), fraction0.getNumerator());
      assertEquals((-543), fraction0.getProperWhole());
      assertEquals((-543), fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((byte) (-31), fraction0.byteValue());
      assertEquals((-543.3333F), fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals((-543.3333333333334), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-543), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2.147483645E9));
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals((short)3, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483645), fraction0.getNumerator());
      assertEquals((-2147483645), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483645), fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483645E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2147483645L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals((short)3, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483645), fraction0.getNumerator());
      assertEquals((-2147483645), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483645), fraction0.getProperWhole());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483645E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2147483645L), fraction0.longValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals((-4.656612879582606E-10), fraction1.doubleValue(), 0.01);
      assertEquals(2147483645, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((-4.656613E-10F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((-1), fraction1.getNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals(1, int0);
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.intValue();
      assertEquals((-3880), int0);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(1, int0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4095, (-1520));
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals(1520, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals((-2), int0);
      assertEquals((-2), fraction0.intValue());
      assertEquals((-2.694079F), fraction0.floatValue(), 0.01F);
      assertEquals((-4095), fraction0.getNumerator());
      assertEquals(1055, fraction0.getProperNumerator());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-2L), fraction0.longValue());
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-2), fraction0.getProperWhole());
      assertEquals((-2.6940789473684212), fraction0.doubleValue(), 0.01);
      assertEquals(1520, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperNumerator();
      assertEquals(3, int0);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1546), 468);
      assertEquals(71, fraction0.getProperNumerator());
      assertEquals((short) (-3), fraction0.shortValue());
      assertEquals((byte) (-3), fraction0.byteValue());
      assertEquals((-773), fraction0.getNumerator());
      assertEquals((-3), fraction0.intValue());
      assertEquals((-3.3034188034188032), fraction0.doubleValue(), 0.01);
      assertEquals((-3.3034189F), fraction0.floatValue(), 0.01F);
      assertEquals((-3), fraction0.getProperWhole());
      assertEquals((-3L), fraction0.longValue());
      assertEquals(234, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals((-773), int0);
      assertEquals(71, fraction0.getProperNumerator());
      assertEquals((short) (-3), fraction0.shortValue());
      assertEquals((byte) (-3), fraction0.byteValue());
      assertEquals((-773), fraction0.getNumerator());
      assertEquals((-3), fraction0.intValue());
      assertEquals((-3.3034188034188032), fraction0.doubleValue(), 0.01);
      assertEquals((-3.3034189F), fraction0.floatValue(), 0.01F);
      assertEquals((-3), fraction0.getProperWhole());
      assertEquals((-3L), fraction0.longValue());
      assertEquals(234, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1");
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(265, 615, 265);
      assertEquals((byte)11, fraction0.byteValue());
      assertEquals(267.3207547169811, fraction0.doubleValue(), 0.01);
      assertEquals(267L, fraction0.longValue());
      assertEquals(70840, fraction0.getNumerator());
      assertEquals(267, fraction0.intValue());
      assertEquals(267, fraction0.getProperWhole());
      assertEquals((short)267, fraction0.shortValue());
      assertEquals(85, fraction0.getProperNumerator());
      assertEquals(267.32074F, fraction0.floatValue(), 0.01F);
      assertEquals(265, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(985, 985, 985);
      assertEquals(986.0, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(986.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte) (-38), fraction0.byteValue());
      assertEquals(986L, fraction0.longValue());
      assertEquals(986, fraction0.intValue());
      assertEquals(971210, fraction0.getNumerator());
      assertEquals((short)986, fraction0.shortValue());
      assertEquals(986, fraction0.getProperWhole());
      assertEquals(985, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-0.75), fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.75F), fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      double double0 = fraction1.doubleValue();
      assertEquals((-0.75), double0, 0.01);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-0.75), fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals((-0.75F), fraction1.floatValue(), 0.01F);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.TWO_THIRDS.divideBy(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(5, fraction1.getNumerator());
      assertEquals(5, fraction1.getProperNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(6, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.8333333F, fraction1.floatValue(), 0.01F);
      assertEquals(0.8333333333333334, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) (-3880));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01);
      assertEquals(2, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals((-3880), fraction1.getProperWhole());
      assertEquals((-3880), fraction1.getNumerator());
      assertEquals((-3880L), fraction1.longValue());
      assertEquals((byte) (-40), fraction1.byteValue());
      assertEquals((-3880.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((-3880.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-3880), fraction1.shortValue());
      assertEquals((-3880), fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals((-7760L), fraction2.longValue());
      assertEquals((-7760.0), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short) (-7760), fraction2.shortValue());
      assertEquals((-7760), fraction2.getNumerator());
      assertEquals((-7760), fraction2.intValue());
      assertEquals((-7760), fraction2.getProperWhole());
      assertEquals((byte) (-80), fraction2.byteValue());
      assertEquals((-7760.0F), fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(4095, (-1520));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2), fraction1.getProperWhole());
      assertEquals((-2.694079F), fraction1.floatValue(), 0.01F);
      assertEquals((-4095), fraction1.getNumerator());
      assertEquals((-2), fraction1.intValue());
      assertEquals(1055, fraction1.getProperNumerator());
      assertEquals((byte) (-2), fraction1.byteValue());
      assertEquals((-2.6940789473684212), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-2), fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(1520, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.THREE_QUARTERS.add(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-2), fraction1.getProperWhole());
      assertEquals((-2.694079F), fraction1.floatValue(), 0.01F);
      assertEquals((-4095), fraction1.getNumerator());
      assertEquals((-2), fraction1.intValue());
      assertEquals(1055, fraction1.getProperNumerator());
      assertEquals((byte) (-2), fraction1.byteValue());
      assertEquals((-2.6940789473684212), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-2), fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(1520, fraction1.getDenominator());
      assertEquals((-1), fraction2.getProperWhole());
      assertEquals((-2955), fraction2.getNumerator());
      assertEquals(1435, fraction2.getProperNumerator());
      assertEquals(1520, fraction2.getDenominator());
      assertEquals((-1.944078947368421), fraction2.doubleValue(), 0.01);
      assertEquals((-1.9440789F), fraction2.floatValue(), 0.01F);
      assertEquals((short) (-1), fraction2.shortValue());
      assertEquals((-1), fraction2.intValue());
      assertEquals((byte) (-1), fraction2.byteValue());
      assertEquals((-1L), fraction2.longValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2.147483645E9));
      assertEquals((short)3, fraction0.shortValue());
      assertEquals((-2147483645), fraction0.intValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals((-2.147483645E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2147483645), fraction0.getNumerator());
      assertEquals((-2147483645), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483645L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)3, fraction0.shortValue());
      assertEquals((-2147483645), fraction0.intValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals((-2.147483645E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2147483645), fraction0.getNumerator());
      assertEquals((-2147483645), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483645L), fraction0.longValue());
      assertEquals((short) (-3), fraction1.shortValue());
      assertEquals(2.147483645E9, fraction1.doubleValue(), 0.01);
      assertEquals(2147483645, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals((byte) (-3), fraction1.byteValue());
      assertEquals(2147483645, fraction1.getNumerator());
      assertEquals(2147483645, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2147483645L, fraction1.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 32767);
      assertEquals((-65538), fraction0.intValue());
      assertEquals((-65538), fraction0.getProperWhole());
      assertEquals(32767, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals((-65538L), fraction0.longValue());
      assertEquals(Integer.MIN_VALUE, fraction0.getNumerator());
      assertEquals((byte) (-2), fraction0.byteValue());
      assertEquals((-65538.00006103702), fraction0.doubleValue(), 0.01);
      assertEquals((short) (-2), fraction0.shortValue());
      assertEquals((-65538.0F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2.147483645E9));
      assertEquals((-2.147483645E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2147483645), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483645), fraction0.getNumerator());
      assertEquals((-2147483645), fraction0.intValue());
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((short)3, fraction0.shortValue());
      assertEquals((byte)3, fraction0.byteValue());
      assertEquals((-2147483645L), fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2781);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2781, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(177);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.pow(1);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(0.6, fraction1.doubleValue(), 0.01);
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(2397, int0);
      assertEquals(2397, fraction0.intValue());
      assertEquals(2397.0, fraction0.doubleValue(), 0.01);
      assertEquals(2397L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2397, fraction0.getNumerator());
      assertEquals((byte)93, fraction0.byteValue());
      assertEquals(2397.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2397, fraction0.shortValue());
      assertEquals(2397, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getProperWhole();
      assertEquals(0, int0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-183), fraction0.getNumerator());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(1356, int0);
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-183), fraction0.getNumerator());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(6, fraction1.getNumerator());
      assertEquals(1.2, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.2F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.toProperString();
      assertEquals("1 1/5", string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(6, fraction1.getNumerator());
      assertEquals(1.2, fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.2F, fraction1.floatValue(), 0.01F);
      assertNotNull(string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.getNumerator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("-3880", string0);
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3880), fraction0.getNumerator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      String string0 = fraction1.toProperString();
      assertEquals("-1", string0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1L, fraction0.longValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(2603, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((short) (-1), fraction1.shortValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals((-2603), fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-1), fraction1.byteValue());
      assertEquals((-1), fraction1.intValue());
      assertEquals((-1), fraction1.getProperWhole());
      assertNotNull(string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-1426));
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1426, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals("0", string0);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1426, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals("1/1", string0);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(string0);
      
      String string1 = fraction0.toString();
      assertEquals("1/1", string1);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) 468);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)468, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-44), fraction1.byteValue());
      assertEquals(468, fraction1.intValue());
      assertEquals(468, fraction1.getNumerator());
      assertEquals(468L, fraction1.longValue());
      assertEquals(468.0F, fraction1.floatValue(), 0.01F);
      assertEquals(468, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(468.0, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((short)468, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte) (-44), fraction1.byteValue());
      assertEquals(468, fraction1.intValue());
      assertEquals(468, fraction1.getNumerator());
      assertEquals(468L, fraction1.longValue());
      assertEquals(468.0F, fraction1.floatValue(), 0.01F);
      assertEquals(468, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(468.0, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ONE.divideBy(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(0, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1L, fraction0.longValue());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction((double) 1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(0, int0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(191, 191);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      fraction0.ONE.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      
      fraction0.hashCode();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(2603, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2603, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(2603, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(2603, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(3873, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals((short)1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-3880));
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      boolean boolean0 = fraction0.equals("");
      assertFalse(boolean0);
      assertEquals((byte) (-40), fraction0.byteValue());
      assertEquals((-3880.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3880L), fraction0.longValue());
      assertEquals((short) (-3880), fraction0.shortValue());
      assertEquals((-3880), fraction0.getNumerator());
      assertEquals((-3880), fraction0.intValue());
      assertEquals((-3880), fraction0.getProperWhole());
      assertEquals((-3880.0), fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483643), (-20));
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(1.0737418215E8, fraction0.doubleValue(), 0.01);
      assertEquals((byte)102, fraction0.byteValue());
      assertEquals(107374182, fraction0.intValue());
      assertEquals(2147483643, fraction0.getNumerator());
      assertEquals(107374182, fraction0.getProperWhole());
      assertEquals(1.07374184E8F, fraction0.floatValue(), 0.01F);
      assertEquals(107374182L, fraction0.longValue());
      assertEquals(20, fraction0.getDenominator());
      assertEquals((short)26214, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01);
      assertEquals((short)0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3717), 0, 330);
      assertEquals((-3717), fraction0.intValue());
      assertEquals((-3717.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3717), fraction0.getProperWhole());
      assertEquals((byte)123, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3717.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1226610), fraction0.getNumerator());
      assertEquals(330, fraction0.getDenominator());
      assertEquals((short) (-3717), fraction0.shortValue());
      assertEquals((-3717L), fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((-3717), fraction0.intValue());
      assertEquals((-3717.0), fraction0.doubleValue(), 0.01);
      assertEquals((-3717), fraction0.getProperWhole());
      assertEquals((byte)123, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-3717.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1226610), fraction0.getNumerator());
      assertEquals(330, fraction0.getDenominator());
      assertEquals((short) (-3717), fraction0.shortValue());
      assertEquals((-3717L), fraction0.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2603, fraction0.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      assertEquals(0, fraction1.intValue());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction2.intValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals((short)0, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(9.72791445213339E-4);
      assertEquals(0, fraction0.intValue());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(9.727626459143969E-4, fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(9.7276265E-4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1028, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2147483645), (-2147483645));
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(2147483645, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(2147483645, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction(134, 10);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(13.4, fraction1.doubleValue(), 0.01);
      assertEquals(67, fraction1.getNumerator());
      assertEquals(13, fraction1.getProperWhole());
      assertEquals(13, fraction1.intValue());
      assertEquals((short)13, fraction1.shortValue());
      assertEquals(13.4F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((byte)13, fraction1.byteValue());
      assertEquals(13L, fraction1.longValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_FIFTH;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.2, fraction1.doubleValue(), 0.01);
      assertEquals(0.2F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.2F, fraction2.floatValue(), 0.01F);
      assertEquals((short)0, fraction2.shortValue());
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(0.2, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getProperNumerator());
      assertEquals(5, fraction2.getDenominator());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01);
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(3, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(3979, (-2147483645));
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals((-3979), fraction0.getNumerator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals(3979, fraction0.getProperNumerator());
      assertEquals((-1.8528662647859188E-6), fraction0.doubleValue(), 0.01);
      assertEquals((-1.8528663E-6F), fraction0.floatValue(), 0.01F);
      assertEquals(2147483645, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getReducedFraction(3979, 3979);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-183), fraction0.getNumerator());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.ONE_FIFTH.invert();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-183), fraction0.getNumerator());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)5, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)5, fraction1.shortValue());
      assertEquals(5, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(5.0, fraction1.doubleValue(), 0.01);
      assertEquals(5L, fraction1.longValue());
      assertEquals(5.0F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getNumerator());
      assertEquals(5, fraction1.intValue());
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-183), fraction0.getNumerator());
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction0.intValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(183, fraction0.getProperNumerator());
      assertEquals(1356, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals((-0.13495575F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals((byte)5, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)5, fraction1.shortValue());
      assertEquals(5, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(5.0, fraction1.doubleValue(), 0.01);
      assertEquals(5L, fraction1.longValue());
      assertEquals(5.0F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getNumerator());
      assertEquals(5, fraction1.intValue());
      assertEquals(1356, fraction2.getDenominator());
      assertEquals((-5), fraction2.intValue());
      assertEquals((-6963), fraction2.getNumerator());
      assertEquals((short) (-5), fraction2.shortValue());
      assertEquals((byte) (-5), fraction2.byteValue());
      assertEquals((-5.134956F), fraction2.floatValue(), 0.01F);
      assertEquals((-5.134955752212389), fraction2.doubleValue(), 0.01);
      assertEquals((-5L), fraction2.longValue());
      assertEquals(183, fraction2.getProperNumerator());
      assertEquals((-5), fraction2.getProperWhole());
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(3979, (-2147483645));
      assertEquals(0, fraction0.intValue());
      assertEquals(3979, fraction0.getProperNumerator());
      assertEquals((-1.8528663E-6F), fraction0.floatValue(), 0.01F);
      assertEquals(2147483645, fraction0.getDenominator());
      assertEquals((short)0, fraction0.shortValue());
      assertEquals((-3979), fraction0.getNumerator());
      assertEquals((-1.8528662647859188E-6), fraction0.doubleValue(), 0.01);
      assertEquals(0L, fraction0.longValue());
      assertEquals((byte)0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((byte)0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals((short)0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.getFraction(2147483642, 2913);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2913, fraction1.getDenominator());
      assertEquals((byte) (-74), fraction1.byteValue());
      assertEquals(737206L, fraction1.longValue());
      assertEquals(2147483642, fraction1.getNumerator());
      assertEquals(737206.8801922416, fraction1.doubleValue(), 0.01);
      assertEquals(737206, fraction1.intValue());
      assertEquals((short)16310, fraction1.shortValue());
      assertEquals(737206.9F, fraction1.floatValue(), 0.01F);
      assertEquals(737206, fraction1.getProperWhole());
      assertEquals(2564, fraction1.getProperNumerator());
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals((short)1, fraction0.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals((short)2, fraction1.shortValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.0, fraction1.doubleValue(), 0.01);
      assertEquals((byte)2, fraction1.byteValue());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483642, (-1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483642), fraction0.intValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals((-2147483642), fraction0.getNumerator());
      assertEquals((-2147483642), fraction0.getProperWhole());
      assertEquals((-2.147483642E9), fraction0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((byte)6, fraction0.byteValue());
      assertEquals((short)6, fraction0.shortValue());
      assertEquals((-2147483642L), fraction0.longValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction((-2147483646), 1173);
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      // Undeclared exception!
      try { 
        fraction0.pow((-1098));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.pow(0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      Fraction fraction1 = fraction0.pow(74);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2603, fraction0.getDenominator());
      assertEquals(2603, fraction0.getNumerator());
      assertEquals(1, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(183, (-1356));
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.13495575221238937, fraction1.doubleValue(), 0.01);
      assertEquals((-0.13495575221238937), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, (-4609));
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4609, fraction0.getDenominator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/9TVbSj,ezW]bgi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-46684427 3/46");
      assertEquals((-4.668442706521739E7), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("j;.Vgc_WzL#c~8u^0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1));
      Fraction fraction1 = fraction0.pow((-1));
      assertEquals((-1), fraction0.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-25));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-25), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1276), Integer.MIN_VALUE);
      assertEquals(5.941838E-7F, fraction0.floatValue(), 0.01F);
      assertEquals(536870912, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 1);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(4223, 4223, 2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2147483645), 1585, 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE, 520411);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(75, 1, (-2276));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1865), (-3), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2397), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      fraction0.toProperString();
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals("2397", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2397), (-1));
      double double0 = fraction0.doubleValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2397.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      long long0 = fraction0.longValue();
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-2.581977794990963E-4), fraction0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      float float0 = fraction0.floatValue();
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-2.5819778E-4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, int0);
      assertEquals(2603, fraction0.getNumerator());
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2603), (-2603));
      Fraction fraction1 = fraction0.ONE.divideBy(fraction0);
      fraction1.ONE_HALF.toProperString();
      String string0 = fraction1.toProperString();
      assertEquals(2603, fraction0.getDenominator());
      assertEquals("1", string0);
      assertEquals(1, fraction1.getNumerator());
      assertNotNull(string0);
      
      Fraction fraction2 = Fraction.ZERO;
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 3873);
      int int0 = fraction0.intValue();
      assertEquals((-1), fraction0.getNumerator());
      assertEquals(0, int0);
      assertEquals((-2.5819778E-4F), fraction0.floatValue(), 0.01F);
  }
}

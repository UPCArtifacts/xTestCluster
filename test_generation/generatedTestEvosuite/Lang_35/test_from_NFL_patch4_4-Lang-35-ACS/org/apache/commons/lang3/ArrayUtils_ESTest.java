/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:50:24 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-781), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -781, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 338.31128F, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 561);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 4L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (short)64, (double) 4L);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-33), 81);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)20, 1);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ')', 0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'1', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '$', 0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[4] = '';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'g');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.indexOf(charArray0, ' ', Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-4306), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2064L), (int) (short)1);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 7);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[5];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, arrayUtils0.EMPTY_LONG_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, objectArray0);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 3, 0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 0, 0);
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 28, 2145865790);
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[4];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, intArray0[0]);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (int) (short)0, (-1));
      assertNotNull(intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) integerArray0, 2241, 1);
      assertNotNull(objectArray0);
      assertNotSame(integerArray0, objectArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, 0, 250);
      assertNotNull(objectArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) doubleArray0);
      assertNotNull(objectArray0);
      assertSame(doubleArray0, objectArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[6];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) integerArray0, (-1), (int) 2);
      assertNotNull(objectArray0);
      assertNotSame(integerArray0, objectArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)869);
      assertNotNull(shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, (Object) "?j<]0Z1^>Ov=YY");
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-30));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-94));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 1);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-66));
      assertNotNull(byte0);
      assertEquals((byte) (-66), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-66), (byte) (-66), (byte) (-66)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.remove(byteArray1, 0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-66), (byte) (-66), (byte) (-66)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-66), (byte) (-66)}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (byte)5);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)0, (short)1, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-21);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-21));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-21), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(4, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = (-1851);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1851), 2352);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {0, 0, (-1851), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 954);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3013.686F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3013.686F), 2214);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-3013.686F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-237.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-237.0F));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-237.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (float) 1914L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1914.0F);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1914.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 4052.32905318);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4052.32905318;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4052.32905318, 2146377318);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {4052.32905318}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3440.556575036584);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2L, (double) 2L);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-14.2977311308);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-14.2977311308));
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-14.2977311308), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[3] = '7';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '7', 233);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '7', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '}');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 't';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 't');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)111, 36);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)121);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)121, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)77;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)77);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)77, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameType("4.1", arrayUtils0);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)139;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)139, (-1051));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)139, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1133;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1133);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)1133, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short)2011;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2011);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2011, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray1, (Object) longArray0[0], (-1696));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 78L;
      objectArray0[1] = (Object) 78L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(0, int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("8N3_h", "8N3_h");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry0;
      int int0 = ArrayUtils.indexOf((Object[]) abstractMap_SimpleEntryArray0, (Object) abstractMap_SimpleEntry0);
      assertEquals(3, int0);
      assertEquals(4, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[3] = 1236L;
      int int0 = ArrayUtils.indexOf(longArray0, 1236L, (-2267));
      assertEquals(3, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1236L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 526L;
      int int0 = ArrayUtils.indexOf(longArray0, 526L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {526L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[3] = 893L;
      int int0 = ArrayUtils.indexOf(longArray0, 893L);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 893L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {0, 1, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-169);
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {(-169), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[6] = (float) 'N';
      int int0 = ArrayUtils.indexOf(floatArray0, 78.0F, 4);
      assertEquals(6, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 78.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3074.907F;
      int int0 = ArrayUtils.indexOf(floatArray0, 3074.907F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {3074.907F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 81;
      int int0 = ArrayUtils.indexOf(floatArray0, 81.0F);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, 81.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3115.85200768);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0, 740.1494147387);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-3115.85200768), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-165.580083251);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-165.580083251), 0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-165.580083251)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-263.79843);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-263.79843), 1.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-263.79843), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2010.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 1.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-2010.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 123.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 123.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {123.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) (-1662L);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1662.0));
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1662.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'j';
      int int0 = ArrayUtils.indexOf(charArray0, 'j', (-177));
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', 'j', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      int int0 = ArrayUtils.indexOf(charArray0, 'K');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[3] = '>';
      int int0 = ArrayUtils.indexOf(charArray0, '>');
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '>', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-111));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      AbstractMap.SimpleEntry<Integer, Integer>[] abstractMap_SimpleEntryArray1 = ArrayUtils.clone(abstractMap_SimpleEntryArray0);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(2, abstractMap_SimpleEntryArray0.length);
      assertEquals(2, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) booleanArray0, (Object[]) booleanArray0);
      assertNotNull(objectArray0);
      assertNotSame(booleanArray0, objectArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short) (-895));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-895), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, 0, 0L);
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 0, 1);
      assertNotNull(intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, 0, 958.26F);
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {958.26F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (int) (short)0, (-4020.0));
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {(-4020.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Y');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte) (-1));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, (Object) arrayUtils0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.lang3.ArrayUtils
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, 0, (Object) arrayUtils0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-2129587950));
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 169);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-499);
      int int0 = ArrayUtils.indexOf(floatArray0, (-499.0F), (int) (short) (-499));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-499.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = ArrayUtils.indexOf(floatArray0, 78.0F, 4);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1.0F), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 1L, 1641, (double) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.5, (-1392));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (byte)60;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-2146214448), (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 60.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 13, 2144.762909535723);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0, 740.1494147387);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2146.0975973622103, 0, (double) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 1147L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1147.0, (-1));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 1147.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (int) (byte)3);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1448.0), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-77);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-77), (-1030));
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-77), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-37), 57);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)112, (-1961));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      int int0 = ArrayUtils.indexOf(charArray0, '^', 0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'G', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2186;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2186, 48);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2186}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-117), 2384);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short) (-4615);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-4615), (-4463));
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-4615), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (byte)48);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)139, (int) (short)139);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1686;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1686, 1686);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1686, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-84);
      int int0 = ArrayUtils.indexOf(intArray0, (-84), (int) (byte) (-84));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-84), 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Character character0 = new Character('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      int[] intArray0 = new int[4];
      int int0 = ArrayUtils.indexOf(intArray0, 1, (int) character0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 0, (-2146771306));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 0);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[8];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 420);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)86, 3868);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-21);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte) (-21), (int) (byte) (-21));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-21L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (-1), 2546);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2872);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 16);
      assertEquals(0, int0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0, (-1201));
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) arrayUtils0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], 93);
      assertEquals((-1), int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, object0, (-1696));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(objectArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String string0 = ArrayUtils.toString((Object) arrayUtils0, "}`4`-. U");
      assertNotNull(string0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, 2829.62F);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.indexOf(charArray0, '>');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, 3512L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, 123.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      short[] shortArray0 = new short[7];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1499);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-67);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte) (-67));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-67L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)95;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)95);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 0, (Integer) (-1));
      assertNotNull(integerArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 1994091958, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (Integer) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 2392, "\"qy;) ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2392, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)65);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertNotNull(byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object[]) null);
      assertNotNull(objectArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = ArrayUtils.isEmpty(integerArray0);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = (Boolean) false;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2355.4812F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2355.4812F), (-2355.4812F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Float float0 = new Float((-1903.952351820717));
      assertNotNull(float0);
      assertEquals((-1903.9524F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1903.9524F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-1.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (short) (-499));
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 5);
      assertNotNull(float0);
      assertEquals(5.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {5.0F, 5.0F, 5.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Double double0 = new Double((byte) (-67));
      assertNotNull(double0);
      assertEquals((-67.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-67.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) (short)2);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-3265.239189));
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) 49.0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {49.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertNotNull(doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Byte byte0 = new Byte((byte)57);
      assertNotNull(byte0);
      assertEquals((byte)57, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)57);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)57);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)82);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)117);
      assertNotNull(byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Short short0 = new Short((short)1959);
      assertNotNull(short0);
      assertEquals((short)1959, (short)short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1183);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1959, (short)1183, (short)1183}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-4720));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)477);
      assertNotNull(shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Integer integer0 = new Integer((-2005));
      assertNotNull(integer0);
      assertEquals((-2005), (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1015));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2005), (-1015), (-1015), (-1015)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 3430);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertNotNull(integerArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-2360L));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2360L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-2360L));
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(characterArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      char char0 = '+';
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+', '+', '+', '+', '+'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'o');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 'K');
      assertNotNull(charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Character character0 = Character.valueOf('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'2', '2'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertNotNull(charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2414));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-32));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-238.4F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-238.4F), 1449);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-238.4F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-94L), 1);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2263.42F, (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)28;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)28);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {28.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-21.021162F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-263.79843);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-263.79843), (double) 0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-263.79843), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3889.911709148473), 6, (-2862.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2820, (-1775.93583));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2071.601805687115, arrayUtils0.INDEX_NOT_FOUND, (double) (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1868.3480456852492);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1868.3480456852492), 1);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, (-1868.3480456852492), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-595.6531486061837), (-3540));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2123.90461668459), (double) 1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)5);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)36, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-84), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-39), 2667);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-123));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      boolean boolean0 = ArrayUtils.contains(charArray0, ']');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {']', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 48);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'c', (-3200));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'N', (-212));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'A');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'A');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1959;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1959);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)1959, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)45);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short) (-988);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-988));
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-988)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1, (-1480));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-4720), (int) (short) (-4720));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'Q';
      boolean boolean0 = ArrayUtils.contains(intArray0, 81);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {81, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (-3817));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1625), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = 5;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 5);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 5, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(intArray0, (-2146952749), (-1267));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1));
      assertEquals(0, int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, (-1662L), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 111L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray0, (Object) short0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object) "fS9@", 0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int[] intArray0 = new int[4];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 48);
      assertEquals(4, integerArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 48);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer((byte) (-67));
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Character character0 = Character.valueOf('3');
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object) character0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "Xf2-opO3qp");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer((-494));
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Character character0 = Character.valueOf('`');
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) character0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_OBJECT_ARRAY, (Object) arrayUtils0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Float float0 = new Float((-1903.952351820717));
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) floatArray0, (Object) null);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) floatArray0, (Object) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object) null, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Byte byte0 = new Byte((byte)1);
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) byte0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(arrayUtils0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameType("A=fyx*D;,{Gj", "A=fyx*D;,{Gj");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, arrayUtils0.INDEX_NOT_FOUND);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-85));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -85, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("3E,`i/cR9");
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, (boolean[]) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("java.lang.Integer");
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      double[] doubleArray0 = new double[26];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[5] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)48);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      long[] longArray0 = new long[8];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 2146);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 0, 508);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 3);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-84), (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (int) (short)45, (int) (short)45);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((byte)0);
      integerArray0[1] = integer0;
      integerArray0[2] = integerArray0[1];
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) integerArray0[2], 1711);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3151), 2);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), 5);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0, 0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1), (-1));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 1138);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, 965, 2340);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 1073741824, 1073741824);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-2146339031), (-2146339031));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-958), 104);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, 1847, (-1));
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (short)0, (-1997));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-972), 2677);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1), (-715827883));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, 1731, 5);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-806), 1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1680), 3);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (int) (short)45, (-1));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-564), (int) (short)888);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1191), 64);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, 683, 683);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (byte)95, (int) (byte)85);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-64), (-64));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.subarray((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 2146985276, (-2145158507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, 397, 1);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, 2215.7F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-3737.9903625));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1885.751443842533));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)4);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'K');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 64);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleEntry<String, String>[]) null, (AbstractMap.SimpleEntry<String, String>[]) null);
      assertNull(abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      char[] charArray0 = new char[8];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '\u0000', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 'W');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, 1847);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-93));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleImmutableEntry<Object, String>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, 259);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 259, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1976.466555));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)901);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)17);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'r');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-2010.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, 1073741824, (short)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1073741824, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-947));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -947, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 675.1182718174302);
      assertArrayEquals(new double[] {675.1182718174302}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEquals(arrayUtils0, "h@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (byte)20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-2721));
      assertArrayEquals(new short[] {(short) (-2721)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)121);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) "I8ZH3z4<eaEde+7{");
      assertEquals("I8ZH3z4<eaEde+7{", string0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2672);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-41.612473F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1.5, 1.5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1903.952351820717));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'W');
      assertArrayEquals(new char[] {'W'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(2, int0);
  }
}

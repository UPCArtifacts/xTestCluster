/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:47:25 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 1780, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1780, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2011, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-831.149F), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 4, 1088);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)881, 0, (double) 0L);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-33), 81);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)20, 1);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)48;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '9', 85);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', 'x'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      boolean boolean0 = ArrayUtils.contains(charArray0, '3');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.indexOf(charArray0, ' ', Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[7];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)122);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (byte)48);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[5] = (-1);
      intArray0[6] = 506;
      intArray0[7] = 1;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-1), 506, 1}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), 0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-169);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-94);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-94);
      intArray0[5] = (int) (byte)122;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals(6, int0);
      assertArrayEquals(new int[] {(-169), (-1), (-94), (-1), (-94), 122, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-466L), 2);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[7], 0);
      assertEquals(0, int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "#";
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 54);
      assertEquals((-1), int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 512, 512);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, shortArray0);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, intArray0);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = new float[4];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) floatArray1, (Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 0, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (int) (short)1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 0, (-986));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, Integer.MAX_VALUE);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), 2599);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 5);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-1), 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-2310));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (int) 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 64, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 0, (-304));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleImmutableEntryArray0);
      assertSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) doubleArray0);
      assertSame(doubleArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-231));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) "/54b@W2EAO5");
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[6];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) integerArray0, (Object) "~7}SE");
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 17L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 3544);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-94));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (short)0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = ArrayUtils.remove(stringArray0, 1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.remove(objectArray0, 0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) (short)1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (byte)0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.remove(charArray0, (int) (short)1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 36);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2186;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2186, 48);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2186}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(1, int0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-722L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-722L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-722L), 2);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-722L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = (-1851);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1851), 2352);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {0, 0, (-1851), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-238.4F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-238.4F), 1449);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-238.4F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-237.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-237.0F));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-237.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = (float) 81L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 81);
      assertEquals(3, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 81.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1, (double) (byte)109);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-122.271);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-122.271), 1);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, (-122.271), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-3444);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-3444), 23.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-3444.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 'Q', 81.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 80.084;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 80.084);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {80.084, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u001B';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u001B', 1);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', '\u001B'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'M');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 't';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 't');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)20;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)20, 4);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)36;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)36);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-94));
      assertEquals((-94), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(2070);
      assertEquals(2070, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short)2011;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2011);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2011, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 1);
      assertEquals(1, int0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(0, int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'A';
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, (long) 0);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, (-855L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[5] = (float) (byte) (-94);
      int int0 = ArrayUtils.indexOf(floatArray0, (-94.0F), 0);
      assertEquals(5, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-94.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3074.907F;
      int int0 = ArrayUtils.indexOf(floatArray0, 3074.907F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {3074.907F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 81;
      int int0 = ArrayUtils.indexOf(floatArray0, 81.0F);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, 81.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2010.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2010.0), 1.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-2010.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2010.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 1.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-2010.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2752.11767696;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2752.11767696);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 2752.11767696}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      int int0 = ArrayUtils.indexOf(charArray0, '_');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[3] = '>';
      int int0 = ArrayUtils.indexOf(charArray0, '>');
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '>', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-125);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-125), (int) (byte)7);
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-125), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-111));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[5];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(10, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)1, (short) (-1951));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1951)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray1 = ArrayUtils.add(objectArray0, 2, object0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(4, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {3, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-4950.157F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-4950.157F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, 1781, (long) 1781);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1781, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 3544, 740.1494147387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3544, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte)111);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2680);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-94);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-94), (int) (byte) (-94));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-94.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.indexOf(floatArray0, (-94.0F), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 2, 113);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2447.204928739), (-1), 1.0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4052.32905318, 2146377318);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), 4985);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3115.85200768);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0, 740.1494147387);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-3115.85200768), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2010.0), (-1), (double) '4');
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 13, 2144.762909535723);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2146.0975973622103, 0, (double) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-33);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-33.0), (-1466));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-33.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (int) (byte)3);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-70.490069046), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)20, 4);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)20, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)93, (int) (short) (-176));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-125), 1758);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)112, (-1961));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, '\"', 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short) (-96);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-96), 3);
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-96), (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-39));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)3972, 2146794435);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = (int) (short)7;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)7, (int) (short) (-2418));
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 7}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = ArrayUtils.indexOf(intArray0, 2, (-1001));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, 4985, 4985);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (byte) (-94), 36);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 2, 1857);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[2] = (long) (byte)2;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte)2, 1);
      assertEquals(2, int0);
      assertArrayEquals(new long[] {0L, 0L, 2L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[7];
      int int0 = ArrayUtils.indexOf(longArray0, (-2325L), (int) (byte) (-125));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, (-1107L), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[5] = (Object) 1914L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5], Integer.MAX_VALUE);
      assertEquals(5, int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) arrayUtils0, 1);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-38);
      Byte byte1 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) byte0, (-611));
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (-279L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.indexOf(charArray0, '>');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1L));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_OBJECT_ARRAY, (Object) arrayUtils0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 28L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 28L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 28L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 57;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 57.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {57.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'A';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'A');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)111;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)111);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)111, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 1, (byte) (-23));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-2921));
      assertEquals((-2921), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-1), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, (-3477), (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3477, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object) (-1));
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayUtils0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Float
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, (-2145894094));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 0);
      boolean boolean0 = ArrayUtils.isEmpty(abstractMap_SimpleEntryArray0);
      assertTrue(boolean0);
      assertEquals(0, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 3);
      boolean boolean0 = ArrayUtils.isEmpty(abstractMap_SimpleEntryArray0);
      assertFalse(boolean0);
      assertEquals(3, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((AbstractMap.SimpleEntry<Object, Integer>[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(744.30804F);
      assertEquals(744.30804F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-12));
      assertArrayEquals(new float[] {744.30804F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 1952);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2342.0479F);
      assertArrayEquals(new float[] {2342.0479F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Double double0 = new Double(641.1689);
      assertEquals(641.1689, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertArrayEquals(new double[] {641.1689, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 1L);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Double double0 = new Double(1952);
      assertEquals(1952.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1952.0, 1952.0, 1952.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)85);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)85, (byte)85, (byte)85, (byte)85}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)48);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)101);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)4}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Short short0 = new Short((short) (-11713));
      assertEquals((short) (-11713), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)57);
      assertArrayEquals(new short[] {(short) (-11713)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)57);
      assertArrayEquals(new short[] {(short)57}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)57}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)4);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)57);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2751));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((byte)4);
      assertEquals(4L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)4);
      assertArrayEquals(new long[] {4L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)4);
      assertArrayEquals(new long[] {4L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-957L));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((byte)4);
      assertEquals(4L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {4L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[0]);
      assertArrayEquals(new char[] {'?', '?', '?', '?', '?'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '(');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 'g');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 563);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1285));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      int int0 = ArrayUtils.indexOf(booleanArray1, (boolean) boolean0, (int) (byte) (-49));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, 69.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1393.43F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1393.43F), 562);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1393.43F), (-1493));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2146L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2146.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1466.0F));
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1), 4136.54);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 119, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, 2017, (double) 0L);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-1), 649.382828);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-122.271);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-122.271), 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2622.75355743, (-2310));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2748.1498), 1956.02376529701);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-2010.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, 4201.3, (-1), 4201.3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 2342.0479F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2342.0478515625);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, 473.694636572247, (-78));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)88);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-39), (int) (byte) (-39));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)28, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-117));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '3';
      boolean boolean0 = ArrayUtils.contains(charArray0, '3');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '9', 85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '!', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'u', 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      int int0 = ArrayUtils.indexOf(charArray0, '^', 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.indexOf(charArray0, '&', (-2782));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'Q');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)1557;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1557);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[6] = (short) (-3444);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3444));
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1471), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1471), 2880);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)111;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)111);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-39));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-540));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'Q';
      boolean boolean0 = ArrayUtils.contains(intArray0, 81);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1851), 2352);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-4065), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 940;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 940);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {940, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-570L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-570L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-722L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-722L), 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-540L), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, (-1466L), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-68L), 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, (long) 0, (int) (byte) (-125));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, (int) (byte)36);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Integer integer0 = new Integer(1926);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer>[] abstractMap_SimpleEntryArray0 = ArrayUtils.add((AbstractMap.SimpleEntry<Integer, Integer>[]) null, abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntryArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) abstractMap_SimpleEntryArray0, (Object) null, 1926);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Integer integer0 = new Integer(1);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_OBJECT_ARRAY, (Object) arrayUtils0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) true, 2180);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[9];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) arrayUtils0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_STRING_ARRAY, (Object) "2W\bJ}]Hlbe.G1sjv");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[4]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) null);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 54);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, object0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "#", 54);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameType(arrayUtils0.INDEX_NOT_FOUND, arrayUtils0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, arrayUtils0.INDEX_NOT_FOUND);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Float float0 = new Float((float) 0L);
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[4];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-92), 1762);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 897, 2143865041);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 36, (-1));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-845), 4985);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 945, (-2479));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1), 788);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)3, 646);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0, (-1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2147300758, 2147300758);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-4022), 267);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)109);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)36, (int) (byte)36);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (-1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2001), 512);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 279, 1843);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2669), (-2669));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-26155), (int) (short)2856);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, 2362, 512);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 6, 6);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2479), 7);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), 3544);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-2144793877));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 36, (-2255));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, 1034, (-2759));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-65), 15);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 79, 79);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-305), (-305));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-1), 775);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-1), (-1));
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-1158.3978));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleEntry<String, String>[]) null, (AbstractMap.SimpleEntry<String, String>[]) null);
      assertNull(abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) "java.lang.Byte", "[D\"^&ku[7q>M");
      assertEquals("java.lang.Byte", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), ';');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, 1847);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, (-2127));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleImmutableEntry<Object, String>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, 2929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2929, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, 512, 4429.006F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 512, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0, (-2804.0));
      assertArrayEquals(new double[] {(-2804.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) 57);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, 2857.69F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'C');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short) (-1), (short)1115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-94));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -94, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) booleanArray0, (Object) boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2791.2332549352277));
      assertArrayEquals(new double[] {(-2791.2332549352277)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEquals(arrayUtils0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte)11, (byte)11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-632));
      assertArrayEquals(new short[] {(short) (-632)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'W');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)88);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1.0, (-1245.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (int) (short)27);
      assertArrayEquals(new int[] {27}, intArray0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-12));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, 0, (-1688L));
      assertArrayEquals(new long[] {(-1688L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'y');
      assertArrayEquals(new char[] {'y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1273));
      assertEquals((-1), int0);
  }
}

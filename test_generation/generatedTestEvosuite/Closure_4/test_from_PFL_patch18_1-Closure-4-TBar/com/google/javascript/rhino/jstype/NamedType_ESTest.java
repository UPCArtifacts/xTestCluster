/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:19:10 GMT 2021
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.Property;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 0, 1);
      String string0 = namedType0.toStringHelper(false);
      assertEquals("Unknown class name", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "b\f", 0, 0);
      String string0 = namedType0.toStringHelper(true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(1312);
      linkedHashSet0.add("");
      ImmutableList<String> immutableList0 = ImmutableList.copyOf((Iterable<? extends String>) linkedHashSet0);
      jSTypeRegistry0.setTemplateTypeNames(immutableList0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-31), (-31));
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(namedType0);
      JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderInequality(jSType0);
      SimpleSlot simpleSlot0 = new SimpleSlot("Not declared as a type name", jSType_TypePair0.typeB, true);
      JSType jSType1 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "Named type with empty name component");
      assertFalse(jSType1.isRecordType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 0, 1);
      JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      SimpleSlot simpleSlot0 = new SimpleSlot("Named type with empty name component", jSType0, true);
      namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "Not declared as a constructor");
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      SimpleSlot simpleSlot0 = new SimpleSlot(" Y&:2mjG9aWY", jSType0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "size must be non-negative", 1, 1);
      namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, (String) null);
      assertEquals("Unknown class name", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "'6oT", "'6oT", 0, 159);
      SimpleSlot simpleSlot0 = new SimpleSlot(";5\"", namedType0, true);
      JSType jSType0 = namedType0.getTypedefType((ErrorReporter) null, simpleSlot0, ";5\"");
      assertFalse(jSType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "URIError", "", 1, 1);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = Node.newString("Unknown class name");
      Property property0 = new Property("Unknown class name", noResolvedType0, true, node0);
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, property0, "");
      assertEquals("URIError", namedType0.getReferenceName());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, ">", "\n\nSubtree1: ", (-4176), (-4176));
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(namedType0);
      SimpleSlot simpleSlot0 = new SimpleSlot((String) null, jSType0, true);
      JSType jSType1 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "Unknown class name");
      assertEquals(">", namedType0.getReferenceName());
      assertNotNull(jSType1);
      assertTrue(namedType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "com.google.javascript.rhino.jstype.NamedType", (-105), (-33));
      Node node0 = Node.newString(16, "URIError");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) namedType0, node0);
      SimpleSlot simpleSlot0 = new SimpleSlot("HCNT9{BB+D", functionType0, true);
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "Not declared as a constructor");
      assertEquals("", namedType0.getReferenceName());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Date", "R", 1715, 1715);
      NoType noType0 = new NoType(jSTypeRegistry0);
      SimpleSlot simpleSlot0 = new SimpleSlot("Unknown class name", noType0, false);
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "");
      assertNotNull(jSType0);
      assertEquals("Date", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "ERROR_TYPE", (String) null, (-2323), 0);
      SimpleSlot simpleSlot0 = new SimpleSlot("6~lB.]29", unknownType0, true);
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "Not declared as a type name");
      assertNotNull(jSType0);
      assertFalse(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Date", "", 1715, 1715);
      NoType noType0 = new NoType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noType0);
      namedType0.getReferencedType();
      assertTrue(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NamedType$PropertyContinuation", "com.google.javascript.rhino.jstype.NamedType$PropertyContinuation", 159, 159);
      String string0 = namedType0.getReferenceName();
      assertEquals("com.google.javascript.rhino.jstype.NamedType$PropertyContinuation", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "*", "*", (-2303), (-2303));
      // Undeclared exception!
      try { 
        namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "8P!0P1", "8P!0P1", 0, 0);
      // Undeclared exception!
      try { 
        namedType0.getTypedefType(simpleErrorReporter0, (StaticSlot<JSType>) null, "8P!0P1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamedType namedType0 = null;
      try {
        namedType0 = new NamedType((JSTypeRegistry) null, "Unknown class name", "com.google.javascript.rhino.jstype.NamedType", 0, 1095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = null;
      try {
        namedType0 = new NamedType(jSTypeRegistry0, (String) null, "LAZY_EXPRESSIONS", (-1197), (-1197));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Named type with empty name component", 1, 1);
      namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      Node node0 = Node.newNumber((double) 0);
      namedType0.defineProperty("Not declared as a constructor", unknownType0, false, node0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      JSType jSType0 = namedType0.getReferencedType();
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Fsf", "Bad type annotation. Unknown type ", (-2006), 1);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(namedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "1mAP", "", (-1627), (-1));
      boolean boolean0 = namedType0.setValidator((Predicate<JSType>) null);
      assertEquals("1mAP", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "[[A~m<lnjj:'a[BK", "", 0, 14);
      Node node0 = Node.newNumber(0.0, (-222), 0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      Property property0 = new Property("", templateType0, true, node0);
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, property0, "Named type with empty name component");
      assertEquals("[[A~m<lnjj:'a[BK", namedType0.getReferenceName());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-11), (-11));
      SimpleSlot simpleSlot0 = new SimpleSlot("Named type with empty name component", (JSType) null, true);
      namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "q-)");
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "URIError", ";&WMO", 2313, 2313);
      Node node0 = Node.newString(25, "com.google.javascript.rhino.jstype.NamedType$PropertyContinuation");
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("com.google.javascript.rhino.jstype.NamedType$PropertyContinuation", node0, (ObjectType) namedType0);
      namedType0.resolveInternal(simpleErrorReporter0, objectType0);
      assertTrue(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-11), (-11));
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      namedType0.setReferencedType(jSType0);
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, ">", "\n\nSubtree1: ", (-4176), (-4176));
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(namedType0);
      Node node0 = Node.newString(1392, "Unknown class name", 0, 1);
      namedType0.defineProperty("|k$Q:4HyNMJ@M7+", jSType0, false, node0);
      boolean boolean0 = namedType0.defineProperty("gR>fu!F5", recordType0, false, node0);
      assertTrue(namedType0.isNominalType());
      assertEquals(">", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "URIError", "URIError", 1, 1);
      Node node0 = Node.newString(1, "Named type with empty name component", (-1), (-1963));
      namedType0.defineSynthesizedProperty("Unknown class name", (JSType) null, node0);
      namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", (String) null, 1715, 1715);
      String string0 = namedType0.getReferenceName();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 1, 0);
      namedType0.hashCode();
      assertEquals("", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "[[A~m<lnjj:'a[BK", "", 0, 14);
      boolean boolean0 = namedType0.hasReferenceName();
      assertTrue(boolean0);
      assertEquals("[[A~m<lnjj:'a[BK", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Date", "R", 1715, 1715);
      boolean boolean0 = namedType0.isNominalType();
      assertEquals("Date", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 0, 1);
      boolean boolean0 = namedType0.isNamedType();
      assertEquals("Unknown class name", namedType0.getReferenceName());
      assertTrue(boolean0);
  }
}

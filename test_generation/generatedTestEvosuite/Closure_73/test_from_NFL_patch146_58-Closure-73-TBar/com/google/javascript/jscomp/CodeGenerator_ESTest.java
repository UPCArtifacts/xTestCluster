/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:30:39 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("r<>jk1");
      assertEquals("\"r<>jk1\"", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(275, 275, 110);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node1 = new Node(93, node0, node0, node0, 23, 8);
      // Undeclared exception!
      try { 
        codeGenerator0.addArrayList(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = CodeGenerator.isSimpleNumber("0R{V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      codeGenerator0.addList((Node) null, false, codeGenerator_Context0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addList((Node) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addList((Node) null, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.strEscape("Bad GETELEM: expected 2 children but got %s", 'S', "Bad GETELEM: expected 2 children but got %s", "Bad GETELEM: expected 2 children but got %s", "com.google.javascript.jscomp.CodingConvention$SubclassRelationship", charsetEncoder0);
      assertEquals("SBad GETELEM: expected 2 children but got %sS", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("AoT{");
      assertEquals("AoT{", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      // Undeclared exception!
      try { 
        CodeGenerator.strEscape((String) null, 'S', "\"<!--u007f#HcDw\"", (String) null, "'k\"#j", charsetEncoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      // Undeclared exception!
      try { 
        CodeGenerator.regexpEscape((String) null, charsetEncoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeGenerator.regexpEscape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      // Undeclared exception!
      try { 
        CodeGenerator.jsString((String) null, charsetEncoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeGenerator.isSimpleNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeGenerator.identifierEscape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeGenerator.getSimpleNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeGenerator.escapeToDoubleQuotedJsString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newString("*");
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.BEFORE_DANGLING_ELSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newString(2890, "/script");
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.PRESERVE_BLOCK;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=2890> (type 2890)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      Node node0 = Node.newNumber(3426.676726160304);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.PRESERVE_BLOCK;
      // Undeclared exception!
      try { 
        codeGenerator0.addLeftExpr((Node) null, (-2284), codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(275, 275, 275);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.STATEMENT;
      // Undeclared exception!
      try { 
        codeGenerator0.addLeftExpr(node0, 1, codeGenerator_Context0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=275> (type 275)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("1zB", "1zB");
      // Undeclared exception!
      try { 
        codeGenerator0.addExpr(node0, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for block (type 125)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.add("r|8-M$INrkjM''m3M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.OTHER;
      // Undeclared exception!
      try { 
        codeGenerator0.add((Node) null, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      Node node0 = Node.newNumber((-182.2295));
      // Undeclared exception!
      try { 
        codeGenerator0.add(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("1zB", "1zB");
      String string0 = compiler0.toSource(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(108);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("\"<!--u007f#HcDw\"");
      assertEquals("/\"<\\!--u007f#HcDw\"/", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.jsString("</scriptw", charsetEncoder0);
      assertEquals("\"<\\/scriptw\"", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("25`>");
      assertEquals("\"25`>\"", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString(">Pw3f$:Yh");
      assertEquals("\">Pw3f$:Yh\"", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("<u9#HcDw");
      assertEquals("/<u9\\u007f#HcDw/", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("\n");
      assertEquals("/\\n/", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.regexpEscape("\u0000", charsetEncoder0);
      assertEquals("/\\0/", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.jsString("$QO92Ei##e'.CP&+", charsetEncoder0);
      assertEquals("\"$QO92Ei##e'.CP&+\"", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = CodeGenerator.jsString("/lOV\"hbcLXd/", (CharsetEncoder) null);
      assertEquals("'/lOV\"hbcLXd/'", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newString("ABT{", (-165), (-596));
      // Undeclared exception!
      try { 
        codeGenerator0.addAllSiblings(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addAllSiblings((Node) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(275, 275, 110);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addArrayList(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=275> (type 275)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addArrayList((Node) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("Calling Context.exit without previous Context.enter", 47, 92);
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      // Undeclared exception!
      try { 
        codeGenerator0.addExpr(node0, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = CodeGenerator.getSimpleNumber("EL");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = CodeGenerator.isSimpleNumber("39&Y''z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = CodeGenerator.isSimpleNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(130, "~", 894, 118);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("ABT{", 2806, 2806);
      Node node1 = new Node(41, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("1zB", "1zB");
      Node node1 = new Node(112, node0, node0, node0, node0);
      String string0 = compiler0.toSource(node1);
      assertEquals("default:", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(148);
      Node node1 = new Node(14, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("get ", 108, 3048);
      Node node1 = Node.newString(13, "5", 5, 1);
      Node node2 = new Node(47, node1, node0, node1, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Expected children to be strings
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(4, 48, 1);
      String string0 = compiler0.toSource(node0);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("ABT{", (-5527), 118);
      Node node1 = new Node(2277, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2277
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("3.`u^3<cF<`Q'}nh[%");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("1zB", (-3424), 1893);
      Node node1 = new Node(153, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString(149, "[", 166, 833);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 149
         // CONST [ 166
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("get ", 108, 3048);
      Node node1 = new Node(143, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 143
         // XMLATTR
         //     STRING get  108
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = new Node(142, 105, 810);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 142
         // DOTQUERY 105
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("EP*");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("java.lang.Long", 669, 669);
      Node node1 = new Node(141, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 141
         // XML
         //     STRING java.lang.Long 669
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("get ", 108, 3048);
      Node node1 = new Node(137, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 137
         // LOCAL_BLOCK
         //     STRING get  108
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString(135, "Missing BLOCK child.");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 135
         // SETPROP_OP Missing BLOCK child.
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("Mu3I4k&>!PLT*W+XO", 669, 128);
      Node node1 = new Node(128, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 128
         // LOOP
         //     STRING Mu3I4k&>!PLT*W+XO 669
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("EP*");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString(126, "|O-QI");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("Calling Context.exit without previous Context.enter", 47, 92);
      Node node1 = new Node(125, node0, node0, node0, node0);
      String string0 = compiler0.toSource(node1);
      assertEquals("\"Calling Context.exit without previous Context.enter\"", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 1218, 1021);
      Node node1 = new Node(118, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      String string0 = compiler0.toSource(node1);
      assertEquals("var \"OAdg_^i\"", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 2649, 269);
      Node node1 = new Node(114, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 2649, 254);
      Node node1 = new Node(108, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 97, 254);
      Node node1 = new Node(97, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 97
         // ASSIGN_MOD
         //     STRING OAdg_^i 97
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      String string0 = compiler0.toSource(node0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("Calling Context.exit without previous Context.enter", 60, 786);
      Node node1 = new Node(77, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(64, 35, 47);
      String string0 = compiler0.toSource(node0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", (-1081), 2806);
      Node node1 = new Node(62, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 62
         // RETURN_RESULT
         //     STRING OAdg_^i
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("1zB", 669, 79);
      Node node1 = new Node(61, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 61
         // THISFN
         //     STRING 1zB 669
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("EP*");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("java.lang.Long", 669, 669);
      Node node1 = new Node(51, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 51
         // IN
         //     STRING java.lang.Long 669
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("&", 7, (-12));
      Node node1 = new Node(50, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 50
         // RETHROW
         //     STRING &
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString(49, "}JKa8A+D", 153, 28);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(48, 142, 1);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 48
         // BINDNAME 142
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("get ", 108, 3048);
      Node node1 = new Node(47, node0, node0, node0, node0);
      String string0 = compiler0.toSource(node1);
      assertEquals("/get /", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newNumber(0.0, (-282), 147);
      String string0 = compiler0.toSource(node0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("E*");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("java.lang.Long", 669, 669);
      Node node1 = new Node(33, node0, node0, node0, 18, 6);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Bad GETPROP: expected 2 children, but got 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("3.`u^3<cF<`Q'}nh[%");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("1zB", (-3424), 1893);
      Node node1 = new Node(30, node0, node0, node0, node0);
      String string0 = compiler0.toSource(node1);
      assertEquals("new \"1zB\"", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 2649, 254);
      Node node1 = new Node(24, node0, 13, 8);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 24
         // DIV 13
         //     STRING OAdg_^i 2649
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("get ", 124, 60);
      Node node1 = new Node(23, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 23
         // MUL
         //     STRING get  124
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("vVz}K[SqcIq{~5l");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("vVz}K[SqcIq{~5l", 143, 143);
      Node node1 = new Node(22, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 22
         // SUB
         //     STRING vVz}K[SqcIq{~5l 143
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(21, 146, 138);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 21
         // ADD 146
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 97, 97);
      Node node1 = new Node(20, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 20
         // URSH
         //     STRING OAdg_^i 97
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("rAoeJ");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString(18, "rAoeJ", 48, 4);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 18
         // LSH rAoeJ 48
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString(17, "~", 48, 127);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 17
         // GE ~ 48
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("ABT{", 2191, 98);
      Node node1 = new Node(15, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 15
         // LE
         //     STRING ABT{ 2191
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("1uz", 669, 669);
      Node node1 = new Node(14, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 14
         // LT
         //     STRING 1uz 669
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("3.`u^3<cF<`Q'}nh[%");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("1zB", 153, 98);
      Node node1 = new Node(12, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 12
         // EQ
         //     STRING 1zB 153
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("AoT{");
      Node node0 = Node.newString("OAdg_^i", (-1081), 2805);
      Node node1 = new Node(11, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 11
         // BITAND
         //     STRING OAdg_^i
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 97, 97);
      Node node1 = new Node(8, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      String string0 = compiler0.toSource(node1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("ABT{", 1692, 6);
      Node node1 = new Node(6, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        compiler0.toSource(node1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 6
         // IFEQ
         //     STRING ABT{ 1692
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString(5, "Y\"[|NcK(a<v*krLI1", 18, 24);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 5
         // GOTO Y\"[|NcK(a<v*krLI1 18
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("ABT{", (-165), (-596));
      Node node1 = new Node(4, node0, node0, node0, node0);
      Compiler compiler0 = new Compiler();
      String string0 = compiler0.toSource(node1);
      assertEquals("return\"ABT{\"", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Node.newString("AoT{", 3048, 108);
      Node node1 = Node.newString(41, "Calling Context.exit without previous Context.enter", (-1), 1);
      Node node2 = new Node(12, node0, node0, node1, node1);
      String string0 = compiler0.toSource(node2);
      assertEquals("\"AoT{\"==null", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("AoT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Node.newString("k0gV", 670, 670);
      Node node1 = new Node(32, node0, node0, node0, node0);
      String string0 = compiler0.toSource(node1);
      assertEquals("typeof\"k0gV\"", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(258, 258, 258);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=258> (type 258)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newNumber(4.294967296E9, (-2270), (-2270));
      // Undeclared exception!
      try { 
        codeGenerator0.addCaseBody(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.tagAsStrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABT{");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseTestCode(" sc");
      String string0 = compiler0.toSource(node0);
      assertEquals("sc", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newNumber(0.0, 86, 86);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("OAdg_^i", 2649, 254);
      Compiler compiler0 = new Compiler();
      String string0 = compiler0.toSource(node0);
      assertEquals("\"OAdg_^i\"", string0);
  }
}

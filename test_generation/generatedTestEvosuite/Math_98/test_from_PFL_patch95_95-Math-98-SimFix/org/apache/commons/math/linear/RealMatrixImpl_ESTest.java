/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:33:09 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RealMatrixImpl_ESTest extends RealMatrixImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1160.37858247;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1160.37858247, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1160.37858247, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      realMatrixImpl0.hashCode();
      assertEquals(5, doubleArray0.length);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1160.37858247, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1160.37858247, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(17, 11);
      assertNotNull(realMatrixImpl0);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(11, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      double[] doubleArray0 = new double[5];
      try { 
        realMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 236;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {55696.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1376, 1376);
      assertNotNull(realMatrixImpl0);
      assertEquals(1376, realMatrixImpl0.getColumnDimension());
      assertEquals(1376, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      
      double[] doubleArray0 = new double[9];
      try { 
        realMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getSubMatrix(0, (-3460), (-1014), (-507));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(36, 819);
      assertNotNull(realMatrixImpl0);
      assertEquals(36, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(819, realMatrixImpl0.getColumnDimension());
      
      try { 
        realMatrixImpl0.multiply(realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, true);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(2, realMatrixImpl1.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      try { 
        realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      try { 
        realMatrixImpl0.add(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(1981, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(17, 17);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 17;
      try { 
        realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.transpose();
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.transpose();
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.isSquare());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertEquals(4, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.subtract(realMatrixImpl0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(3, realMatrixImpl1.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarAdd((-366.7));
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(366.7, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl2 = realMatrixImpl0.subtract(realMatrixImpl1);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl2);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl2.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl2.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(366.7, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl2.isSquare());
      assertEquals(1, realMatrixImpl2.getRowDimension());
      assertEquals(366.7, realMatrixImpl2.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl2.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl2);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl2);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl2, realMatrixImpl1);
      assertNotSame(realMatrixImpl2, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.subtract((RealMatrix) realMatrixImpl0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.isSquare());
      assertEquals(4, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(17, 17);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(17);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(289.0, realMatrix0.getNorm(), 0.01);
      assertEquals(17, realMatrix0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(17, realMatrix0.getRowDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      
      RealMatrix realMatrix1 = realMatrixImpl0.subtract(realMatrix0);
      assertNotNull(realMatrix1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(289.0, realMatrix0.getNorm(), 0.01);
      assertEquals(17, realMatrix0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(17, realMatrix0.getRowDimension());
      assertTrue(realMatrix1.isSquare());
      assertEquals(17, realMatrix1.getRowDimension());
      assertEquals(289.0, realMatrix1.getNorm(), 0.01);
      assertEquals(17, realMatrix1.getColumnDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrixImpl0, realMatrix1);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrixImpl0);
      assertNotSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 236;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply(236);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(55696.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(0.0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      
      RealMatrix realMatrix1 = realMatrix0.preMultiply((RealMatrix) realMatrixImpl0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(realMatrix1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertTrue(realMatrix1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertFalse(realMatrix1.isSquare());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(0.0, realMatrix1.getNorm(), 0.01);
      assertEquals(1, realMatrix1.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(realMatrixImpl0, realMatrix1);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrixImpl0);
      assertNotSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, false);
      assertEquals(7, doubleArray1.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(3, realMatrixImpl1.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.multiply((RealMatrix) realMatrixImpl1);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(3, realMatrixImpl1.getRowDimension());
      assertFalse(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl1, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl1);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 236;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.multiply((RealMatrix) realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(55696.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 236;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      
      double double0 = realMatrixImpl0.getTrace();
      assertEquals(1, doubleArray0.length);
      assertEquals(236.0, double0, 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(10, 10);
      assertNotNull(realMatrixImpl0);
      assertEquals(10, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(10, realMatrixImpl0.getRowDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(1);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(10, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertFalse(realMatrix0.isSquare());
      assertEquals(10, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 810);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(810, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      int int0 = realMatrixImpl0.getRowDimension();
      assertEquals(1, int0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(810, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(17, 17);
      assertNotNull(realMatrixImpl0);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      int[] intArray0 = realMatrixImpl0.getPermutation();
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 236;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      
      double double0 = realMatrixImpl0.getNorm();
      assertEquals(1, doubleArray0.length);
      assertEquals(236.0, double0, 0.01);
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      
      double double0 = realMatrixImpl0.getEntry(0, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(8, realMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 236;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertEquals(1, doubleArray0.length);
      assertEquals(236.0, double0, 0.01);
      assertEquals(236.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {236.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      
      double[][] doubleArray1 = realMatrixImpl0.getData();
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(4307, 4307);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(4307, realMatrixImpl0.getRowDimension());
      assertEquals(4307, realMatrixImpl0.getColumnDimension());
      
      int int0 = realMatrixImpl0.getColumnDimension();
      assertEquals(4307, int0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(4307, realMatrixImpl0.getRowDimension());
      assertEquals(4307, realMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(782, 782);
      assertNotNull(realMatrixImpl0);
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.copy();
      assertNotNull(realMatrix0);
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
      assertEquals(782, realMatrix0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(782, realMatrix0.getRowDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.copy();
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertFalse(realMatrix0.isSquare());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.add(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.add(realMatrixImpl0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(3, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(2.0, realMatrixImpl1.getNorm(), 0.01);
      assertFalse(realMatrixImpl1.isSquare());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.add((RealMatrix) realMatrixImpl0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.isSquare());
      assertEquals(2.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(350, 313);
      assertNotNull(realMatrixImpl0);
      assertEquals(313, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(350, realMatrixImpl0.getRowDimension());
      
      // Undeclared exception!
      realMatrixImpl0.transpose();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.transpose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.transpose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl1);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.subtract((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.solve((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.setSubMatrix((double[][]) null, 587, 587);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(201, 201);
      assertNotNull(realMatrixImpl0);
      assertEquals(201, realMatrixImpl0.getRowDimension());
      assertEquals(201, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      
      // Undeclared exception!
      realMatrixImpl0.scalarMultiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.scalarMultiply((-4124.163));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.scalarMultiply(1.0E-11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(782, 782);
      assertNotNull(realMatrixImpl0);
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      
      // Undeclared exception!
      realMatrixImpl0.scalarAdd(0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.scalarAdd((-433.37749908));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.preMultiply(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl1);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.multiply(realMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.multiply((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.luDecompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.isSingular();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.isSingular();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(4307, 4307);
      assertNotNull(realMatrixImpl0);
      assertEquals(4307, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(4307, realMatrixImpl0.getRowDimension());
      
      // Undeclared exception!
      realMatrixImpl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getTrace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getSubMatrix(1, 772, (-1), 764);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getRowMatrix(986);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getRow((-1380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getRow((-911));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(810, 780);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(780, realMatrixImpl0.getColumnDimension());
      assertEquals(810, realMatrixImpl0.getRowDimension());
      
      // Undeclared exception!
      realMatrixImpl0.getNorm();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      realMatrixImpl0.lu = doubleArray1;
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getLUMatrix();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getEntry(782, 782);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getDeterminant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getColumnMatrix((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getColumnDimension();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getColumn(1560);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getColumn(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl1);
      
      // Undeclared exception!
      try { 
        realMatrixImpl1.equals(realMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl1);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.add(realMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.add((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl((double[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.luDecompose();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.luDecompose();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.solve((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.solve((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, true);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      realMatrixImpl0.lu = doubleArray0;
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      boolean boolean0 = realMatrixImpl0.isSingular();
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(5, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      
      boolean boolean0 = realMatrixImpl0.isSquare();
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(782, 782);
      assertNotNull(realMatrixImpl0);
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
      
      boolean boolean0 = realMatrixImpl0.isSquare();
      assertTrue(boolean0);
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray0 = new double[7][7];
      realMatrixImpl0.setSubMatrix(doubleArray0, 0, 0);
      assertEquals(7, doubleArray0.length);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(7, realMatrixImpl0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, 618, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[8][0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, 1925, 1925);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[0][4];
      // Undeclared exception!
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, 0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(17, 17);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      
      RealMatrixImpl realMatrixImpl1 = realMatrixImpl0.multiply(realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(17, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(17, realMatrixImpl1.getRowDimension());
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[7][4];
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, false);
      assertEquals(7, doubleArray1.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertFalse(realMatrixImpl1.isSquare());
      assertEquals(4, realMatrixImpl1.getColumnDimension());
      
      try { 
        realMatrixImpl1.add(realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getColumnDimension();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getRowDimension();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getRow(77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarAdd((-366.7));
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(366.7, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      
      double double0 = realMatrixImpl1.getDeterminant();
      assertEquals(1, doubleArray0.length);
      assertEquals((-366.7), double0, 0.01);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(366.7, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      
      RealMatrixImpl realMatrixImpl2 = (RealMatrixImpl)realMatrixImpl1.getLUMatrix();
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl2);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl2.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl2.equals((Object)realMatrixImpl1));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertEquals(366.7, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(1, realMatrixImpl2.getColumnDimension());
      assertEquals(1, realMatrixImpl2.getRowDimension());
      assertTrue(realMatrixImpl2.isSquare());
      assertEquals(366.7, realMatrixImpl2.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl2);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl1, realMatrixImpl2);
      assertNotSame(realMatrixImpl2, realMatrixImpl1);
      assertNotSame(realMatrixImpl2, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, false);
      assertEquals(8, doubleArray1.length);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(8, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertFalse(realMatrixImpl1.isSquare());
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(8, realMatrixImpl1.getRowDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertFalse(realMatrixImpl1.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.add((RealMatrix) realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl1);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      
      boolean boolean0 = realMatrixImpl1.equals(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = realMatrixImpl0.equals(object0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      String string0 = realMatrixImpl0.toString();
      assertEquals(1, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("RealMatrixImpl{{0.0,0.0,0.0,0.0}}", string0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(760, 760);
      assertNotNull(realMatrixImpl0);
      assertEquals(760, realMatrixImpl0.getRowDimension());
      assertEquals(760, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      
      // Undeclared exception!
      realMatrixImpl0.toString();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      String string0 = realMatrixImpl0.toString();
      assertNotNull(string0);
      assertEquals("RealMatrixImpl{}", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 810);
      assertNotNull(realMatrixImpl0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(810, realMatrixImpl0.getColumnDimension());
      
      boolean boolean0 = realMatrixImpl0.isSingular();
      assertTrue(boolean0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(810, realMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(2442.3112931882);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(2442.3112931882, realMatrix0.getNorm(), 0.01);
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      
      RealMatrix realMatrix1 = realMatrix0.inverse();
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(2442.3112931882, realMatrix0.getNorm(), 0.01);
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix1.getColumnDimension());
      assertEquals(1, realMatrix1.getRowDimension());
      assertEquals(4.094482152169051E-4, realMatrix1.getNorm(), 0.01);
      assertTrue(realMatrix1.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix1);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrixImpl0);
      assertNotSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(5, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      
      try { 
        realMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(781, 781);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(781, realMatrixImpl1.getRowDimension());
      assertEquals(781, realMatrixImpl1.getColumnDimension());
      assertTrue(realMatrixImpl1.isSquare());
      
      try { 
        realMatrixImpl0.solve((RealMatrix) realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        realMatrixImpl0.solve(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[16][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, true);
      assertEquals(16, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(16, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      
      try { 
        realMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(782, 782);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
      
      double double0 = realMatrixImpl0.getTrace();
      assertEquals(0.0, double0, 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(782, 782);
      assertNotNull(realMatrixImpl0);
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
      
      try { 
        realMatrixImpl0.getColumn(782);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(782, 782);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
      
      double[] doubleArray0 = realMatrixImpl0.getColumn(31);
      assertEquals(782, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(782, realMatrixImpl0.getRowDimension());
      assertEquals(782, realMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getRow((-1380));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(792, 792);
      assertNotNull(realMatrixImpl0);
      assertEquals(792, realMatrixImpl0.getRowDimension());
      assertEquals(792, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      
      double[] doubleArray0 = realMatrixImpl0.getRow(782);
      assertEquals(792, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(792, realMatrixImpl0.getRowDimension());
      assertEquals(792, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getColumnMatrix((-595));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(13, 21);
      assertNotNull(realMatrixImpl0);
      assertEquals(21, realMatrixImpl0.getColumnDimension());
      assertEquals(13, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      
      RealMatrix realMatrix0 = realMatrixImpl0.getColumnMatrix(13);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(21, realMatrixImpl0.getColumnDimension());
      assertEquals(13, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertFalse(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(13, realMatrix0.getRowDimension());
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        realMatrixImpl0.getRowMatrix((-5139));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, 3537, 3537);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      double[][] doubleArray1 = new double[1][4];
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[3] = doubleArray1;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      double[][] doubleArray1 = new double[4][4];
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray1, 7, (-175));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      double[] doubleArray1 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, (-3082), (-3082));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      int[] intArray0 = new int[1];
      RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
      try { 
        realMatrix0.preMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      int[] intArray0 = new int[0];
      try { 
        realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1083, 1083);
      try { 
        realMatrixImpl0.getSubMatrix(1, 245, 245, 1400);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(6, 6);
      // Undeclared exception!
      try { 
        realMatrixImpl0.getSubMatrix(6, 6, 6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(10, 10);
      try { 
        realMatrixImpl0.getSubMatrix(10, 10, 10, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      try { 
        realMatrixImpl0.getSubMatrix(1, 13, 13, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 810);
      try { 
        realMatrixImpl0.getSubMatrix(1, 1, (-2248), 778);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl0.getSubMatrix((-1360), 810, (-1360), (-535));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl0.multiply((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrix realMatrix0 = realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarMultiply((-1.0));
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[1] = doubleArray0;
      realMatrixImpl1.data = doubleArray1;
      // Undeclared exception!
      try { 
        realMatrixImpl1.getNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      double[] doubleArray1 = new double[6];
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      try { 
        realMatrixImpl1.subtract((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      double[][] doubleArray1 = new double[1][2];
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1, false);
      try { 
        realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray1);
      RealMatrixImpl realMatrixImpl2 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl1.add(realMatrixImpl2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrix realMatrix0 = realMatrixImpl0.transpose();
      try { 
        realMatrixImpl0.add(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[15][0];
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl((double[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(813, (-430));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 810);
      double double0 = realMatrixImpl0.getNorm();
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(810, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl((-375), 790);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      // Undeclared exception!
      try { 
        realMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, false);
      double[][] doubleArray1 = realMatrixImpl0.getDataRef();
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      // Undeclared exception!
      try { 
        realMatrixImpl0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      // Undeclared exception!
      try { 
        realMatrixImpl0.preMultiply((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrix realMatrix0 = realMatrixImpl0.copy();
      assertEquals(3, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl0.getEntry(7, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }
}

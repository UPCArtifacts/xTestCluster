/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:32:03 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigMatrixImpl_ESTest extends BigMatrixImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumn(7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowAsDoubleArray(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.hashCode();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.hashCode();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2596, 2576);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2576, bigMatrixImpl0.getColumnDimension());
      assertEquals(2596, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(2551, 2551);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(2551, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(2551, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      bigDecimalArray0[1] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[4];
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[19];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(19, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(19, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(0, 1, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[5][9];
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(5, bigMatrixImpl1.getRowDimension());
      assertEquals(9, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(5, bigDecimalArray0.length);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[][] stringArray0 = new String[6][5];
      String[] stringArray1 = new String[2];
      stringArray0[1] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[4];
      doubleArray0[1] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(4, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.subtract(bigMatrixImpl0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(5, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getTrace();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(1, bigDecimalArray0.length);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals((byte) (-9), bigDecimal0.byteValue());
      assertEquals((short)2551, bigDecimal0.shortValue());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2563;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      assertArrayEquals(new double[] {2563.0}, doubleArray1, 0.01);
      
      int[] intArray0 = bigMatrixImpl0.getPermutation();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2576;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getNorm();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertEquals((short)2576, bigDecimal0.shortValue());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][0];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[4];
      BigDecimal bigDecimal0 = new BigDecimal((-3466));
      assertEquals((short) (-3466), bigDecimal0.shortValue());
      assertEquals((byte)118, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray1[1] = bigDecimal0;
      bigDecimalArray1[2] = bigDecimal0;
      bigDecimalArray1[3] = bigDecimalArray1[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getNorm();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals((short)3466, bigDecimal1.shortValue());
      assertEquals((byte) (-118), bigDecimal1.byteValue());
      assertEquals(1, bigDecimalArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2557;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 2557);
      assertEquals((short)2557, bigDecimal0.shortValue());
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals((short)2557, bigDecimal0.shortValue());
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigDecimal bigDecimal1 = bigMatrixImpl1.getDeterminant();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals((short)2557, bigDecimal0.shortValue());
      assertEquals((byte) (-3), bigDecimal0.byteValue());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals((byte)9, bigDecimal1.byteValue());
      assertEquals((short) (-15351), bigDecimal1.shortValue());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = bigMatrixImpl0.getDataRef();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNull(bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2596, 2576);
      assertEquals(2596, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2576, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(1040);
      assertEquals(2596, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2576, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(2596, bigMatrixImpl1.getRowDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2001, 2001);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2001, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2001, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getColumnDimension();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2001, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2001, bigMatrixImpl0.getColumnDimension());
      assertEquals(2001, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.copy();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.copy();
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.add(bigMatrixImpl0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2436));
      assertEquals((short) (-2436), bigDecimal0.shortValue());
      assertEquals((byte)124, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal0;
      bigDecimalArray0[2] = bigDecimalArray0[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(3, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(3, bigDecimalArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2551, 2551);
      assertEquals(2551, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2551, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      bigMatrixImpl0.transpose();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.transpose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(0, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.transpose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve((BigDecimal[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix((BigDecimal[][]) null, 12, 4798);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.scalarMultiply(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-713L));
      assertEquals((byte)55, bigDecimal0.byteValue());
      assertEquals((short) (-713), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(7, 2551);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2551, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.scalarAdd(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(0, bigMatrixImpl0.getRowDimension());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(7, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.operate(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.multiply(bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(0, bigMatrixImpl1.getRowDimension());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl1.multiply(bigMatrixImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl1.multiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2551, 2551);
      assertEquals(2551, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2551, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.isSingular();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 173;
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getRowMatrix(2512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(0, bigMatrixImpl0.getRowDimension());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getRowAsDoubleArray(1694);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getRow(1503);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(0, bigMatrixImpl0.getRowDimension());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getEntryAsDouble((-3), (-1696));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getEntry((-3113), (-3113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDataAsDoubleArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(0, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDataAsDoubleArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumnMatrix((-178));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(309);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumn(276);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl1.equals(bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(0, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl1.add(bigMatrixImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.add((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[][] stringArray0 = new String[14][1];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "org.apache.commons.math.linear.MatrixIndexException";
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.luDecompose();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1046, 934);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(934, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1046, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2563;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      assertArrayEquals(new double[] {2563.0}, doubleArray1, 0.01);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.solve(bigDecimalArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertNotNull(bigDecimalArray1);
      assertArrayEquals(new double[] {2563.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[19];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(19, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(19, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.operate(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      assertArrayEquals(new double[] {2551.0}, doubleArray1, 0.01);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.operate(bigDecimalArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertNotNull(bigDecimalArray1);
      assertArrayEquals(new double[] {2551.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      assertArrayEquals(new double[] {2551.0}, doubleArray1, 0.01);
      
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.isSquare();
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.isSquare();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[5][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[4];
      bigDecimalArray0[0] = bigDecimalArray1;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 5, 3167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][9];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 1, 472);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.multiply(bigMatrixImpl0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(1, 549);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(549, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl1.subtract(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.add(bigMatrixImpl0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(5, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getEntry(457, 457);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumnDimension();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getRowDimension();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      assertArrayEquals(new double[] {2551.0}, doubleArray1, 0.01);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getLUMatrix();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.hashCode();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.inverse();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      boolean boolean0 = bigMatrixImpl1.equals(bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      boolean boolean0 = bigMatrixImpl1.equals(bigMatrixImpl0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.equals((Object) null);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[19];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(19, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(19, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(19, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(19, bigDecimalArray0.length);
      assertEquals("BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
      assertEquals(7, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(7, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertEquals("BigMatrixImpl{{null,null,null,null,null,null,null}}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals("BigMatrixImpl{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(274, 3450);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(274, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(3450, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve(doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve(doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      assertArrayEquals(new double[] {2551.0}, doubleArray1, 0.01);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertNotNull(bigDecimalArray1);
      assertArrayEquals(new double[] {2551.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(887, 143);
      assertEquals(887, bigMatrixImpl0.getRowDimension());
      assertEquals(143, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(274, 3433);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3433, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(274, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getColumn(234);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3433, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(274, bigMatrixImpl0.getRowDimension());
      assertEquals(274, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray1 = new double[1];
      try { 
        bigMatrixImpl0.operate(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.operate(doubleArray0[0]);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2551, 2551);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2551, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(2551, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      assertArrayEquals(new double[] {2551.0}, doubleArray1, 0.01);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getDeterminant();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals((short)2551, bigDecimal0.shortValue());
      assertEquals((byte) (-9), bigDecimal0.byteValue());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getDeterminant();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5, bigMatrixImpl1.getRowDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray((-2761));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray1 = bigMatrixImpl0.getColumnAsDoubleArray(1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      bigDecimalArray0[1] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(7, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(1);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(7, bigDecimalArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowAsDoubleArray(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(7, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getRowAsDoubleArray(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRow(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getRow(1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[19];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(19, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(19, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumnMatrix(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(639, 1);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(639, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowMatrix((-2771));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2596, 2576);
      assertEquals(2576, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2596, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getRowMatrix(2576);
      assertEquals(2576, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2596, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(2576, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][7];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 0, 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][7];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][0];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][0];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 18, (-122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, (-1), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[19];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(19, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(19, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(1, 1, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix(0, 0, 13, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[19];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(19, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(19, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix(1, 1, (-282), (-282));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3448, 3448);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3448, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(3448, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix(276, 2147, 3448, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix(13, 13, 259, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix(11, (-1), 430, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(2031, 2031, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix((-376), (-376), (-376), (-376));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      
      bigMatrixImpl0.getDataAsDoubleArray();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
      try { 
        bigMatrixImpl0.multiply(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = bigMatrixImpl0.getNorm();
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.subtract(bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2551;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.solve(doubleArray1);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[4][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1, false);
      try { 
        bigMatrixImpl1.subtract(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(7, 2551);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(7, 2551);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(8, 7);
      try { 
        bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[] bigDecimalArray1 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      try { 
        bigMatrixImpl0.add(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.add(bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(0);
      try { 
        bigMatrixImpl1.add(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[][] stringArray0 = new String[2][5];
      String[] stringArray1 = new String[1];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[][] stringArray0 = new String[2][5];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[][] stringArray0 = new String[3][5];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[][] stringArray0 = new String[0][3];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[3] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[4][7];
      bigDecimalArray1[0] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][0];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][7];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(1977, (-4790));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((-376), (-376));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(274, 3450);
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int int0 = bigMatrixImpl0.getRoundingMode();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
      BigDecimal[][] bigDecimalArray1 = bigMatrixImpl0.getDataRef();
      assertNotNull(bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      bigMatrixImpl0.setScale(2672);
      assertEquals(2672, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1981, 1981);
      int int0 = bigMatrixImpl0.getScale();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, int0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1046, 934);
      bigMatrixImpl0.setRoundingMode(2477);
      assertEquals(2477, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      try { 
        bigMatrixImpl0.getEntryAsDouble((-3), (-1696));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

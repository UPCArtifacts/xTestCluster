/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 03:23:47 GMT 2022
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistributionImpl_ESTest extends FDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl(1.0E-14, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(590.7155637, 590.7155637);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setNumeratorDegreesOfFreedom(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1107.7378483161062);
      // Undeclared exception!
      try { 
        fDistributionImpl0.inverseCumulativeProbability((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1115.4, 1115.4);
      double double0 = fDistributionImpl0.getInitialDomain(4.7421875);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1115.4, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1115.4, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      double double0 = fDistributionImpl0.getDomainUpperBound(1107.7378483161062);
      assertEquals(1107.7378483161062, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1742.29851389, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(806.6644742, 806.6644742);
      double double0 = fDistributionImpl0.getDomainLowerBound(806.6644742);
      assertEquals(806.6644742, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(806.6644742, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(843.17670740419, 1310.84);
      double double0 = fDistributionImpl0.cumulativeProbability((-171.3621101128731));
      assertEquals(0.0, double0, 0.01);
      assertEquals(843.17670740419, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1310.84, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1115.4, 1115.4);
      double double0 = fDistributionImpl0.cumulativeProbability(603.062102);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2193.258371103, 2193.258371103);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(2.0);
      try { 
        fDistributionImpl0.inverseCumulativeProbability(0.6065997784398398);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Number of iterations=2, maximum iterations=2,147,483,647, initial=0, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.607, f(b)=0
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0E-6, 1.0E-6);
      // Undeclared exception!
      fDistributionImpl0.inverseCumulativeProbability(0.8134932219265236);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4279.42225675, 4279.42225675);
      // Undeclared exception!
      try { 
        fDistributionImpl0.inverseCumulativeProbability(4279.42225675);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl((-2300.19232), (-2300.19232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(843.17670740419, 1310.84);
      assertEquals(843.17670740419, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      
      fDistributionImpl0.setNumeratorDegreesOfFreedom(1310.84);
      assertEquals(1310.84, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1527.929566165067, 1527.929566165067);
      double double0 = fDistributionImpl0.getDenominatorDegreesOfFreedom();
      assertEquals(1527.929566165067, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1527.929566165067, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1107.7378483161062);
      double double0 = fDistributionImpl0.getNumeratorDegreesOfFreedom();
      assertEquals(1107.7378483161062, double0, 0.01);
      assertEquals(1107.7378483161062, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setDenominatorDegreesOfFreedom((-3555.803080785599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 1.0);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(806.6644742, 806.6644742);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(806.6644742, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(806.6644742, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }
}

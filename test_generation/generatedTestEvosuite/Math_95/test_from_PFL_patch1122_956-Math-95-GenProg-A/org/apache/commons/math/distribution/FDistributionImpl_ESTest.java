/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 22:05:18 GMT 2021
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistributionImpl_ESTest extends FDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1115.4, 1115.4);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setDenominatorDegreesOfFreedom(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(590.7155637, 590.7155637);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setNumeratorDegreesOfFreedom(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      double double0 = fDistributionImpl0.getInitialDomain((-234.661246369));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1107.7378483161062, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1742.29851389, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1432.4, 737.9444);
      // Undeclared exception!
      try { 
        fDistributionImpl0.inverseCumulativeProbability((-2300.19232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.6563011788482572, 0.6563011788482572);
      double double0 = fDistributionImpl0.getInitialDomain(0.6563011788482572);
      assertEquals(0.6563011788482572, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.6563011788482572, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      double double0 = fDistributionImpl0.getDomainUpperBound(779.9542705576231);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1742.29851389, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1107.7378483161062, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.63065016823053, 0.63065016823053);
      double double0 = fDistributionImpl0.getDomainLowerBound(0.63065016823053);
      assertEquals(0.63065016823053, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.63065016823053, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(843.17670740419, 1310.84);
      double double0 = fDistributionImpl0.cumulativeProbability((-171.3621101128731));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1310.84, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(843.17670740419, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.5, 0.5);
      // Undeclared exception!
      fDistributionImpl0.inverseCumulativeProbability(0.9990259543593263);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.7976931348623157E308, 1.7976931348623157E308);
      // Undeclared exception!
      try { 
        fDistributionImpl0.inverseCumulativeProbability(1.7976931348623157E308);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl((-2300.19232), (-2300.19232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(331.3176186, 331.3176186);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(331.3176186);
      assertEquals(331.3176186, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(331.3176186, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0E-15, 1.0E-15);
      fDistributionImpl0.setNumeratorDegreesOfFreedom(1530.5971678175276);
      double double0 = fDistributionImpl0.cumulativeProbability(1.0E-15);
      assertEquals(1530.5971678175276, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-3.064215547965432E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      double double0 = fDistributionImpl0.getDenominatorDegreesOfFreedom();
      assertEquals(1742.29851389, double0, 0.01);
      assertEquals(1107.7378483161062, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      double double0 = fDistributionImpl0.getNumeratorDegreesOfFreedom();
      assertEquals(1107.7378483161062, double0, 0.01);
      assertEquals(1742.29851389, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0E-6, 1.0E-6);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setDenominatorDegreesOfFreedom((-1360.5496));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      double double0 = fDistributionImpl0.getInitialDomain(0.0);
      assertEquals(1107.7378483161062, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1742.29851389, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0E-15, 1.0E-15);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(1.0E-15, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-15, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1107.7378483161062, 1742.29851389);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(1742.29851389, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1107.7378483161062, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2194.0, 2194.0);
      try { 
        fDistributionImpl0.inverseCumulativeProbability(0.5000000000001633);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Number of iterations=1, maximum iterations=2,147,483,647, initial=0, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=1, f(a)=-0.5, f(b)=0
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0E-15, 1.0E-15);
      double double0 = fDistributionImpl0.cumulativeProbability(1.0E-15);
      assertEquals(0.49999999999999195, double0, 0.01);
  }
}

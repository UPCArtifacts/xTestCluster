/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:24:45 GMT 2021
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0E-12, relationship0, openMapRealVector0, (-2254.3));
      assertNotNull(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-2254.300000000001), linearConstraint0.getValue(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(linearConstraint0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-2254.300000000001), linearConstraint0.getValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals((-2254.300000000001), linearConstraint0.getValue(), 0.01);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 706.0);
      assertNotNull(simplexTableau0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.hashCode();
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 0.0);
      assertNotNull(linearConstraint0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1306.10221));
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.hashCode();
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2056.21376);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(2056.21376, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-8.916511923915078));
      assertNotNull(simplexTableau0);
      assertEquals(2056.21376, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      simplexTableau0.hashCode();
      assertEquals(2056.21376, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.01745329052209854);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertNotNull(simplexTableau0);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.01745329052209854);
      assertNotNull(simplexTableau1);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, (-1879.82), relationship0, arrayRealVector0, 0.0);
      assertNotNull(linearConstraint0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1879.82, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1879.82, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      GoalType goalType0 = GoalType.MINIMIZE;
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(linearConstraint0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, true, 0.036, (-131));
      assertNotNull(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList1.size());
      assertEquals(1, doubleArray0.length);
      assertFalse(linkedList1.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2356.5136354864));
      assertNotNull(simplexTableau1);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean1 = simplexTableau1.equals(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertFalse(linkedList1.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.01745329052209854);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertNotNull(simplexTableau0);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-2782.6197715039093), relationship0, doubleArray0, 0.01745329052209854);
      assertNotNull(linearConstraint0);
      assertEquals(2782.6372247944314, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(2782.6372247944314, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertNotNull(simplexTableau1);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean1 = simplexTableau0.equals(simplexTableau1);
      assertEquals(0.01745329052209854, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0.19454771280288696);
      assertNotNull(linearObjectiveFunction0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(0.19454771280288696, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2396.28944, 0);
      assertNotNull(simplexTableau0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14, arrayRealVector0.getDimension());
      assertEquals(0.19454771280288696, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.subtractRow(0, 15, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (15)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 1.0;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau0.isOptimal();
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3149.264237414998;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, 998.03718253);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(998.03718253, linearConstraint0.getValue(), 0.01);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {3149.264237414998, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(998.03718253, linearConstraint0.getValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray1.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {3149.264237414998, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1879.82));
      assertNotNull(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(6, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      simplexTableau0.dropPhase1Objective();
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(6, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1323.9509785062226));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 772.9721217, 0);
      assertNotNull(simplexTableau0);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.initializeColumnLabels();
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1103.75617);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2670.05023), 0);
      assertNotNull(simplexTableau0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.subtractRow(0, 0, 1860.394589613);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 871.95);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 5013.5138);
      assertNotNull(simplexTableau0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.setEntry(0, 0, 1.0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), (-1));
      assertNotNull(simplexTableau0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertNotNull(list0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1103.75617);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1103.75617, 0);
      assertNotNull(simplexTableau0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getWidth();
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(5, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2323.17436398497);
      assertNotNull(simplexTableau0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getSlackVariableOffset();
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-433.37749908));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-433.37749908), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-433.37749908));
      assertNotNull(simplexTableau0);
      assertEquals((-433.37749908), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertEquals((-433.37749908), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1636.339);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1636.339, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 402.44, 2281);
      assertNotNull(simplexTableau0);
      assertEquals(1636.339, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertEquals(1636.339, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2230.803);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(2230.803, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0, 0);
      assertNotNull(simplexTableau0);
      assertEquals(2230.803, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(2230.803, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.999999999999);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.999999999999, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, relationship0, (-1.0));
      assertNotNull(linearConstraint0);
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertEquals(2, doubleArray1.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.999999999999, 0);
      assertNotNull(simplexTableau0);
      assertEquals(0.999999999999, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(0.999999999999, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, int0);
      assertEquals(0, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1879.82));
      assertNotNull(simplexTableau0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumObjectiveFunctions();
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-745.263));
      assertNotNull(simplexTableau0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(4, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), (-1));
      assertNotNull(simplexTableau0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0E-12, relationship0, openMapRealVector0, (-745.263));
      assertNotNull(linearConstraint0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals((-745.263000000001), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(linearConstraint0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals((-745.263000000001), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      assertNotNull(simplexTableau0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = (Double) 0.0;
      doubleArray0[1] = (Double) 0.0;
      doubleArray0[2] = (Double) 0.0;
      doubleArray0[3] = (Double) 0.0;
      doubleArray0[4] = (Double) 0.0;
      doubleArray0[5] = (Double) 0.0;
      doubleArray0[6] = (Double) 0.0;
      doubleArray0[7] = (Double) 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1144.4474949);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(161);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(161, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(161, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(170, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1144.4474949), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(161, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(170, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1144.4474949, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1144.4474949), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 19.77848367890155;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 19.77848367890155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 19.77848367890155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals((-19.77848367890155), double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 19.77848367890155, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 871.95);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 5013.5138);
      assertNotNull(simplexTableau0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getHeight();
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.999999999999);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.999999999999, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(13, doubleArray0.length);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.999999999999);
      assertNotNull(simplexTableau0);
      assertEquals(0.999999999999, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(13, doubleArray0.length);
      
      double double0 = simplexTableau0.getEntry(0, 1);
      assertEquals(0.999999999999, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1103.75617);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2670.05023), 0);
      assertNotNull(simplexTableau0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = simplexTableau0.getEntry(0, 0);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2230.803);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(2230.803, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-337.97137756157565), (-315));
      assertNotNull(simplexTableau0);
      assertEquals(2230.803, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = simplexTableau0.getEntry(0, 0);
      assertEquals(2230.803, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4837.24778);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2979.11828);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 4837.24778, 2);
      assertNotNull(simplexTableau0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = simplexTableau0.getBasicRow(0);
      assertNotNull(integer0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2979.11828, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, (int)integer0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2632.2476424));
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3713.837797566878, 2);
      assertNotNull(simplexTableau0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = simplexTableau0.getBasicRow(3);
      assertNull(integer0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.831723825053622);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.831723825053622, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(13, doubleArray0.length);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.831723825053622);
      assertNotNull(simplexTableau0);
      assertEquals(1.831723825053622, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(13, doubleArray0.length);
      
      int int0 = simplexTableau0.getArtificialVariableOffset();
      assertEquals(1.831723825053622, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(15, int0);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1465.52417733516));
      assertNotNull(linearObjectiveFunction0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals((-1465.52417733516), linearObjectiveFunction0.getConstantTerm(), 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2.0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals((-1465.52417733516), linearObjectiveFunction0.getConstantTerm(), 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)simplexTableau0.createTableau(true);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, linkedList0.size());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals((-1465.52417733516), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 19.77848367890155);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(19.77848367890155, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertNotNull(simplexTableau0);
      assertEquals(19.77848367890155, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3432);
      assertNotNull(openMapRealVector0);
      assertEquals(3432, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-3005.45194149));
      assertNotNull(linearObjectiveFunction0);
      assertEquals(3432, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3005.45194149), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1787.79843822507), 3432);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals(3432, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-3005.45194149), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      // Undeclared exception!
      simplexTableau0.getSolution();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1750), (-3314.385894637999));
      assertNotNull(openMapRealVector0);
      assertEquals((-1), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
      assertNotNull(simplexTableau0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(1756, 1756);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,756)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-745.263));
      assertNotNull(simplexTableau0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow(1637);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (1,637)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.831723825053622);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.831723825053622, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.831723825053622);
      assertNotNull(simplexTableau0);
      assertEquals(1.831723825053622, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(1115, 1.831723825053622);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,115)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1837, 1837, 0.0);
      assertNotNull(openMapRealVector0);
      assertEquals(1837, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1837, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = linearObjectiveFunction0.getValue((RealVector) openMapRealVector0);
      assertEquals(1837, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, double0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-3651.16312586), 300);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-264), 2145.0);
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-264), openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2764.2785016556);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-264), openMapRealVector0.getDimension());
      assertEquals(2764.2785016556, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2632.2476424), (-264));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -261 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, 1725.0, (-1034));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.999999999999);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.999999999999, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(5091);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5091, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.999999999999, relationship0, openMapRealVector0, (-1849.0));
      assertNotNull(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5091, openMapRealVector0.getDimension());
      assertEquals((-1849.999999999999), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(linearConstraint0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(5091, openMapRealVector0.getDimension());
      assertEquals((-1849.999999999999), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.999999999999, 5091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2753, 2753);
      assertNotNull(openMapRealVector0);
      assertEquals(2753, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0E-12);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(2753, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2753);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-369), 0);
      assertNotNull(openMapRealVector0);
      assertEquals((-369), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.831723825053622);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-369), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.831723825053622, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -366 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, 3314.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2560));
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 1507.0);
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2775.463);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 19.77848367890155);
      GoalType goalType0 = GoalType.MINIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, relationship0, 19.77848367890155);
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 19.77848367890155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, 0.0);
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1306.10221));
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertTrue(list0.contains(linearConstraint0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.01745329052209854);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 914.06198049);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
      boolean boolean0 = simplexTableau0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      boolean boolean0 = simplexTableau0.equals(simplexTableau0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.999999999999);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.999999999999);
      simplexTableau0.divideRow(0, 0.999999999999);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0E-12, relationship0, openMapRealVector0, (-372.8785974878827));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      linkedList0.add(linearConstraint0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-745.263000000001));
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      boolean boolean0 = simplexTableau0.isOptimal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 0.15, relationship0, openMapRealVector0, 0.15);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.15, (-1073741824));
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      double[] doubleArray1 = new double[5];
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray1, (-1490.3139676112), relationship0, doubleArray0, (-964.0));
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray1, 914.06198049);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
      simplexTableau0.dropPhase1Objective();
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.9796350006844));
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0E-12, relationship0, openMapRealVector0, (-745.9796350006844));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 19.77848367890155);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 844.0460528, relationship0, openMapRealVector0, 19.77848367890155);
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, true, 0.0);
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.999999999999);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0, (-66));
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.9796350006844));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      int int0 = simplexTableau0.getRhsOffset();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2632.2476424));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 3713.837797566878, 2);
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(1, (-1), 3713.837797566878);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.5);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2979.11828);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1512.6650266264678), 0);
      double[][] doubleArray1 = simplexTableau0.getData();
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2852.37414);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 2852.37414, relationship0, openMapRealVector0, (-2254.3));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      boolean boolean0 = linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2852.37414);
      simplexTableau0.dropPhase1Objective();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 3890.6099238298, 1);
      boolean boolean1 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2852.37414);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2852.37414);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2254.3));
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(boolean0);
  }
}

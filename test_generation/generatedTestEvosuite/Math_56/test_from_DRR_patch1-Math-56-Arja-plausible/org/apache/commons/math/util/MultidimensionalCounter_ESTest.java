/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:16:37 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.commons.math.util.MultidimensionalCounter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultidimensionalCounter_ESTest extends MultidimensionalCounter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-5);
      intArray0[1] = 2951;
      intArray0[2] = 170;
      intArray0[3] = 2951;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-5), 2951, 170, 2951}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      int[] intArray1 = multidimensionalCounter0.getCounts(1939);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-5), 2951, 170, 2951}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 62}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      try { 
        multidimensionalCounter0.getCount(intArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 out of [0, -6] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCount(intArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCounts(1653);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,653 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1801;
      intArray0[2] = (-24);
      MultidimensionalCounter multidimensionalCounter0 = null;
      try {
        multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -43,224 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      assertEquals(2, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertFalse(multidimensionalCounter_Iterator0.hasNext());
      assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      
      Integer integer0 = multidimensionalCounter_Iterator0.next();
      assertEquals(2, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertFalse(multidimensionalCounter_Iterator0.hasNext());
      assertEquals(0, multidimensionalCounter_Iterator0.getCount());
      assertEquals(0, (int)integer0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertNotNull(integer0);
      
      Integer integer1 = multidimensionalCounter_Iterator0.next();
      assertEquals(2, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertFalse(multidimensionalCounter_Iterator0.hasNext());
      assertEquals(1, multidimensionalCounter_Iterator0.getCount());
      assertEquals(1, (int)integer1);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 170;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {170}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      assertFalse(multidimensionalCounter_Iterator0.hasNext());
      assertArrayEquals(new int[] {170}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      
      Integer integer0 = multidimensionalCounter_Iterator0.next();
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(0, multidimensionalCounter_Iterator0.getCount());
      assertFalse(multidimensionalCounter_Iterator0.hasNext());
      assertEquals(0, (int)integer0);
      assertArrayEquals(new int[] {170}, intArray0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 170;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {170}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertFalse(multidimensionalCounter_Iterator0.hasNext());
      assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      assertArrayEquals(new int[] {170}, intArray0);
      assertNotNull(multidimensionalCounter_Iterator0);
      
      boolean boolean0 = multidimensionalCounter_Iterator0.hasNext();
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertFalse(multidimensionalCounter_Iterator0.hasNext());
      assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {170}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1394);
      intArray0[1] = (-1394);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-1394), (-1394)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      multidimensionalCounter0.forEach(consumer0);
      assertEquals(2, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(2, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {(-1394), (-1394)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2951;
      intArray0[2] = 170;
      intArray0[3] = 2951;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 2951, 170, 2951}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      int[] intArray1 = multidimensionalCounter0.getCounts(0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 2951, 170, 2951}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = multidimensionalCounter0.getCount(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, 2951, 170, 2951}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2951;
      intArray0[2] = 170;
      intArray0[3] = 1939;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 2951, 170, 1939}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      int[] intArray1 = multidimensionalCounter0.getCounts(1939);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 2951, 170, 1939}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = multidimensionalCounter0.getCount(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(1939, int0);
      assertArrayEquals(new int[] {1, 2951, 170, 1939}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 210;
      intArray0[1] = 210;
      intArray0[2] = (-1368);
      intArray0[3] = 210;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {210, 210, (-1368), 210}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      // Undeclared exception!
      multidimensionalCounter0.getCounts(7);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 138;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {138}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCount((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultidimensionalCounter multidimensionalCounter0 = null;
      try {
        multidimensionalCounter0 = new MultidimensionalCounter((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      MultidimensionalCounter multidimensionalCounter0 = null;
      try {
        multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 124;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {124}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCount(intArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 170;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {170}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      String string0 = multidimensionalCounter0.toString();
      assertEquals(1, intArray0.length);
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals("[0]", string0);
      assertArrayEquals(new int[] {170}, intArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2145353700);
      intArray0[1] = 1;
      intArray0[2] = 3855;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {(-2145353700), 1, 3855}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      try { 
        multidimensionalCounter0.getCount(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,145,353,700 out of [0, -2,145,353,701] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 4;
      intArray0[5] = 1;
      intArray0[6] = (-512);
      intArray0[7] = 1;
      intArray0[8] = (-552);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {1, 1, 1, 1, 4, 1, (-512), 1, (-552)}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      // Undeclared exception!
      try { 
        multidimensionalCounter0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 158;
      intArray0[1] = 158;
      intArray0[2] = 1939;
      intArray0[3] = 158;
      intArray0[4] = 1939;
      intArray0[5] = 1939;
      intArray0[6] = 1939;
      intArray0[7] = 1939;
      intArray0[8] = 1939;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, multidimensionalCounter0.getDimension());
      assertEquals(0, multidimensionalCounter0.getSize());
      assertArrayEquals(new int[] {158, 158, 1939, 158, 1939, 1939, 1939, 1939, 1939}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      try { 
        multidimensionalCounter0.getCount(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 158 out of [0, 157] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 181;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, multidimensionalCounter0.getSize());
      assertEquals(1, multidimensionalCounter0.getDimension());
      assertArrayEquals(new int[] {181}, intArray0);
      assertNotNull(multidimensionalCounter0);
      
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCounts(181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 181 out of [0, 181] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 158;
      intArray0[1] = 158;
      intArray0[2] = 1939;
      intArray0[3] = 158;
      intArray0[4] = 1939;
      intArray0[5] = 1939;
      intArray0[6] = 1939;
      intArray0[7] = 1939;
      intArray0[8] = 1939;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      int[] intArray1 = multidimensionalCounter0.getCounts(10);
      int int0 = multidimensionalCounter0.getCount(intArray1);
      assertArrayEquals(new int[] {0, 47, 2, 0, 0, 1, 511, 215, 23}, intArray1);
      assertEquals((-236), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      // Undeclared exception!
      try { 
        multidimensionalCounter0.getCounts((-1612));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,612 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[9];
      MultidimensionalCounter multidimensionalCounter0 = null;
      try {
        multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 4;
      intArray0[5] = 1;
      intArray0[6] = (-512);
      intArray0[7] = 1;
      intArray0[8] = (-552);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      multidimensionalCounter_Iterator0.next();
      assertEquals(0, multidimensionalCounter_Iterator0.getCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      boolean boolean0 = multidimensionalCounter_Iterator0.hasNext();
      assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2951;
      intArray0[2] = 170;
      intArray0[3] = 1939;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      int int0 = multidimensionalCounter0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 170;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      int[] intArray1 = multidimensionalCounter0.getSizes();
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2066;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      int int0 = multidimensionalCounter0.getDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1546;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      // Undeclared exception!
      try { 
        multidimensionalCounter_Iterator0.getCount((-842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -842
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      // Undeclared exception!
      try { 
        multidimensionalCounter_Iterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MultidimensionalCounter$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 4;
      intArray0[5] = 1;
      intArray0[6] = (-512);
      intArray0[7] = 1;
      intArray0[8] = (-552);
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.iterator();
      int[] intArray1 = multidimensionalCounter_Iterator0.getCounts();
      //  // Unstable assertion: assertEquals((-1), multidimensionalCounter_Iterator0.getCount());
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1546;
      MultidimensionalCounter multidimensionalCounter0 = new MultidimensionalCounter(intArray0);
      MultidimensionalCounter.Iterator multidimensionalCounter_Iterator0 = multidimensionalCounter0.new Iterator();
      multidimensionalCounter_Iterator0.getCount();
  }
}

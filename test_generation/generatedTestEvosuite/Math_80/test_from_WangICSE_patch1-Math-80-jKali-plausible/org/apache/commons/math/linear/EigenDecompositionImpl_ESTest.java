/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 20:12:01 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.5);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2715.6861533946217);
      doubleArray0[5] = 9239109.742996287;
      doubleArray0[1] = 0.333;
      doubleArray0[7] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.333, (-2615.0419), 9239109.742996287, (-2715.6861533946217), 9239109.742996287, 0.0, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.6002607935670432E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.478676018863406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.7722660290042255E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.333, (-2615.0419), 9239109.742996287, (-2715.6861533946217), 9239109.742996287, 0.0, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.6002607935670432E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.478676018863406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.7722660290042255E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.0, 0.333, (-2615.0419), 9239109.742996287, (-2715.6861533946217), 9239109.742996287, 0.0, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.6002607935670432E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.478676018863406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.7722660290042255E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(128.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(128.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(128.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 350.2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(5);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(7, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1160
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-7161786.906607312);
      doubleArray1[4] = (double) 52;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(230, 230);
      assertNotNull(blockRealMatrix0);
      assertEquals(230, blockRealMatrix0.getColumnDimension());
      assertEquals(230, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 230);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(52, 16);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(16, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 52x16 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(13, 18);
      assertNotNull(blockRealMatrix0);
      assertEquals(13, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(18, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (13, 0) in a 13x18 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 2.844331872320191E-25);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-2615.0419);
      doubleArray1[1] = (Double) doubleArray0[4];
      doubleArray1[2] = (Double) 9239109.742996287;
      doubleArray1[3] = (Double) (-2615.0419);
      doubleArray1[4] = (Double) (-2720.32789878);
      doubleArray1[5] = (Double) 1.0;
      doubleArray1[6] = (Double) (-2720.32789878);
      doubleArray1[7] = (Double) 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (-2959.39893573));
      assertNotNull(openMapRealVector0);
      assertEquals((-2959.39893573), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals((-2959.39893573), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9249782.482593846, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9239111.28412181, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.9581887445748115E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(realMatrix0);
      assertEquals((-2959.39893573), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9249782.482593846, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9239111.28412181, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.9581887445748115E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, doubleArray1.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (double) doubleArray1[5]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals((-2959.39893573), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9249782.482593846, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9239111.28412181, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.9581887445748115E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(1.0338542872608685E-53, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals((-2959.39893573), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9249782.482593846, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9239111.28412181, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.9581887445748115E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(1.0338542872608685E-53, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertTrue(decompositionSolver0.isNonSingular());
      assertEquals(8, doubleArray1.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2382.603200167494));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, realMatrix1.getRowDimension());
      assertEquals(1, realMatrix1.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, 0.563);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, realMatrix1.getRowDimension());
      assertEquals(1, realMatrix1.getColumnDimension());
      assertEquals(1.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl1.getV();
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertTrue(realMatrix2.equals((Object)realMatrix1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix2);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, realMatrix1.getRowDimension());
      assertEquals(1, realMatrix1.getColumnDimension());
      assertEquals(1.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertEquals(1, realMatrix2.getRowDimension());
      assertEquals(1, realMatrix2.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(realMatrix1, realMatrix2);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(realMatrix2, realMatrix0);
      assertNotSame(realMatrix2, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2615.0419);
      doubleArray0[2] = 0.333;
      doubleArray0[3] = 0.333;
      doubleArray0[4] = (-2684.19121);
      doubleArray0[5] = 0.333;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 9239109.69857943;
      doubleArray0[8] = 9239109.69857943;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {1.0, (-2615.0419), 0.333, 0.333, (-2684.19121), 0.333, 0.333, 9239109.69857943, 9239109.69857943}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1.8645646078758862E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.306607477738043E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.848352096226886E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {1.0, (-2615.0419), 0.333, 0.333, (-2684.19121), 0.333, 0.333, 9239109.69857943, 9239109.69857943}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1.8645646078758862E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.306607477738043E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.848352096226886E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {1.0, (-2615.0419), 0.333, 0.333, (-2684.19121), 0.333, 0.333, 9239109.69857943, 9239109.69857943}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1.8645646078758862E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.306607477738043E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.848352096226886E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 9239109.742996287;
      doubleArray0[1] = 0.333;
      doubleArray0[2] = 0.333;
      doubleArray0[4] = (-1798.8425958);
      doubleArray0[5] = 5.987728485867816E-5;
      doubleArray0[7] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {9239109.742996287, 0.333, 0.333, 0.0, (-1798.8425958), 5.987728485867816E-5, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9240910.251651965, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1826060471035247E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9239109.918112503, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {9239109.742996287, 0.333, 0.333, 0.0, (-1798.8425958), 5.987728485867816E-5, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9240910.251651965, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1826060471035247E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9239109.918112503, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-949.3080991));
      assertArrayEquals(new double[] {9239109.742996287, 0.333, 0.333, 0.0, (-1798.8425958), 5.987728485867816E-5, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9240910.251651965, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1826060471035247E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9239109.918112503, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 1.0, (-2720.32789878), 0.0, 0.333, 0.333}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1031408129241792E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1034130787726177E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 1.0, (-2720.32789878), 0.0, 0.333, 0.333}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1031408129241792E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1034130787726177E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 1.0, (-2720.32789878), 0.0, 0.333, 0.333}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1031408129241792E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1034130787726177E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 9239109.742996287;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.333, 548078.6632243783, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9573519311668116E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.903163385201573E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.307756484005978E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.333, 548078.6632243783, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9573519311668116E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.903163385201573E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.307756484005978E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.333, 548078.6632243783, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9573519311668116E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.903163385201573E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.307756484005978E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.3066074847668897E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8483554855791353E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2.9573519311668116E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.3066074847668897E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8483554855791353E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2.9573519311668116E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.3066074847668897E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8483554855791353E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2.9573519311668116E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 9239109.742996287;
      doubleArray0[1] = 0.333;
      doubleArray0[7] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.333, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1.478676018863406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.772266493178764E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.600260793645882E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.333, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1.478676018863406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.772266493178764E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.600260793645882E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.0, 0.333, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1.478676018863406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.772266493178764E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.600260793645882E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, 1.4166441663767003E-14);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 9239109.742996287, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 1.1031407793827396E7, 0.0, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1031408129241697E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.1034128454726176E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.1031407793827396E7, 0.0, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1031408129241697E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.1034128454726176E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.0, 0.0, 1.1031407793827396E7, 0.0, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1031408129241697E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.1034128454726176E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 9239109.742996287;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 9239109.742996287;
      doubleArray0[1] = (-2720.32789878);
      doubleArray0[2] = (-2720.32789878);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-506.2762));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (-2720.32789878);
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-2615.0419);
      doubleArray1[1] = (Double) doubleArray0[4];
      doubleArray1[2] = (Double) 9239109.742996287;
      doubleArray1[3] = (Double) (-2615.0419);
      doubleArray1[4] = (Double) (-2720.32789878);
      doubleArray1[5] = (Double) 1.0;
      doubleArray1[6] = (Double) (-2720.32789878);
      doubleArray1[7] = (Double) 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (-2959.39893573));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.4086147790318932E-31);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = (-2615.0419);
      doubleArray0[4] = (-2720.32789878);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3.1677060052465102E-149);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-2615.0419);
      doubleArray1[1] = (Double) doubleArray0[3];
      doubleArray1[2] = (Double) 9239109.742996287;
      doubleArray1[3] = (Double) (-2615.0419);
      doubleArray1[4] = (Double) (-2720.32789878);
      doubleArray1[5] = (Double) 1.0;
      doubleArray1[6] = (Double) (-2720.32789878);
      doubleArray1[7] = (Double) 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (-2959.39893573));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.4086147790318932E-31);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      double[] doubleArray1 = new double[9];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, 1.4166441663767003E-14);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 548078.6632243783);
      eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1825.362));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-5.250491540017362E-8));
      eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector((-848));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -848
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotSame(realMatrix0, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2522.3358);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      arrayRealVector0.set(9239109.742996287);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 9239109.742996287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-949.3080991));
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(14, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1825.362));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(4);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-2615.0419);
      doubleArray1[1] = (Double) doubleArray0[2];
      doubleArray1[2] = (Double) 9239109.742996287;
      doubleArray1[3] = (Double) (-2615.0419);
      doubleArray1[4] = (Double) (-2720.32789878);
      doubleArray1[5] = (Double) 1.0;
      doubleArray1[6] = (Double) (-2720.32789878);
      doubleArray1[7] = (Double) 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (-2959.39893573));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (double) doubleArray1[5]);
      eigenDecompositionImpl0.getImagEigenvalue(1);
      assertEquals(1.0338542872608685E-53, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2382.603200167494));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(1, doubleArray1.length);
  }
}

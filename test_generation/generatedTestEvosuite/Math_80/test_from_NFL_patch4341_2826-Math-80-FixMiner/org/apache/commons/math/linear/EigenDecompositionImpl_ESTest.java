/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 20:03:07 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1837.934601599;
      doubleArray0[1] = 1718.6329186577134;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 775.128398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01);
      assertTrue(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01);
      assertTrue(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertNotNull(realMatrix0);
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01);
      assertTrue(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertNotNull(blockRealMatrix0);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2160, 2160);
      assertNotNull(blockRealMatrix0);
      assertEquals(2160, blockRealMatrix0.getRowDimension());
      assertEquals(2160, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 5);
      assertNotNull(blockRealMatrix0);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3601.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 20x5 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 4849);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(4849, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (39, 0) in a 39x4,849 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1338.7003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 17);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(17.0, openMapRealVector0.getEpsilon(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, doubleArray0.length);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertNotNull(realMatrix0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(17.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(46);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(11);
      assertNotNull(realVector0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertTrue(realVector0.isNaN());
      assertEquals(14, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertNotNull(realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertTrue(realMatrix0.equals((Object)array2DRowRealMatrix0));
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertNotNull(realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertTrue(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertTrue(realMatrix1.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(66, 66);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(66, blockRealMatrix0.getColumnDimension());
      assertEquals(66, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(66, blockRealMatrix0.getColumnDimension());
      assertEquals(66, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotNull(doubleArray0);
      assertEquals(66, blockRealMatrix0.getColumnDimension());
      assertEquals(66, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(66, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1385
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}

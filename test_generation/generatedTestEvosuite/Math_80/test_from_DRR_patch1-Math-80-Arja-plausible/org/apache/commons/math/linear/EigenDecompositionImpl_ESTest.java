/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:12:42 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2615.0419);
      doubleArray0[3] = 548078.6632243783;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2720.32789878);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {1.0, (-2615.0419), 0.0, 548078.6632243783, 1.0, (-2720.32789878)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548091.6526565945, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(553416.0330231582, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2213242.988097513, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {1.0, (-2615.0419), 0.0, 548078.6632243783, 1.0, (-2720.32789878)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548091.6526565945, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(553416.0330231582, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2213242.988097513, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(6, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      assertArrayEquals(new double[] {1.0, (-2615.0419), 0.0, 548078.6632243783, 1.0, (-2720.32789878)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548091.6526565945, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(553416.0330231582, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2213242.988097513, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(2.2200292186939767E-72, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertArrayEquals(new double[] {1.0, (-2615.0419), 0.0, 548078.6632243783, 1.0, (-2720.32789878)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548091.6526565945, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(553416.0330231582, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2213242.988097513, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(2.2200292186939767E-72, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(6, realMatrix1.getColumnDimension());
      assertEquals(6, realMatrix1.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {39.0, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548117.6632243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548078.6646119527, arrayRealVector0.getNorm(), 0.01);
      assertEquals(548117.6632243783, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {39.0, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548117.6632243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548078.6646119527, arrayRealVector0.getNorm(), 0.01);
      assertEquals(548117.6632243783, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(2, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2720.32789878));
      assertArrayEquals(new double[] {39.0, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548117.6632243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548078.6646119527, arrayRealVector0.getNorm(), 0.01);
      assertEquals(548117.6632243783, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals((-0.0625), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2, doubleArray0.length);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4389340296102136E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.0273238197722465E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4389340296102136E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.0273238197722465E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.333);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4389340296102136E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.0273238197722465E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2615.0419);
      doubleArray0[1] = 1.1102230246251565E-14;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {(-2615.0419), 1.1102230246251565E-14}, doubleArray0, 0.01);
      assertEquals(5230.0838, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {(-2615.0419), 1.1102230246251565E-14}, doubleArray0, 0.01);
      assertEquals(5230.0838, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(2, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2720.32789878));
      assertArrayEquals(new double[] {(-2615.0419), 1.1102230246251565E-14}, doubleArray0, 0.01);
      assertEquals(5230.0838, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(1.88079096131566E-37, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertArrayEquals(new double[] {(-2615.0419), 1.1102230246251565E-14}, doubleArray0, 0.01);
      assertEquals(1.88079096131566E-37, double0, 0.01);
      assertEquals(5230.0838, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(1.88079096131566E-37, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1.6201113415642218E-53);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1160
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(949, 949);
      assertEquals(949, blockRealMatrix0.getColumnDimension());
      assertEquals(949, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 35);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, -0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 8x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.333);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x3 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 575.6901);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(decompositionSolver0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 9239109.742996287;
      doubleArray0[2] = 0.333;
      doubleArray0[3] = (double) 39;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = (double) 52;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {9239109.742996287, 0.0, 0.333, 39.0, (-2720.32789878), 0.0, 52.0}, doubleArray0, 0.01);
      assertEquals(9239110.143706366, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5.913030235517623E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9241921.403895067, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {9239109.742996287, 0.0, 0.333, 39.0, (-2720.32789878), 0.0, 52.0}, doubleArray0, 0.01);
      assertEquals(9239110.143706366, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5.913030235517623E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9241921.403895067, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertArrayEquals(new double[] {9239109.742996287, 0.0, 0.333, 39.0, (-2720.32789878), 0.0, 52.0}, doubleArray0, 0.01);
      assertEquals(9239110.143706366, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5.913030235517623E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9241921.403895067, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals((-1.2876020134030615E-77), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082393190284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774693256652E7, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082393190284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774693256652E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082393190284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774693256652E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 340.15336873;
      doubleArray0[5] = (-3131.2265626);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 340.15336873;
      doubleArray1[4] = (double) 52;
      doubleArray1[5] = (double) 52;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 340.15336873, 0.0, (-3131.2265626), 0.0, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 340.15336873, 52.0, 52.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 9239109.742996287;
      doubleArray0[3] = (double) 39;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = (double) 52;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {9239109.742996287, 0.0, 0.0, 39.0, (-2720.32789878), 0.0, 52.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239110.14370636, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9241921.070895066, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5.913030235517623E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {9239109.742996287, 0.0, 0.0, 39.0, (-2720.32789878), 0.0, 52.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239110.14370636, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9241921.070895066, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5.913030235517623E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertArrayEquals(new double[] {9239109.742996287, 0.0, 0.0, 39.0, (-2720.32789878), 0.0, 52.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239110.14370636, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9241921.070895066, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5.913030235517623E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.082393290284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.4399774693256686E7, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.082393290284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.4399774693256686E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1726.216270811));
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.082393290284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.4399774693256686E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.6891203041108291;
      doubleArray0[1] = 0.6891203041108291;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1584823538091164E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4.4167493897559315E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1045015272666069E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1584823538091164E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4.4167493897559315E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1045015272666069E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1584823538091164E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4.4167493897559315E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1045015272666069E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(3.1677060052465102E-149, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.1677060052465102E-149, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.054663686715533E-147, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(3.1677060052465102E-149, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.1677060052465102E-149, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.054663686715533E-147, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.6891203041108291;
      doubleArray0[1] = 0.6891203041108291;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83725.4444994631, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5337.081039388221, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3773.41080142343, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83725.4444994631, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5337.081039388221, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3773.41080142343, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83725.4444994631, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5337.081039388221, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3773.41080142343, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-2615.0419);
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.0, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.104501527266602E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1584821826850554E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(4.4167471845709585E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.0, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.104501527266602E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1584821826850554E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(4.4167471845709585E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.0, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.104501527266602E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1584821826850554E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(4.4167471845709585E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082131786094684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4399774455806991E7, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082131786094684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4399774455806991E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082131786094684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4399774455806991E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 548078.6632243783;
      doubleArray0[1] = (-746.7);
      doubleArray0[2] = (double) 39;
      doubleArray0[3] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {548078.6632243783, (-746.7), 39.0, 39.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548903.3632243782, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(548079.1746497138, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4384629.305795026, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {548078.6632243783, (-746.7), 39.0, 39.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(548903.3632243782, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(548079.1746497138, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4384629.305795026, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(4, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.7127873876821753E-13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.6891203041108291;
      doubleArray0[1] = 0.6891203041108291;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.0, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(4.4167493897559315E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1045015272666063E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1584823205091164E7, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.0, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(4.4167493897559315E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1045015272666063E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1584823205091164E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertArrayEquals(new double[] {0.6891203041108291, 0.6891203041108291, (-2615.0419), 0.0, (-2720.32789878), 1.1031407793827396E7, 0.0, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(4.4167493897559315E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1045015272666063E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1584823205091164E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-7161786.906607312);
      doubleArray1[4] = (double) 52;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-2615.0419);
      doubleArray0[2] = 3.1677060052465102E-149;
      doubleArray0[4] = (-1.7444085998938785);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertArrayEquals(new double[] {0.0, (-2615.0419), 3.1677060052465102E-149, 0.0, (-1.7444085998938785), 0.0}, doubleArray0, 0.01);
      assertEquals(41840.6704, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2615.04248181879, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2616.7863085998943, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, (-2615.0419), 3.1677060052465102E-149, 0.0, (-1.7444085998938785), 0.0}, doubleArray0, 0.01);
      assertEquals(41840.6704, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2615.04248181879, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2616.7863085998943, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(6, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertArrayEquals(new double[] {0.0, (-2615.0419), 3.1677060052465102E-149, 0.0, (-1.7444085998938785), 0.0}, doubleArray0, 0.01);
      assertEquals(41840.6704, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2615.04248181879, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2616.7863085998943, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[4] = (-2720.32789878);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5335.369798780001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83681.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(3773.41066087915, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5335.369798780001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83681.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(3773.41066087915, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(19, 19);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 19);
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2720.32789878));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 281.25);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 9239109.742996287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(8, 8);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1.01084443738485E-24);
      eigenDecompositionImpl0.getRealEigenvalue(5);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(5);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

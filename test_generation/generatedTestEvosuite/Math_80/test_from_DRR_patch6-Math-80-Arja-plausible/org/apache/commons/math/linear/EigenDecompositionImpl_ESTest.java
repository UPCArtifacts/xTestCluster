/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:46:11 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3794.51749005);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2108, 2108);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2108, blockRealMatrix0.getColumnDimension());
      assertEquals(2108, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2108);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 16);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(16, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 39x16 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1, 3);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x3 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1900.71401604);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double((-2720.32789878));
      assertNotNull(double0);
      assertEquals((-2720.32789878), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double((-636.2851345));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-636.2851345), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 54.0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(54.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(openMapRealMatrix0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(54.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      assertEquals(3, openMapRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 7.97488028614346E-7);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(54.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      assertEquals(3, openMapRealMatrix0.getColumnDimension());
      assertEquals(5.4569682106375694E-12, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(54.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      assertEquals(3, openMapRealMatrix0.getColumnDimension());
      assertEquals(5.4569682106375694E-12, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2808.3694004393165;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 2635923.8875022973;
      doubleArray0[6] = 1.05;
      doubleArray0[7] = 2091.5642487448713;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.235451784166487E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2643439.9130514814, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2635927.5105226547, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {2808.3694004393165, 0.0, (-2615.0419), 2635923.8875022973, 0.0, 0.0, 1.05, 2091.5642487448713}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.235451784166487E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2643439.9130514814, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2635927.5105226547, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {2808.3694004393165, 0.0, (-2615.0419), 2635923.8875022973, 0.0, 0.0, 1.05, 2091.5642487448713}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.235451784166487E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2643439.9130514814, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2635927.5105226547, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {2808.3694004393165, 0.0, (-2615.0419), 2635923.8875022973, 0.0, 0.0, 1.05, 2091.5642487448713}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2808.3694004393165;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 2635923.8875022973;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 1.05;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.3675477470528914E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1341960799614405E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.5302890096142024E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {2808.3694004393165, 1.0, (-2615.0419), 2635923.8875022973, (-2720.32789878), 1.1031407793827396E7, 1.05, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.3675477470528914E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1341960799614405E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.5302890096142024E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {2808.3694004393165, 1.0, (-2615.0419), 2635923.8875022973, (-2720.32789878), 1.1031407793827396E7, 1.05, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.3675477470528914E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1341960799614405E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6.5302890096142024E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {2808.3694004393165, 1.0, (-2615.0419), 2635923.8875022973, (-2720.32789878), 1.1031407793827396E7, 1.05, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = (double) 39;
      doubleArray0[3] = 1.1031407793827396E7;
      doubleArray0[4] = (double) 39;
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 2093.7554556453206;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8.825292635061917E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.5600766654783012E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.206503934311044E7, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {52.0, 39.0, 0.0, 1.1031407793827396E7, 39.0, 1.1031407793827396E7, 2093.7554556453206}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8.825292635061917E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.5600766654783012E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.206503934311044E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {52.0, 39.0, 0.0, 1.1031407793827396E7, 39.0, 1.1031407793827396E7, 2093.7554556453206}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.2250738585072014E-308);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8.825292635061917E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.5600766654783012E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.206503934311044E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {52.0, 39.0, 0.0, 1.1031407793827396E7, 39.0, 1.1031407793827396E7, 2093.7554556453206}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2808.3694004393165;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 2635923.8875022973;
      doubleArray0[6] = 1.05;
      doubleArray0[7] = 2091.5642487448713;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2643440.9130514814, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2635927.5105228447, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4.235451784166487E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {2808.3694004393165, 1.0, (-2615.0419), 2635923.8875022973, 0.0, 0.0, 1.05, 2091.5642487448713}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2643440.9130514814, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2635927.5105228447, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4.235451784166487E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {2808.3694004393165, 1.0, (-2615.0419), 2635923.8875022973, 0.0, 0.0, 1.05, 2091.5642487448713}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2643440.9130514814, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2635927.5105228447, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4.235451784166487E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {2808.3694004393165, 1.0, (-2615.0419), 2635923.8875022973, 0.0, 0.0, 1.05, 2091.5642487448713}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (-711.5367357863363);
      doubleArray0[2] = (double) 39;
      doubleArray0[3] = (double) 39;
      doubleArray0[4] = 0.25;
      doubleArray0[5] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(6, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(867.7867357863363, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(715.7992657676275, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(12008.58777258138, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {39.0, (-711.5367357863363), 39.0, 39.0, 0.25, 39.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(867.7867357863363, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(715.7992657676275, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(12008.58777258138, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {39.0, (-711.5367357863363), 39.0, 39.0, 0.25, 39.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-711.5367357863363));
      assertEquals(6, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(867.7867357863363, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(715.7992657676275, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(12008.58777258138, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {39.0, (-711.5367357863363), 39.0, 39.0, 0.25, 39.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = (double) 27;
      doubleArray0[3] = (double) 27;
      doubleArray0[4] = (double) 27;
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 2093.7554556453206;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(1.103363454928304E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.1031407992745927E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.206447958765479E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {52.0, 27.0, 0.0, 27.0, 27.0, 1.1031407793827396E7, 2093.7554556453206}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(1.103363454928304E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.1031407992745927E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.206447958765479E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {52.0, 27.0, 0.0, 27.0, 27.0, 1.1031407793827396E7, 2093.7554556453206}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.2250738585072014E-308);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1.103363454928304E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.1031407992745927E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.206447958765479E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {52.0, 27.0, 0.0, 27.0, 27.0, 1.1031407793827396E7, 2093.7554556453206}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = (Double) (-2720.32789878);
      doubleArray0[1] = (Double) (-0.8187003736599703);
      doubleArray0[2] = (Double) 2808.3694004393165;
      doubleArray0[3] = (Double) (-2720.32789878);
      doubleArray0[4] = (Double) (-2615.0419);
      doubleArray0[5] = (Double) 2635923.8875022973;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2394.00496723818));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals((-2394.00496723818), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(openMapRealMatrix0);
      assertEquals((-2394.00496723818), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(6, openMapRealMatrix0.getColumnDimension());
      assertEquals(6, openMapRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-2750.7));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals((-2394.00496723818), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(6, openMapRealMatrix0.getColumnDimension());
      assertEquals(6, openMapRealMatrix0.getRowDimension());
      assertEquals(3.42894847103887E-26, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(39);
      assertNotNull(double0);
      assertEquals(39.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 39);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(39.0, openMapRealVector0.getEpsilon(), 0.01);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(openMapRealMatrix0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(39.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 39);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(39.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(39.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, 5.266560370116198E-14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = (Double) 39.0;
      doubleArray0[1] = (Double) 39.0;
      Double double0 = new Double((-266.195169003615));
      assertNotNull(double0);
      assertEquals((-266.195169003615), (double)double0, 0.01);
      
      doubleArray0[2] = double0;
      doubleArray0[3] = (Double) 39.0;
      doubleArray0[4] = (Double) 39.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2346.5891610683));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals((-2346.5891610683), openMapRealVector0.getEpsilon(), 0.01);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(openMapRealMatrix0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals((-2346.5891610683), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 5.133649684404563E-13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3794.52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(decompositionSolver0);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(decompositionSolver1);
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver1.isNonSingular());
      assertNotSame(decompositionSolver1, decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.2250738585072014E-308);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(39);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 39);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 39);
      try { 
        eigenDecompositionImpl0.getEigenvector(246);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 246
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3794.52);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(2, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.2250738585072014E-308);
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3794.52);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(2, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2093.7554556453206);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2808.3694004393165;
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2808.3694004393165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3794.51749005);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-2242));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2242
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.0463005658889492E-34);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(23005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23005
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3794.51749005);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = (Double) 0.0;
      doubleArray0[1] = (Double) 1.0;
      doubleArray0[2] = (Double) 2808.3694004393165;
      doubleArray0[3] = (Double) 0.0;
      doubleArray0[4] = (Double) (-2615.0419);
      doubleArray0[5] = (Double) 2635923.8875022973;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2394.00496723818));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 6.886307832504434E-15);
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

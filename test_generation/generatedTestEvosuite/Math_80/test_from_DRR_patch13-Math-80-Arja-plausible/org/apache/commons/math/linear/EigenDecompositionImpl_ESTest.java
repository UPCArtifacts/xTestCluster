/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:09:50 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1837.934601599;
      doubleArray0[1] = 1718.6329186577134;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 775.128398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalue(17);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1.6201113415642218E-53);
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-3131.2265626);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-7161786.906607312);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(675, 11);
      assertEquals(11, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(675, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0018693039240282444);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 675x11 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.333);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x3 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[4] = (-2720.32789878);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(5336.369798780001, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(83713.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3773.410793385266, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(5336.369798780001, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(83713.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3773.410793385266, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(5336.369798780001, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(83713.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3773.410793385266, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(5336.369798780001, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(83713.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3773.410793385266, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) (-2720.32789878);
      doubleArray0[1] = (Double) 1.1031407793827396E7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.1031408129241692E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.1031408129241692E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.1031408129241692E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(9.005428648991379E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.1034128121726176E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.1031408129241692E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(9.005428648991379E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix1.getRowDimension());
      assertEquals(2, realMatrix1.getColumnDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(2.951496398261875E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.7100124848626185E7, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(2.951496398261875E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.7100124848626185E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(2.951496398261875E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.7100124848626185E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774693256686E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.082393290284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774693256686E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.082393290284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774693256686E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.082393290284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.1031441227174522E7;
      doubleArray0[1] = (-2615.0419);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 750.3510791027;
      doubleArray0[5] = 548078.6632243783;
      doubleArray0[6] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.4399800068552665E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7.060122385391694E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.0821997026374288E7, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {1.1031441227174522E7, (-2615.0419), 1.0, 1.0, 750.3510791027, 548078.6632243783, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.4399800068552665E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7.060122385391694E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.0821997026374288E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {1.1031441227174522E7, (-2615.0419), 1.0, 1.0, 750.3510791027, 548078.6632243783, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.4399800068552665E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7.060122385391694E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.0821997026374288E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(2.6106038859033364E-34, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {1.1031441227174522E7, (-2615.0419), 1.0, 1.0, 750.3510791027, 548078.6632243783, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1582208117950555E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1045014963094555E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 1.1031407793827396E7, 1.0, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1582208117950555E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1045014963094555E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 1.1031407793827396E7, 1.0, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1582208117950555E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.1045014963094555E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, 1.1031407793827396E7, 1.0, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(9792524.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9255352.68387104, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9792524.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9255352.68387104, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(9792524.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9255352.68387104, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031446593004549E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.7100149678314354E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9512387739895903E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 1.1031446593004549E7, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.7100149678314354E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9512387739895903E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 1.1031446593004549E7, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.7100149678314354E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9512387739895903E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 1.1031446593004549E7, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[2] = (-2720.32789878);
      doubleArray0[4] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2842.66089878, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2721.6954252395344, arrayRealVector0.getNorm(), 0.01);
      assertEquals(11369.31159512, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {61.0, 61.0, (-2720.32789878), 0.0, 0.333}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2842.66089878, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2721.6954252395344, arrayRealVector0.getNorm(), 0.01);
      assertEquals(11369.31159512, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {61.0, 61.0, (-2720.32789878), 0.0, 0.333}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2842.66089878, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2721.6954252395344, arrayRealVector0.getNorm(), 0.01);
      assertEquals(11369.31159512, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {61.0, 61.0, (-2720.32789878), 0.0, 0.333}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774455806991E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082131786094684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774455806991E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082131786094684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4399774455806991E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2.082131786094684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 1.1031407793827396E7, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.8480941146891356E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.3066074585981928E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.8480941146891356E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.3066074585981928E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.8480941146891356E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.3066074585981928E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 9239109.742996287}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = (-2237.7025794);
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.1045014854770929E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1581724159631174E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.1031407793827396E7, 0.0, 0.0, 0.0, (-2237.7025794), 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.1045014854770929E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1581724159631174E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300504940247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 1.1031407793827396E7, 0.0, 0.0, 0.0, (-2237.7025794), 548078.6632243783}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9241831.403895067, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9239110.143477773, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9241831.403895067, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9239110.143477773, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9241831.403895067, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9239110.143477773, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4389340533724047E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.0275854239622463E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4389340533724047E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.0275854239622463E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4389340533724047E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.0275854239622463E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.333);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(64.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getRowDimension());
      assertEquals(8, realMatrix1.getColumnDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(39, realMatrix0.getColumnDimension());
      assertEquals(39, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, false);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1160
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 20:52:56 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 39;
      doubleArray0[5] = (double) 52;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 0.0, 52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(624.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 0.0, 52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(624.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 0.0, 52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(624.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 0.0, 52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(624.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix1.getRowDimension());
      assertEquals(7, realMatrix1.getColumnDimension());
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 0.0, 52.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = 2504.26487725;
      doubleArray0[2] = 1264.522392098;
      doubleArray0[3] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2504.26487725);
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(1.193792463296718E-19, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1.193792463296718E-19, double0, 0.01);
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(1.193792463296718E-19, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1645.90929645869);
      doubleArray0[1] = (double) 52;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1646.7305220251246, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3291.81859291738, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1697.90929645869, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-1645.90929645869), 52.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1646.7305220251246, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3291.81859291738, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1697.90929645869, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-1645.90929645869), 52.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1645.90929645869));
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1646.7305220251246, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3291.81859291738, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1697.90929645869, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals((-9.5367431640625E-7), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-1645.90929645869), 52.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-9.5367431640625E-7), double0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1646.7305220251246, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3291.81859291738, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1697.90929645869, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals((-9.5367431640625E-7), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-1645.90929645869), 52.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2108, 2108);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2108, blockRealMatrix0.getColumnDimension());
      assertEquals(2108, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2108);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(57, 4);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(4, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(57, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 416.4167961004298);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 57x4 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(19, 1617);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1617, blockRealMatrix0.getColumnDimension());
      assertEquals(19, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (19, 0) in a 19x1,617 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 6280130.575427957);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 52);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = 2504.26487725;
      doubleArray0[2] = 1264.522392098;
      doubleArray0[3] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2504.26487725);
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(1.193792463296718E-19, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(3859.7872693480003, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(10225.059509, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2806.1689998190072, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(1.193792463296718E-19, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(4, realMatrix1.getColumnDimension());
      assertEquals(4, realMatrix1.getRowDimension());
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {52.0, 2504.26487725, 1264.522392098, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-7161786.906607312);
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 52;
      doubleArray0[4] = (-692.3617);
      doubleArray0[6] = (-7161786.906607312);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 0.0, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4324370174914625E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.0128296198081719E7, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 0.0, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4324370174914625E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.0128296198081719E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 0.0, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4324370174914625E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.0128296198081719E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(6.0879889338999775E-53, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 0.0, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[2] = (double) 39;
      doubleArray0[4] = (-692.3617);
      doubleArray0[5] = 45.1461372005632;
      doubleArray0[6] = (double) 39;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 39.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(867.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(697.9605270579577, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 39.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(867.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(697.9605270579577, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 0.0, 39.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-692.3617));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(867.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(697.9605270579577, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 0.0, 39.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-7161786.906607312);
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 52;
      doubleArray0[4] = (-692.3617);
      doubleArray0[5] = 45.1461372005632;
      doubleArray0[6] = (-7161786.906607312);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 45.1461372005632, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4324415321051825E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.0128296198182335E7, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 45.1461372005632, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4324415321051825E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.0128296198182335E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 45.1461372005632, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4324415321051825E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.0128296198182335E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(4.649962899988834E-44, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-7161786.906607312), 0.0, 52.0, 52.0, (-692.3617), 45.1461372005632, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-7161786.906607312);
      doubleArray0[1] = (double) 39;
      doubleArray0[4] = (-7161786.906607312);
      doubleArray0[5] = 45.1461372005632;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.5714285714285714, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 39.0, 0.0, 0.0, (-7161786.906607312), 45.1461372005632, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.5714285714285714, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.012829617432582E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4323657959351825E7, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 39.0, 0.0, 0.0, (-7161786.906607312), 45.1461372005632, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.5714285714285714, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.012829617432582E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4323657959351825E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-7161786.906607312), 39.0, 0.0, 0.0, (-7161786.906607312), 45.1461372005632, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-7161786.906607312));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.5714285714285714, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.012829617432582E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4323657959351825E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-7161786.906607312), 39.0, 0.0, 0.0, (-7161786.906607312), 45.1461372005632, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (-692.3617);
      doubleArray0[2] = 45.1461372005632;
      doubleArray0[3] = 45.1461372005632;
      doubleArray0[4] = 45.1461372005632;
      doubleArray0[5] = 45.1461372005632;
      doubleArray0[6] = (-1698.164229931949);
      doubleArray0[7] = 45.1461372005632;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {39.0, (-692.3617), 45.1461372005632, 45.1461372005632, 45.1461372005632, 45.1461372005632, (-1698.164229931949), 45.1461372005632}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(46807.1488, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2655.2566159347653, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1837.0733093613655, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {39.0, (-692.3617), 45.1461372005632, 45.1461372005632, 45.1461372005632, 45.1461372005632, (-1698.164229931949), 45.1461372005632}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(46807.1488, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2655.2566159347653, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1837.0733093613655, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {39.0, (-692.3617), 45.1461372005632, 45.1461372005632, 45.1461372005632, 45.1461372005632, (-1698.164229931949), 45.1461372005632}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(46807.1488, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2655.2566159347653, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1837.0733093613655, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {39.0, (-692.3617), 45.1461372005632, 45.1461372005632, 45.1461372005632, 45.1461372005632, (-1698.164229931949), 45.1461372005632}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-7161786.906607312);
      doubleArray0[1] = (double) 39;
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 52;
      doubleArray0[4] = (-692.3617);
      doubleArray0[5] = (double) 52;
      doubleArray0[6] = (-7161786.906607312);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 39.0, 52.0, 52.0, (-692.3617), 52.0, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.4324461174914625E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0128296198290292E7, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-7161786.906607312), 39.0, 52.0, 52.0, (-692.3617), 52.0, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.58354362022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1.4324461174914625E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0128296198290292E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-7161786.906607312), 39.0, 52.0, 52.0, (-692.3617), 52.0, (-7161786.906607312)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[2] = (double) 52;
      doubleArray0[4] = (-692.3617);
      doubleArray0[5] = 45.1461372005632;
      doubleArray0[6] = (double) 39;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(698.8074823089848, arrayRealVector0.getNorm(), 0.01);
      assertEquals(880.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(698.8074823089848, arrayRealVector0.getNorm(), 0.01);
      assertEquals(880.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-692.3617));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(698.8074823089848, arrayRealVector0.getNorm(), 0.01);
      assertEquals(880.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[4] = (-692.3617);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, (-692.3617), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(744.3617, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(694.3116905445926, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, (-692.3617), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(744.3617, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(694.3116905445926, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, (-692.3617), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(744.3617, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(694.3116905445926, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, (-692.3617), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(744.3617, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(694.3116905445926, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix1.getRowDimension());
      assertEquals(7, realMatrix1.getColumnDimension());
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, (-692.3617), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, Double.NaN);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.2857142857142857, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(744.3617, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(694.3116905445926, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix1.getRowDimension());
      assertEquals(7, realMatrix1.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, (-692.3617), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (double) 39;
      doubleArray0[2] = 39.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(67.54998149518622, arrayRealVector0.getNorm(), 0.01);
      assertEquals(117.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {39.0, 39.0, 39.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(67.54998149518622, arrayRealVector0.getNorm(), 0.01);
      assertEquals(117.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {39.0, 39.0, 39.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 6.674535979806596E-13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[2] = (double) 52;
      doubleArray0[4] = (-692.3617);
      doubleArray0[5] = 45.1461372005632;
      doubleArray0[6] = (double) 39;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(698.8074823089848, arrayRealVector0.getNorm(), 0.01);
      assertEquals(880.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(698.8074823089848, arrayRealVector0.getNorm(), 0.01);
      assertEquals(880.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.7142857142857143, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4433.4468, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(698.8074823089848, arrayRealVector0.getNorm(), 0.01);
      assertEquals(880.5078372005632, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 0.0, (-692.3617), 45.1461372005632, 39.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix1.getColumnDimension());
      assertEquals(7, realMatrix1.getRowDimension());
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, 39.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-7161786.906607312);
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 52;
      doubleArray0[4] = (-692.3617);
      doubleArray0[5] = 45.1461372005632;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[2] = (double) 52;
      doubleArray0[4] = (double) 52;
      doubleArray0[5] = 45.1461372005632;
      doubleArray0[6] = (double) 39;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      assertEquals(6.697191745794577E-103, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-179.0));
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector((-8));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.5855699985089608E-12);
      eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-4198));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4198
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.6625124290344214E-7);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix1);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      assertEquals(7, realMatrix2.getColumnDimension());
      assertFalse(realMatrix2.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.4709121410927734E8);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      assertSame(realMatrix2, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[4] = (-692.3617);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-692.3617));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, 1146.9885641977196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-179.0));
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

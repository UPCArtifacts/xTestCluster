/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:37:50 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4.0582046093723886E-22);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(83681.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(83681.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(83681.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(7);
      assertEquals(8, doubleArray0.length);
      assertEquals((-9.313225746154785E-10), double0, 0.01);
      assertEquals(83681.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2615.0419, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2615.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 9239109.742996287);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(11);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertEquals(18, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertTrue(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2615.0419);
      doubleArray0[1] = (-2720.32789878);
      doubleArray0[3] = 548078.6632243783;
      doubleArray0[4] = 9239109.742996287;
      doubleArray0[7] = (-2615.0419);
      doubleArray0[8] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.9590278301838893E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(1.3089045812532172E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8.02640621225429E10, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), 0.0, 548078.6632243783, 9239109.742996287, 0.0, 0.0, (-2615.0419), 0.333}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.9590278301838893E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(1.3089045812532172E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8.02640621225429E10, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), 0.0, 548078.6632243783, 9239109.742996287, 0.0, 0.0, (-2615.0419), 0.333}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 9239109.742996287);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.9590278301838893E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(1.3089045812532172E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8.02640621225429E10, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertEquals((-2.198303901881386E-272), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), 0.0, 548078.6632243783, 9239109.742996287, 0.0, 0.0, (-2615.0419), 0.333}, doubleArray0, 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(9, doubleArray0.length);
      assertEquals((-2.198303901881386E-272), double0, 0.01);
      assertEquals(1.9590278301838893E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(1.3089045812532172E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8.02640621225429E10, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertEquals((-2.198303901881386E-272), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), 0.0, 548078.6632243783, 9239109.742996287, 0.0, 0.0, (-2615.0419), 0.333}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(33, 33);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(33, blockRealMatrix0.getRowDimension());
      assertEquals(33, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(33, blockRealMatrix0.getRowDimension());
      assertEquals(33, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-3552.8258272042);
      doubleArray0[3] = (-1187.5340229);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-133.98913906376302));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1012, 1012);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1012, blockRealMatrix0.getColumnDimension());
      assertEquals(1012, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-127.6789106));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(68, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(68, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 68x39 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 1694);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1694, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (39, 0) in a 39x1,694 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 803.22104562);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.333);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9239109.742996395, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9239111.742996287, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9239109.742996395, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9239111.742996287, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9239109.742996395, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9239111.742996287, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9239109.742996395, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9239111.742996287, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.478257878879406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getColumnDimension());
      assertEquals(8, realMatrix1.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 0.0, 9239109.742996287, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 39.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(43.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(39.102429592034305, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(156.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {39.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(43.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(39.102429592034305, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(156.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {39.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4251.501439715712);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(43.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(39.102429592034305, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(156.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(1.0807355010911122E-11, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {39.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(43.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(39.102429592034305, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(156.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(1.0807355010911122E-11, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertTrue(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {39.0, 2.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.08325;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83716.00480000001, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3773.4110593158257, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5338.45304878, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 1.0, (-2720.32789878), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83716.00480000001, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3773.4110593158257, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5338.45304878, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 1.0, (-2720.32789878), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2720.32789878));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83716.00480000001, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3773.4110593158257, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5338.45304878, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 1.0, (-2720.32789878), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2615.0419);
      doubleArray0[1] = (-2720.32789878);
      doubleArray0[2] = (-2720.32789878);
      doubleArray0[3] = 548078.6632243783;
      doubleArray0[4] = 9239109.742996287;
      doubleArray0[5] = 548078.6632243783;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = (-2615.0419);
      doubleArray0[8] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.567657463330916E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.0345938475042604E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9271567.16863707, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), (-2720.32789878), 548078.6632243783, 9239109.742996287, 548078.6632243783, 0.333, (-2615.0419), 0.333}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.567657463330916E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.0345938475042604E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9271567.16863707, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), (-2720.32789878), 548078.6632243783, 9239109.742996287, 548078.6632243783, 0.333, (-2615.0419), 0.333}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(9, doubleArray0.length);
      assertEquals(1.567657463330916E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.0345938475042604E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9271567.16863707, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), (-2720.32789878), 548078.6632243783, 9239109.742996287, 548078.6632243783, 0.333, (-2615.0419), 0.333}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[4] = 1.0;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(550696.0381243783, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(589935.3336243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(548084.9017516092, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 0.0, 1.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(550696.0381243783, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(589935.3336243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(548084.9017516092, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 0.0, 1.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(550696.0381243783, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(589935.3336243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(548084.9017516092, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 0.0, 1.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9792524.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9255352.68387104, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9792524.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9255352.68387104, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9792524.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9255352.68387104, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.08325;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.3066074847668936E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8483555939041354E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.478676138903406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.3066074847668936E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8483555939041354E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.478676138903406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2720.32789878));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.3066074847668936E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8483555939041354E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.478676138903406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 9239109.742996287;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.903163385201573E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.307756484005978E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.903163385201573E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.307756484005978E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.903163385201573E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.307756484005978E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 9239109.742996287, 0.333, 548078.6632243783}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9792525.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9255352.683871094, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9792525.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9255352.683871094, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9792525.109019445, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(9255352.683871094, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.333;
      doubleArray0[1] = 1.1031407793827396E7;
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = 9239109.742996287;
      doubleArray0[5] = 548078.6632243783;
      doubleArray0[6] = (double) 39;
      doubleArray0[7] = (-2615.0419);
      doubleArray0[8] = 2649.0406976;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4120202402339067E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.006300935864195E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.7108905858599998E7, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.333, 1.1031407793827396E7, 0.0, 9239109.742996287, 9239109.742996287, 548078.6632243783, 39.0, (-2615.0419), 2649.0406976}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4120202402339067E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.006300935864195E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.7108905858599998E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.333, 1.1031407793827396E7, 0.0, 9239109.742996287, 9239109.742996287, 548078.6632243783, 39.0, (-2615.0419), 2649.0406976}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4120202402339067E9, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.006300935864195E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.7108905858599998E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(2.9018185311351177E-76, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.333, 1.1031407793827396E7, 0.0, 9239109.742996287, 9239109.742996287, 548078.6632243783, 39.0, (-2615.0419), 2649.0406976}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = 1.0;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9789805.781120665, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9255352.28409254, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, 1.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9789805.781120665, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9255352.28409254, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, 1.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(1.4786761255834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9789805.781120665, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9255352.28409254, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, 1.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2720.32789878);
      doubleArray0[2] = (-2720.32789878);
      doubleArray0[3] = 548078.6632243783;
      doubleArray0[4] = 9239109.742996287;
      doubleArray0[5] = 548078.6632243783;
      doubleArray0[6] = 0.333;
      doubleArray0[8] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0340708391242605E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.566820649922916E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9271566.431065494, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, (-2720.32789878), (-2720.32789878), 548078.6632243783, 9239109.742996287, 548078.6632243783, 0.333, 0.0, 0.333}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0340708391242605E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.566820649922916E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9271566.431065494, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, (-2720.32789878), (-2720.32789878), 548078.6632243783, 9239109.742996287, 548078.6632243783, 0.333, 0.0, 0.333}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.0340708391242605E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.566820649922916E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9271566.431065494, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, (-2720.32789878), (-2720.32789878), 548078.6632243783, 9239109.742996287, 548078.6632243783, 0.333, 0.0, 0.333}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2615.0419);
      doubleArray0[1] = (-2720.32789878);
      doubleArray0[2] = (-2720.32789878);
      doubleArray0[3] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(9, doubleArray0.length);
      assertEquals(556134.3609219382, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.7879980890302025E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548098.4034767059, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), (-2720.32789878), 548078.6632243783, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(556134.3609219382, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.7879980890302025E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548098.4034767059, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), (-2720.32789878), 548078.6632243783, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-43.8372309));
      assertEquals(9, doubleArray0.length);
      assertEquals(556134.3609219382, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.7879980890302025E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548098.4034767059, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-2615.0419), (-2720.32789878), (-2720.32789878), 548078.6632243783, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = 2412.4712;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 2412.4712;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(3.785410881493519E10, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.306607571703216E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8493102120592576E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, 2412.4712, 0.0, 0.333, 2412.4712}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(3.785410881493519E10, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.306607571703216E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8493102120592576E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(16, realMatrix0.getRowDimension());
      assertEquals(16, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, 2412.4712, 0.0, 0.333, 2412.4712}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3.1677060052465102E-149);
      assertEquals(8, doubleArray0.length);
      assertEquals(3.785410881493519E10, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.306607571703216E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.8493102120592576E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(16, realMatrix0.getRowDimension());
      assertEquals(16, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 9239109.742996287, 2412.4712, 0.0, 0.333, 2412.4712}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 39.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(156.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(43.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(39.102429592034305, arrayRealVector0.getNorm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {39.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(156.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(43.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(39.102429592034305, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {39.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1046.8015284));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.08325;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.478676138903406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9244446.196045067, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239110.513559079, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.478676138903406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9244446.196045067, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239110.513559079, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.478676138903406E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9244446.196045067, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239110.513559079, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.08325, 1.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getColumnDimension());
      assertEquals(8, realMatrix1.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotSame(realMatrix0, realMatrix1);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 548078.6632243783);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4.0582046093723886E-22);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getColumnDimension());
      assertEquals(8, realMatrix1.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix2.getColumnDimension());
      assertEquals(8, realMatrix2.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix2, realMatrix0);
      assertNotSame(realMatrix2, realMatrix1);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertNotNull(realMatrix2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 548078.6632243783);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix2.getColumnDimension());
      assertEquals(9, realMatrix2.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix2, realMatrix0);
      assertSame(realMatrix2, realMatrix1);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertNotNull(realMatrix2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-49.0));
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getColumnDimension());
      assertEquals(8, realMatrix1.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertTrue(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix2.getRowDimension());
      assertEquals(8, realMatrix2.getColumnDimension());
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix2, realMatrix0);
      assertSame(realMatrix2, realMatrix1);
      assertTrue(realMatrix0.equals((Object)realMatrix1));
      assertTrue(realMatrix2.equals((Object)realMatrix0));
      assertNotNull(realMatrix2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 8.431100619305382E-14);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(5, realMatrix2.getColumnDimension());
      assertEquals(5, realMatrix2.getRowDimension());
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix2, realMatrix1);
      assertNotSame(realMatrix2, realMatrix0);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertNotNull(realMatrix2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 8.431100619305382E-14);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-133.98913906376302));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray1[0];
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 9239109.742996287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(2117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2117
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3.1677060052465102E-149);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-756398618));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -756398618
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 9239109.742996287);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector(27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}

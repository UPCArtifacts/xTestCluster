/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:35:08 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2616.9764215005916);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.478676275106846E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9792526.043540947, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9255352.684417829, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.478676275106846E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9792526.043540947, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9255352.684417829, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.478676275106846E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9792526.043540947, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9255352.684417829, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.5);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 39;
      doubleArray0[2] = (-7161786.906607312);
      doubleArray0[3] = (-7161786.906607312);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 39.0, (-7161786.906607312), (-7161786.906607312), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4323612813214624E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0128296174225202E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.58356858022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 39.0, (-7161786.906607312), (-7161786.906607312), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4323612813214624E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0128296174225202E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.58356858022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 52.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 39.0, (-7161786.906607312), (-7161786.906607312), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4323612813214624E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0128296174225202E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.58356858022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(2);
      assertEquals(0.0078125, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 39.0, (-7161786.906607312), (-7161786.906607312), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4323612813214624E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.0128296174225202E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4.58356858022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, double0, 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0764407642793958;
      doubleArray0[1] = 0.0764407642793958;
      doubleArray0[2] = (-2616.9764215005916);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9255352.684417829, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9792526.196422474, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9255352.684417829, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9792526.196422474, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 31);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9255352.684417829, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9792526.196422474, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals((-9.626822446676161E-57), eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-9.626822446676161E-57), double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9255352.684417829, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9792526.196422474, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals((-9.626822446676161E-57), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1160
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-7161786.906607312);
      doubleArray1[4] = (double) 52;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 8x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.333);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x3 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0764407642793958;
      doubleArray0[3] = 9239109.742996287;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0, 0.0, 9239109.742996287, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9239109.742996287, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239109.819437051, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.478257607801495E8, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0, 0.0, 9239109.742996287, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9239109.742996287, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239109.819437051, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.478257607801495E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0, 0.0, 9239109.742996287, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9239109.742996287, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239109.819437051, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.478257607801495E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0, 0.0, 9239109.742996287, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9239109.742996287, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9239109.819437051, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(1.478257607801495E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getColumnDimension());
      assertEquals(8, realMatrix1.getRowDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (double) 39;
      doubleArray0[2] = (-7161786.906607312);
      doubleArray0[3] = (-7161786.906607312);
      doubleArray0[5] = (-3131.2265626);
      doubleArray0[6] = (double) 39;
      doubleArray0[7] = (double) 39;
      doubleArray0[8] = (double) 52;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, 39.0, (-7161786.906607312), (-7161786.906607312), 0.0, (-3131.2265626), 39.0, 39.0, 52.0}, doubleArray0, 0.01);
      assertEquals(4.58359354022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4326913039777225E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.0128296658603145E7, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, 39.0, (-7161786.906607312), (-7161786.906607312), 0.0, (-3131.2265626), 39.0, 39.0, 52.0}, doubleArray0, 0.01);
      assertEquals(4.58359354022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4326913039777225E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.0128296658603145E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, 39.0, (-7161786.906607312), (-7161786.906607312), 0.0, (-3131.2265626), 39.0, 39.0, 52.0}, doubleArray0, 0.01);
      assertEquals(4.58359354022868E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4326913039777225E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(1.0128296658603145E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[5] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4399774693256652E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.082393190284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4399774693256652E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.082393190284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 0.0, (-2615.0419), 9239109.742996287, (-2720.32789878), 1.1031407793827396E7, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.4786759655834058E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.4399774693256652E7, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.082393190284684E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 1.1031407793827396E7, 1.0, 0.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1579488790051775E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1045014628093516E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 1.1031407793827396E7, 1.0, 0.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1579488790051775E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1045014628093516E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, 1.1031407793827396E7, 1.0, 0.0, 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.1579488790051775E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.1045014628093516E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(3.5300508140247667E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = (-17.327278952285408);
      doubleArray0[3] = (-17.327278952285408);
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, (-17.327278952285408), 1.1031407793827396E7, (-17.327278952285408), (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.1045014963121694E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.5300560387540317E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1582241772508461E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, (-17.327278952285408), 1.1031407793827396E7, (-17.327278952285408), (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.1045014963121694E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.5300560387540317E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1582241772508461E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, (-17.327278952285408), 1.1031407793827396E7, (-17.327278952285408), (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertEquals(1.1045014963121694E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3.5300560387540317E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1.1582241772508461E7, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.1677060052465102E-149;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 548078.6632243783;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 1.0, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(589935.3336243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548091.6526566957, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(553416.3660231583, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 1.0, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(589935.3336243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548091.6526566957, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(553416.3660231583, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3.1677060052465102E-149, 1.0, (-2615.0419), 1.0, (-2720.32789878), 0.0, 0.333, 548078.6632243783}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(589935.3336243783, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(548091.6526566957, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(553416.3660231583, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0764407642793958;
      doubleArray0[1] = 0.0764407642793958;
      doubleArray0[2] = (-2616.9764215005916);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      doubleArray0[7] = 0.0764407642793958;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0764407642793958}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9244447.60963886, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9239110.514106782, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0764407642793958}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9244447.60963886, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9239110.514106782, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0764407642793958}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9244447.60963886, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9239110.514106782, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 548078.6632243783;
      doubleArray0[1] = 0.333;
      doubleArray0[2] = (double) 39;
      doubleArray0[4] = (double) 39;
      doubleArray0[5] = 620.083395386;
      doubleArray0[3] = (double) 52;
      doubleArray0[7] = (double) 52;
      doubleArray0[8] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {548078.6632243783, 0.333, 39.0, 52.0, 39.0, 620.083395386, 0.0, 52.0, 39.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(548079.0230946168, arrayRealVector0.getNorm(), 0.01);
      assertEquals(548920.0796197642, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4030813778544083E8, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {548078.6632243783, 0.333, 39.0, 52.0, 39.0, 620.083395386, 0.0, 52.0, 39.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(548079.0230946168, arrayRealVector0.getNorm(), 0.01);
      assertEquals(548920.0796197642, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4030813778544083E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-839.69254331937));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {548078.6632243783, 0.333, 39.0, 52.0, 39.0, 620.083395386, 0.0, 52.0, 39.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(548079.0230946168, arrayRealVector0.getNorm(), 0.01);
      assertEquals(548920.0796197642, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.4030813778544083E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 13.807803935032927;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 9239109.603647107;
      doubleArray0[4] = (-2718.480217296817);
      doubleArray0[2] = 1.1031407793827396E7;
      doubleArray0[6] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {13.807803935032927, 1.0, 1.1031407793827396E7, 9239109.603647107, (-2718.480217296817), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4389340206286266E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.0273251018495735E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300593310192853E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {13.807803935032927, 1.0, 1.1031407793827396E7, 9239109.603647107, (-2718.480217296817), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4389340206286266E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.0273251018495735E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300593310192853E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {13.807803935032927, 1.0, 1.1031407793827396E7, 9239109.603647107, (-2718.480217296817), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4389340206286266E7, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.0273251018495735E7, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.5300593310192853E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0764407642793958;
      doubleArray0[1] = 0.0764407642793958;
      doubleArray0[2] = (-2616.9764215005916);
      doubleArray0[3] = 9239109.742996287;
      doubleArray0[4] = (-2720.32789878);
      doubleArray0[6] = 0.333;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9239110.514106782, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9244447.533198096, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9239110.514106782, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9244447.533198096, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 9239109.742996287, (-2720.32789878), 0.0, 0.333, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1.4786762995678905E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9239110.514106782, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9244447.533198096, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.333);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getRowDimension());
      assertEquals(8, realMatrix1.getColumnDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, (-2020.32379964));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0764407642793958;
      doubleArray0[1] = 0.0764407642793958;
      doubleArray0[2] = (-2616.9764215005916);
      doubleArray0[4] = (-2720.32789878);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5337.45720180915, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(83748.13769693281, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3774.751578482647, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5337.45720180915, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(83748.13769693281, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3774.751578482647, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, (-2616.9764215005916), 0.0, (-2720.32789878), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5337.45720180915, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(83748.13769693281, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3774.751578482647, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.333;
      doubleArray0[1] = 0.333;
      doubleArray0[5] = 620.083395386;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.333, 0.333, 0.0, 0.0, 0.0, 620.083395386, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5003.291163088, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(620.7493953860001, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(620.083574215146, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.333, 0.333, 0.0, 0.0, 0.0, 620.083395386, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5003.291163088, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(620.7493953860001, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(620.083574215146, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-839.69254331937));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0764407642793958;
      doubleArray0[1] = 0.0764407642793958;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.1528815285587916, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9.784417827762663, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.10810356556208638, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.1528815285587916, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9.784417827762663, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.10810356556208638, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0764407642793958, 0.0764407642793958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.1528815285587916, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9.784417827762663, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.10810356556208638, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(decompositionSolver1, decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver1.isNonSingular());
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getRowDimension());
      assertEquals(8, realMatrix1.getColumnDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(6);
      assertNotNull(realVector0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realVector0, arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertTrue(realVector0.isNaN());
      assertEquals(8, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getColumnDimension());
      assertEquals(8, realMatrix1.getRowDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix2);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix2);
      assertSame(realMatrix2, realMatrix1);
      assertNotSame(realMatrix2, realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix2.getRowDimension());
      assertEquals(8, realMatrix2.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertNotNull(realMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(39, realMatrix0.getColumnDimension());
      assertEquals(39, realMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertNotNull(realMatrix1);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(39, realMatrix1.getRowDimension());
      assertEquals(39, realMatrix1.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getRowDimension());
      assertEquals(8, realMatrix1.getColumnDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix1.getRowDimension());
      assertEquals(8, realMatrix1.getColumnDimension());
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix2);
      assertEquals(8, doubleArray0.length);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix0, realMatrix1);
      assertSame(realMatrix2, realMatrix1);
      assertNotSame(realMatrix2, realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix2.getRowDimension());
      assertEquals(8, realMatrix2.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2615.0419);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertNotNull(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2616.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83713.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2615.0420912015184, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeDivide(arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(8, doubleArray0.length);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2616.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83713.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2615.0420912015184, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01);
      assertTrue(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(8, doubleArray0.length);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2615.0419), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2616.0419, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(83713.3408, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(2615.0420912015184, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01);
      assertTrue(arrayRealVector1.isNaN());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 9239109.742996287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2615.0419));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2616.9764215005916));
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:53:43 GMT 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(12, 12);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(1);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertEquals(12, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertTrue(realVector0.isNaN());
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(2, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4.0);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(1.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2, doubleArray0.length);
      
      double double1 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1.0, double1, 0.01);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(1.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1553, 1553);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1553, blockRealMatrix0.getColumnDimension());
      assertEquals(1553, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 2x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 268);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(268, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (2, 0) in a 2x268 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      assertEquals(2, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4.0);
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(1.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(1.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix1.getColumnDimension());
      assertEquals(2, realMatrix1.getRowDimension());
      assertNotNull(realMatrix1);
      assertEquals(2, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.2250738585072014E-308);
      assertEquals(2.2250738585072014E-308, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(4221.88);
      assertEquals(4221.88, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2.2250738585072014E-308);
      assertEquals(2.2250738585072014E-308, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-887.613010917));
      assertEquals((-887.613010917), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = double2;
      Double double4 = new Double(1248.86255);
      assertEquals(1248.86255, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[6] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.42857142857142855, openMapRealVector0.getSparcity(), 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.42857142857142855, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (double) doubleArray0[0]);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.42857142857142855, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.2250738585072014E-308);
      assertEquals(2.2250738585072014E-308, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(4221.88);
      assertEquals(4221.88, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      Double double2 = new Double((-887.613010917));
      assertEquals((-887.613010917), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[3] = double2;
      doubleArray0[4] = double2;
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertEquals(7, doubleArray0.length);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (double) doubleArray0[0]);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(12);
      assertEquals(12.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = Double.valueOf((double) 52);
      assertEquals(52.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = double2;
      doubleArray0[8] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.5555555555555556, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.5555555555555556, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-3720.12124));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(0.5555555555555556, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(12);
      assertEquals(12.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-3720.12124));
      assertEquals((-3720.12124), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-3720.12124));
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealMatrix0.getRowDimension());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(12, 12);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(12, realMatrix0.getRowDimension());
      assertEquals(12, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(25);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(5, 5);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(5, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 5);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(5, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(5, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(5, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix1.getColumnDimension());
      assertEquals(2, realMatrix1.getRowDimension());
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix1.getRowDimension());
      assertEquals(2, realMatrix1.getColumnDimension());
      assertNotNull(realMatrix1);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(12, 12);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(12, realMatrix0.getColumnDimension());
      assertEquals(12, realMatrix0.getRowDimension());
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertSame(realMatrix1, realMatrix0);
      assertEquals(12, blockRealMatrix0.getColumnDimension());
      assertEquals(12, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(12, realMatrix1.getColumnDimension());
      assertEquals(12, realMatrix1.getRowDimension());
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 38076.16804479897);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(doubleArray0);
      assertEquals(39, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Double double0 = new Double(12);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-3720.12124));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

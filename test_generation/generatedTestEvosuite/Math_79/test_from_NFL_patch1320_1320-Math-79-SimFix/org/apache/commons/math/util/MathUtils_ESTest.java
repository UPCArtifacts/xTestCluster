/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:50:56 GMT 2021
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2865;
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) (byte)65;
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 61;
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.pow((-4568716426714739085L), 0L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.pow((-639L), 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.scalb((-375.74346103), (-2180));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.mulAndCheck(373L, (-1970L));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.indicator((short)2211);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.indicator((long) (short)0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.indicator(989);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.factorialDouble(20);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[2];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.equals((double) (-335L), 0.0, 1117);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(2605.77256887, (double) 0, 2131693327);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(Double.NEGATIVE_INFINITY, (double) 989, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(61, 10);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.subAndCheck((long) 0, 473L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.subAndCheck(10, 10);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.subAndCheck(17, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.sinh(0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.sinh((-2121));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.scalb(42, (-2146361659));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.round((float) (-223L), (-1868), 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.round((-1.0F), (-1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round(1811.2F, 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round((float) (-2175L), 4);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.round((double) 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.round(2046.907521535507, 376, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.round((-2840.2126), 0, 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.round((-994.4227803961916), (-2002));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.round((-3819.1201171875), 110);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, 2019);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-109);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MathUtils.pow(bigInteger0, 1270);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.pow((-1L), 1380L);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.pow(1157L, 1157L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.pow((long) (byte) (-1), 1040400);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.pow((long) (-3362), 1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.pow(1033, 2874L);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.pow(37, 37);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.normalizeAngle(0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathUtils.normalizeAngle((byte) (-70), 1043.9758013246994);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.normalizeAngle((-1), 2.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.mulAndCheck(0, 12);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.mulAndCheck(4194304, (-1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.log(0.0, 4481.5);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.log(2240.1076899356, 2240.1076899356);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-70);
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.hash((double) (byte)0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.hash((double) (-1662.7047F));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 247.2135304547);
      MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      int[] intArray1 = new int[6];
      MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1380L;
      MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 556L;
      double[] doubleArray1 = new double[4];
      MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.addAndCheck((-1519L), 1184L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathUtils.addAndCheck((-1877), 670);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, 1073741824, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1073741860);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(2139095040, 1063);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(2146489768);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(987, 1157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 987, k = 1,157
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficientLog(1073741824, 28629151);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-941), (-465));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -941, k = -465
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathUtils.nextAfter((-1072.0), (-1072.0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.nextAfter(0.0, 3054.825);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.mulAndCheck((long) 37, (long) 37);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.mulAndCheck(61, 314);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.indicator(882.3139F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MathUtils.gcd((-482), (-1073741823));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathUtils.gcd(1387, 66);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.gcd((-352), (-352));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathUtils.factorialLog(2865);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathUtils.equals(2462.27122825484, (double) (-1.0F), (double) (-3819.12F));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathUtils.equals((double) (short)1, 0.0, (double) (short)1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.equals((double) 373L, (double) (-877));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.binomialCoefficientLog(1982, 20);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(2731, 685);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(1157, (-372));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.binomialCoefficient(37, 12);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-94,557,999,988,736^-94,557,999,988,736)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathUtils.pow(bigInteger0, (long) 42);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-850L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-850)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-207L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-207)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathUtils.pow(0L, 2497L);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        MathUtils.pow((long) (byte) (-1), (int) (byte) (-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-69)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathUtils.pow((long) 1040400, 1040400);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.pow(0, 4212L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        MathUtils.pow(0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        MathUtils.pow(1390, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,390^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.pow((-2214), 1086);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(1398, (-2147482867));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathUtils.subAndCheck((-3938), (-2259));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2147482867), 2474);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathUtils.sign((short) (-1835));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathUtils.sign((short)3199);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.sign((-896L));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.sign(1L);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathUtils.sign((-1157));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.sign(1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathUtils.sign((float) (-2333L));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.sign(5665.045F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathUtils.sign((-1.0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathUtils.sign((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathUtils.sign((double) 23);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathUtils.sign((byte) (-69));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.sign((byte)65);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathUtils.round(1962.0F, 64, 5);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.round(2.70215988E15F, 0, 1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.79333978951632E195;
      doubleArray0[2] = Double.NaN;
      MathUtils.normalizeArray(doubleArray0, 268.30441924);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4368.45F);
      MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = Double.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, 268.30441924);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-850L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 7
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        MathUtils.normalizeArray((double[]) null, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.scalb(Double.NEGATIVE_INFINITY, 0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathUtils.scalb(Double.NaN, 2223);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathUtils.scalb(0.0, (-1390));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathUtils.nextAfter((-1.0), 658.4437614081971);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathUtils.nextAfter(3968.483881, (-16.37701726704813));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathUtils.round((float) 0, 2865, 0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.mulAndCheck((long) (short)0, (long) (short)0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-4576790492441219170L), 355687428096000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathUtils.mulAndCheck(0L, (-1L));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathUtils.mulAndCheck((-2333L), (-2333L));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathUtils.mulAndCheck((-9223372036854775808L), 1L);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147483511), (-1078));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2013265920, (-426));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathUtils.lcm(1073741824, 0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathUtils.indicator((short) (-4616));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathUtils.indicator(2292L);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathUtils.indicator((-1520L));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathUtils.indicator((-351));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathUtils.indicator((-1662.7047F));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 14, 9987);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 9,987, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathUtils.indicator(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.indicator((-783.7507685246762));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathUtils.indicator((byte)6);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathUtils.indicator((byte) (-69));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MathUtils.lcm((-1157), (-1157));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathUtils.gcd((short)1, (short)0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathUtils.gcd(0, (byte)12);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,359
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathUtils.factorialDouble(23);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1811));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,811
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(639);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -696
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathUtils.factorial(6);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = new double[1];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MathUtils.equals((double) 19154, (double) 61, 61);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MathUtils.equals((double) (-1157), (double) (-1157), 989);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(4.9E-324, (double) (-1L), 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 2229.1338971363457, (-1669));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MathUtils.equals(0.0, (-1578.154), 989);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MathUtils.equals(2644.2446, 2644.2446, (-1278.445415103));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, 2585, 2865);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MathUtils.compareTo((-1L), 1.0, 1.073741824E9);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MathUtils.compareTo((-499.039586), (-82.1789862), 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-928), (-1632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -928
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MathUtils.binomialCoefficientLog(3318, 1785);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MathUtils.binomialCoefficientLog(685, (-1300));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MathUtils.binomialCoefficientLog(10, (-525));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MathUtils.binomialCoefficientLog(0, (-1));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MathUtils.binomialCoefficientLog(4045, 0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MathUtils.binomialCoefficientLog(989, 1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MathUtils.binomialCoefficientLog((short)0, (short)0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(915, 740);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, (-1));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(61, 1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(554, 0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, 0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3986, 61);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(66, 8);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MathUtils.binomialCoefficient(3986, (-114));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(20, 12);
      assertEquals(125970L, long0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(901, (byte)1);
      assertEquals(901L, long0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(13, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2346L), 9223372036854775806L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2346L), (-2346L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-192L), 414L);
      assertEquals((-606L), long0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(222L, (-192L));
      assertEquals(414L, long0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(1157, Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(476, 2338);
      assertEquals(2814, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = MathUtils.log(959.4530783428762, 0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double double0 = MathUtils.round(1412.1276, 0);
      assertEquals(1412.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double double0 = MathUtils.cosh(0.5);
      assertEquals(1.1276259652063807, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = MathUtils.sinh(306.203248217419);
      assertEquals(4.801213803354489E132, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(87178291200L, 87178291200L);
      assertEquals(174356582400L, long0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(28629151, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = MathUtils.hash(4.748059710301224E19);
      assertEquals((-134212476), int0);
  }
}

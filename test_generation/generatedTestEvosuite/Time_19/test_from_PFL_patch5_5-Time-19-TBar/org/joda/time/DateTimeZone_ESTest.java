/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 23 18:16:17 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      //  // Unstable assertion: assertEquals(1, BuddhistChronology.BE);
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      //  // Unstable assertion: assertEquals(1, BuddhistChronology.BE);
      //  // Unstable assertion: assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      //  // Unstable assertion: assertNotSame(dateTimeZone0, dateTimeZone1);
      //  // Unstable assertion: assertNotSame(dateTimeZone1, dateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone1.getID());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone1.toString());
      //  // Unstable assertion: assertNotNull(dateTimeZone1);
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1);
      //  // Unstable assertion: assertEquals(1, BuddhistChronology.BE);
      //  // Unstable assertion: assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      //  // Unstable assertion: assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      //  // Unstable assertion: assertEquals(1L, long0);
      //  // Unstable assertion: assertNotSame(dateTimeZone0, dateTimeZone1);
      //  // Unstable assertion: assertNotSame(dateTimeZone1, dateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone1.getID());
      //  // Unstable assertion: assertEquals("Europe/Paris", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-79608345), "Q~c5T%n=EYv");
      assertEquals("Q~c5T%n=EYv", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Q~c5T%n=EYv,offset=-79608345,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-79608345), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals("Q~c5T%n=EYv", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Q~c5T%n=EYv,offset=-79608345,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-79608345), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-22:06", dateTimeZone0.getID());
      assertEquals("-22:06", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 5);
      assertEquals("+00:05", dateTimeZone0.getID());
      assertEquals("+00:05", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:00.002");
      assertEquals("-00:00:00.002", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.002", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Australia/Darwin");
      assertEquals("Australia/Darwin", dateTimeZone0.getID());
      assertEquals("Australia/Darwin", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      dateTimeZone0.hashCode();
      assertEquals("Australia/Darwin", dateTimeZone0.getID());
      assertEquals("Australia/Darwin", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("+00:00:00.001", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(1, timeZone0.getRawOffset());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-14));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.014", dateTimeZone0.toString());
      assertEquals("-00:00:00.014", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.014", dateTimeZone0.toString());
      assertEquals("-00:00:00.014", dateTimeZone0.getID());
      assertEquals("-00:00:00.014", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals((-14), timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.014,offset=-14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(0);
      assertEquals(0L, long0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(1000L);
      assertEquals(1000L, long0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.previousTransition((-2158283648L));
      assertEquals((-2158283648L), long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "Td[mn,P$Z6dv@a'h=4");
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.nextTransition(0L);
      assertEquals(0L, long0);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(997);
      assertEquals("+00:00:00.997", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.997", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.nextTransition((-2895L));
      assertEquals((-2895L), long0);
      assertEquals("+00:00:00.997", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.997", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^'lX-c/Lu'0S5pL");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset(0L);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset(10800000L);
      assertEquals(1, int0);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-12219292799987L));
      assertEquals(0, int0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392332400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals(0, int0);
      assertEquals(1392332400000L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3600000));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("-01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392332400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals((-3600000), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals(1392332400000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.UTC.getOffset((-1L));
      assertEquals(0, int0);
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = cachedDateTimeZone0.getOffset((long) 1);
      assertEquals(1, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2093064));
      assertEquals("-00:34:53.064", dateTimeZone0.toString());
      assertEquals("-00:34:53.064", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertEquals("-00:34:53.064", dateTimeZone0.toString());
      assertEquals("-00:34:53.064", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:34:53.064", cachedDateTimeZone0.getID());
      assertEquals("-00:34:53.064", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = cachedDateTimeZone0.getOffset(43L);
      assertEquals((-2093064), int0);
      assertEquals("-00:34:53.064", dateTimeZone0.toString());
      assertEquals("-00:34:53.064", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:34:53.064", cachedDateTimeZone0.getID());
      assertEquals("-00:34:53.064", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey((-538L));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("America/Puerto_Rico");
      assertEquals("America/Puerto_Rico", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("America/Puerto_Rico", timeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(1L);
      assertEquals("AST", string0);
      assertEquals("America/Puerto_Rico", timeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 0);
      assertEquals(0L, long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, (-1L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-1L), long0);
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2));
      assertEquals("-00:00:00.002", dateTimeZone0.toString());
      assertEquals("-00:00:00.002", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getID();
      assertEquals("-00:00:00.002", string0);
      assertEquals("-00:00:00.002", dateTimeZone0.toString());
      assertEquals("-00:00:00.002", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.UTC.equals("JcT");
      assertFalse(boolean0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "Td[mn,P$Z6dv@a'h=4");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(0L);
      assertEquals(0L, long0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(569L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3600569L, long0);
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2054L));
      assertEquals((-2053L), long0);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1213));
      assertEquals("-00:00:01.213", dateTimeZone0.getID());
      assertEquals("-00:00:01.213", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1213), true, (-1L));
      assertEquals(0L, long0);
      assertEquals("-00:00:01.213", dateTimeZone0.getID());
      assertEquals("-00:00:01.213", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(8328832L, true, (-7197778L));
      assertEquals(8328832L, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(1554L, true, 780013L);
      assertEquals((-3598446L), long0);
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(0L, true);
      assertEquals(0L, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.adjustOffset(0, false);
      assertEquals(0L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(997);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.997", dateTimeZone0.getID());
      assertEquals("+00:00:00.997", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset(4140L, false);
      assertEquals(4140L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.997", dateTimeZone0.getID());
      assertEquals("+00:00:00.997", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-109257940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(10800000L, false);
      assertEquals(10800000L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392332400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-411L));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1392332400000L, dateMidnight0.getMillis());
      assertEquals((-3600000L), dateMidnight1.getMillis());
      assertNotNull(dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(lenientChronology0);
      
      // Undeclared exception!
      try { 
        lenientChronology0.getDateTimeMillis(9223372036854775807L, 23, 1, 1, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffsetFromLocal((-1476L));
      assertEquals(3600000, int0);
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getName(3106L, (Locale) null);
      assertEquals("Central European Time", string0);
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName(2151L, (Locale) null);
      assertEquals("CET", string0);
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-22));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-22:00", dateTimeZone0.toString());
      assertEquals("-22:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-22));
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("-22:00", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-22:00", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-2080), 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID(",vDram24#f4g*Hml");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id ',vDram24#f4g*Hml' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = cachedDateTimeZone0.adjustOffset((-575L), false);
      assertEquals((-575L), long0);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Q]ef'W:?Oi");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 9223372036854775807L);
      assertEquals(9223372036854775807L, long0);
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertEquals("Europe/Paris", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(10L, false);
      assertEquals((-3599990L), long0);
      assertEquals("Europe/Paris", dateTimeZone0.toString());
      assertEquals("Europe/Paris", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(31083597720000L);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(416);
      assertEquals(31083519600000L, dateMidnight0.getMillis());
      assertEquals((-49039171761000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.adjustOffset((-235L), true);
      assertEquals((-235L), long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateTimeZone0.adjustOffset(9223372036854775807L, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-22));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-22));
      assertEquals((-79200000), int0);
      assertEquals("-22:00", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(93660378195599999L, dateTimeZone0);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MockDate mockDate0 = new MockDate(0, 3951, 0, 3005, 3951, 1);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(1);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("SST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals(39600000, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Locale locale0 = Locale.UK;
      String string0 = dateTimeZone0.getName((-766623600001L), locale0);
      assertNotNull(string0);
      assertEquals("+02:00", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-14));
      Locale locale0 = Locale.JAPAN;
      String string0 = dateTimeZone0.getName(1000L, locale0);
      assertEquals("-00:00:00.014", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Australia/Darwin");
      Locale locale0 = Locale.US;
      String string0 = dateTimeZone0.getShortName((-3724L), locale0);
      assertEquals("+09:30", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2093064));
      Locale locale0 = Locale.CHINA;
      String string0 = dateTimeZone0.getShortName(43L, locale0);
      assertEquals("-00:34:53.064", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1376), "II~*_u%QP?+ k");
      DateTimeZone.forTimeZone(simpleTimeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      dateTimeZone0.isFixed();
      assertEquals("+00:00:01", dateTimeZone0.getID());
  }

//   @Test(timeout = 4000)
//   public void test65()  throws Throwable  {
//       UTCProvider uTCProvider0 = new UTCProvider();
//       DateTimeZone.setProvider(uTCProvider0);
//       TimeZone timeZone0 = TimeZone.getTimeZone("Q]ef'W:?Oi");
//       DateTimeZone.forTimeZone(timeZone0);
//       DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
//       assertEquals("UTC", dateTimeZone0.toString());
//   }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      TimeZone timeZone0 = TimeZone.getTimeZone("JST");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'JST' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Europe/Paris", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+01:13", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(3600, 3600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 3600
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeZone0.nextTransition(3L);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-125583840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -125583840
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.997");
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.997", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Europe/Paris", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(31083597720000L);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals(31083519600000L, dateMidnight0.getMillis());
      assertEquals(3600000, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("Europe/Paris", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      String string0 = dateTimeZone0.toString();
      assertEquals("Europe/Paris", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.getName(3599298L);
      assertEquals("Central European Time", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      int int0 = dateTimeZone0.getStandardOffset(16314776L);
      assertEquals((-3600000), int0);
      assertEquals("-01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Q]ef'W:?Oi");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName((-246L));
      assertEquals("CET", string0);
  }
}

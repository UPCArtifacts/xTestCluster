/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:25:29 GMT 2021
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.AbstractObjectList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractObjectList_ESTest extends AbstractObjectList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2361);
      Object object0 = new Object();
      abstractObjectList0.set(2361, object0);
      int int0 = abstractObjectList0.size();
      assertEquals(2362, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      abstractObjectList0.set(2019, abstractObjectList0);
      int int0 = abstractObjectList0.indexOf(abstractObjectList0);
      assertEquals(2020, abstractObjectList0.size());
      assertEquals(2019, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(1, (-2960));
      // Undeclared exception!
      try { 
        abstractObjectList0.set(8, abstractObjectList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(0);
      // Undeclared exception!
      try { 
        abstractObjectList0.set(0, abstractObjectList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2361);
      Object object0 = new Object();
      abstractObjectList0.set(2361, object0);
      abstractObjectList0.indexOf("Zmidq35xVKpjU'");
      abstractObjectList0.indexOf("Zmidq35xVKpjU'");
      abstractObjectList0.indexOf("Zmidq35xVKpjU'");
      abstractObjectList0.indexOf("Zmidq35xVKpjU'");
      // Undeclared exception!
      abstractObjectList0.indexOf(abstractObjectList0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      abstractObjectList0.set(5883, abstractObjectList0);
      Object object0 = abstractObjectList0.clone();
      // Undeclared exception!
      object0.equals(abstractObjectList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = null;
      try {
        abstractObjectList0 = new AbstractObjectList((-338), (-338));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = null;
      try {
        abstractObjectList0 = new AbstractObjectList((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2361);
      boolean boolean0 = abstractObjectList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList1);
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(0, 0);
      AbstractObjectList abstractObjectList1 = new AbstractObjectList();
      abstractObjectList1.set(47, abstractObjectList0);
      boolean boolean0 = abstractObjectList1.equals(abstractObjectList0);
      assertEquals(48, abstractObjectList1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      boolean boolean0 = abstractObjectList0.equals("Bm0a@ZJ~9|Hk^g");
      assertFalse(boolean0);
      assertEquals(0, abstractObjectList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      // Undeclared exception!
      try { 
        abstractObjectList0.indexOf((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      
      Object object0 = new Object();
      abstractObjectList0.set(0, object0);
      int int0 = abstractObjectList0.indexOf(abstractObjectList0);
      assertEquals(1, abstractObjectList0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      
      Object object0 = new Object();
      abstractObjectList0.set(0, object0);
      int int0 = abstractObjectList0.indexOf(object0);
      assertEquals(1, abstractObjectList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      // Undeclared exception!
      try { 
        abstractObjectList0.set((-4222), "java.vm.specification.version");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      
      Object object0 = new Object();
      abstractObjectList0.set(0, object0);
      abstractObjectList0.get(0);
      assertEquals(1, abstractObjectList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      abstractObjectList0.get(0);
      assertEquals(0, abstractObjectList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      abstractObjectList0.get((-3575));
      assertEquals(0, abstractObjectList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2361);
      int int0 = abstractObjectList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2361);
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
  }
}

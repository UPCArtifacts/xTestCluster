/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:26:11 GMT 2021
 */

package org.apache.commons.math.optimization.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
import org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer;
import org.apache.commons.math.optimization.VectorialPointValuePair;
import org.apache.commons.math.optimization.fitting.GaussianFitter;
import org.apache.commons.math.optimization.fitting.WeightedObservedPoint;
import org.apache.commons.math.random.JDKRandomGenerator;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
import org.apache.commons.math.random.UniformRandomGenerator;
import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GaussianFitter_ESTest extends GaussianFitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2973.3089);
      doubleArray0[1] = 55.0;
      doubleArray0[2] = (-431.2538775828);
      doubleArray0[3] = (-558.346);
      VectorialPointValuePair vectorialPointValuePair0 = new VectorialPointValuePair(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(vectorialPointValuePair0);
      assertArrayEquals(new double[] {(-2973.3089), 55.0, (-431.2538775828), (-558.346)}, doubleArray0, 0.01);
      
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(vectorialPointValuePair0).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt() , any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(2.2250738585072014E-306, (-2465.43839335808), (-1582.4905));
      assertEquals((-2465.43839335808), weightedObservedPoint0.getX(), 0.01);
      assertEquals((-1582.4905), weightedObservedPoint0.getY(), 0.01);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint0.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.333333333333333, (-606.9911591), 2.2250738585072014E-306);
      assertEquals(0.333333333333333, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint1.getY(), 0.01);
      assertEquals((-606.9911591), weightedObservedPoint1.getX(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(657.9697, 1.1921056801463227E-8, 2.2250738585072014E-306);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint2.getY(), 0.01);
      assertEquals(657.9697, weightedObservedPoint2.getWeight(), 0.01);
      assertEquals(1.1921056801463227E-8, weightedObservedPoint2.getX(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      weightedObservedPointArray0[4] = weightedObservedPoint0;
      weightedObservedPointArray0[5] = weightedObservedPoint1;
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint((-763.7228800335), 0.333333333333333, 1.1921056801463227E-8);
      assertEquals(0.333333333333333, weightedObservedPoint3.getX(), 0.01);
      assertEquals(1.1921056801463227E-8, weightedObservedPoint3.getY(), 0.01);
      assertEquals((-763.7228800335), weightedObservedPoint3.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[7] = weightedObservedPoint3;
      weightedObservedPointArray0[8] = weightedObservedPoint1;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(9, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray1 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(3, doubleArray1.length);
      assertEquals(9, weightedObservedPointArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.1921056801463227E-8, 0.333333333333333, 1047.1168410064242}, doubleArray1, 0.01);
      
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(gaussianFitter0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2973.3089), 55.0, (-431.2538775828), (-558.346)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = gaussianFitter0.fit(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(9, weightedObservedPointArray0.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2973.3089), 55.0, (-431.2538775828), (-558.346)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1921056801463227E-8, 0.333333333333333, 1047.1168410064242}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2973.3089), 55.0, (-431.2538775828), (-558.346)}, doubleArray2, 0.01);
      
      Random.setNextRandom(4003);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      int int0 = 36;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(36);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(36, 36, 36);
      assertEquals(36.0, weightedObservedPoint0.getY(), 0.01);
      assertEquals(36.0, weightedObservedPoint0.getX(), 0.01);
      assertEquals(36.0, weightedObservedPoint0.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(36, 36, (-246.14));
      assertEquals(36.0, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(36.0, weightedObservedPoint1.getX(), 0.01);
      assertEquals((-246.14), weightedObservedPoint1.getY(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(4, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(4, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {36.0, 36.0, 0.0}, doubleArray0, 0.01);
      
      MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 36, unitSphereRandomVectorGenerator0);
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getEvaluations());
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartDifferentiableMultivariateVectorialOptimizer0);
      
      GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getEvaluations());
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getMaxEvaluations());
      assertNotNull(gaussianFitter0);
      
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null, (VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt() , any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      doReturn(0, 0, 0, 0, 0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();
      Well19937a well19937a0 = new Well19937a((long) 1738);
      assertNotNull(well19937a0);
      
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);
      assertNotNull(uniformRandomGenerator0);
      
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(1738, uniformRandomGenerator0);
      assertNotNull(uncorrelatedRandomVectorGenerator0);
      
      MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 1738, uncorrelatedRandomVectorGenerator0);
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getEvaluations());
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartDifferentiableMultivariateVectorialOptimizer0);
      
      GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getEvaluations());
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getMaxEvaluations());
      assertNotNull(gaussianFitter0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1738;
      doubleArray0[1] = (double) 1738;
      doubleArray0[2] = (double) 1738;
      doubleArray0[3] = 2644.15362839057;
      doubleArray0[4] = (double) 1738;
      doubleArray0[5] = (double) 1738;
      doubleArray0[6] = (double) 1738;
      // Undeclared exception!
      gaussianFitter0.fit(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint1.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint1.getY(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.0, 0.0, 2.2250738585072014E-306);
      assertEquals(0.0, weightedObservedPoint2.getX(), 0.01);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint2.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint2.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(657.9697, 2.2250738585072014E-306, (-1.127380591676659));
      assertEquals(2.2250738585072014E-306, weightedObservedPoint3.getX(), 0.01);
      assertEquals(657.9697, weightedObservedPoint3.getWeight(), 0.01);
      assertEquals((-1.127380591676659), weightedObservedPoint3.getY(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.0, (-763.7228800335), (-606.9911591));
      assertEquals(0.0, weightedObservedPoint4.getWeight(), 0.01);
      assertEquals((-606.9911591), weightedObservedPoint4.getY(), 0.01);
      assertEquals((-763.7228800335), weightedObservedPoint4.getX(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(5, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(5, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GaussianFitter gaussianFitter0 = new GaussianFitter((DifferentiableMultivariateVectorialOptimizer) null);
      assertNotNull(gaussianFitter0);
      
      double[] doubleArray1 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(5, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(5, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0, 2251.0, 2014.7608241094258);
      assertEquals(0.0, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(2251.0, weightedObservedPoint0.getX(), 0.01);
      assertEquals(2014.7608241094258, weightedObservedPoint0.getY(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.19999954104423523, (-1598.725994), 657.9697);
      assertEquals(657.9697, weightedObservedPoint1.getY(), 0.01);
      assertEquals(0.19999954104423523, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals((-1598.725994), weightedObservedPoint1.getX(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[3];
      weightedObservedPointArray0[0] = weightedObservedPoint1;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(2014.7608241094258, 657.9697, 0.1428571343421936);
      assertEquals(0.1428571343421936, weightedObservedPoint2.getY(), 0.01);
      assertEquals(657.9697, weightedObservedPoint2.getX(), 0.01);
      assertEquals(2014.7608241094258, weightedObservedPoint2.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(3, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(3, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {2014.7608241094258, 2251.0, 1634.8281059198318}, doubleArray0, 0.01);
      
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertNotNull(gaussianFitter0);
      
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(36);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(36, 938.1477912286568, 36);
      assertEquals(36.0, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(36.0, weightedObservedPoint0.getY(), 0.01);
      assertEquals(938.1477912286568, weightedObservedPoint0.getX(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(36, 36, (-246.14));
      assertEquals(36.0, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(36.0, weightedObservedPoint1.getX(), 0.01);
      assertEquals((-246.14), weightedObservedPoint1.getY(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(4, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(4, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {36.0, 938.1477912286568, 383.1068930860914}, doubleArray0, 0.01);
      
      MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 36, unitSphereRandomVectorGenerator0);
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getEvaluations());
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartDifferentiableMultivariateVectorialOptimizer0);
      
      GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getEvaluations());
      assertEquals(0, multiStartDifferentiableMultivariateVectorialOptimizer0.getMaxEvaluations());
      assertNotNull(gaussianFitter0);
      
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint1.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint1.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint1.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(548.62144463277, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint2.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint2.getX(), 0.01);
      assertEquals(548.62144463277, weightedObservedPoint2.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(3245.60803376, 1.5, 2.2250738585072014E-306);
      assertEquals(3245.60803376, weightedObservedPoint3.getWeight(), 0.01);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint3.getY(), 0.01);
      assertEquals(1.5, weightedObservedPoint3.getX(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint((-533.471497309), 2.2250738585072014E-306, (-3195.060123243221));
      assertEquals(2.2250738585072014E-306, weightedObservedPoint4.getX(), 0.01);
      assertEquals((-533.471497309), weightedObservedPoint4.getWeight(), 0.01);
      assertEquals((-3195.060123243221), weightedObservedPoint4.getY(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(5, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try { 
        gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-1369.49212), (-1369.49212), (-1369.49212));
      assertEquals((-1369.49212), weightedObservedPoint0.getWeight(), 0.01);
      assertEquals((-1369.49212), weightedObservedPoint0.getY(), 0.01);
      assertEquals((-1369.49212), weightedObservedPoint0.getX(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 1.0737418286937265E9, (-1598.725994));
      assertEquals(0.0, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(1.0737418286937265E9, weightedObservedPoint1.getX(), 0.01);
      assertEquals((-1598.725994), weightedObservedPoint1.getY(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-1239.0148073278451), Double.POSITIVE_INFINITY, 54.005);
      assertEquals(54.005, weightedObservedPoint2.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint2.getX(), 0.01);
      assertEquals((-1239.0148073278451), weightedObservedPoint2.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      weightedObservedPointArray0[0] = weightedObservedPoint1;
      weightedObservedPointArray0[1] = weightedObservedPoint2;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      weightedObservedPointArray0[5] = weightedObservedPoint2;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(6, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try { 
        gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[3];
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(3307.241833902, 0.0, 3307.241833902);
      assertEquals(3307.241833902, weightedObservedPoint0.getY(), 0.01);
      assertEquals(3307.241833902, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(3, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try { 
        gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[3];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(2015.9, 2015.9, (-1598.725994));
      assertEquals(2015.9, weightedObservedPoint0.getX(), 0.01);
      assertEquals((-1598.725994), weightedObservedPoint0.getY(), 0.01);
      assertEquals(2015.9, weightedObservedPoint0.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(1939.869, 2692.628780104, 2692.628780104);
      assertEquals(2692.628780104, weightedObservedPoint1.getY(), 0.01);
      assertEquals(1939.869, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(2692.628780104, weightedObservedPoint1.getX(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.1428571343421936, 279.4846, 0.1428571343421936);
      assertEquals(279.4846, weightedObservedPoint2.getX(), 0.01);
      assertEquals(0.1428571343421936, weightedObservedPoint2.getY(), 0.01);
      assertEquals(0.1428571343421936, weightedObservedPoint2.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(3, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try { 
        gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-1301.9098394517), 0.0);
      assertEquals((-1301.9098394517), weightedObservedPoint0.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-1.0), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getY(), 0.01);
      assertEquals((-1.0), weightedObservedPoint1.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.0, 5589.041195412064, 5589.041195412064);
      assertEquals(0.0, weightedObservedPoint2.getWeight(), 0.01);
      assertEquals(5589.041195412064, weightedObservedPoint2.getY(), 0.01);
      assertEquals(5589.041195412064, weightedObservedPoint2.getX(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(5589.041195412064, Double.POSITIVE_INFINITY, 0.0);
      assertEquals(0.0, weightedObservedPoint3.getY(), 0.01);
      assertEquals(5589.041195412064, weightedObservedPoint3.getWeight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint3.getX(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint((-1.0), (-1970.0), 0.0);
      assertEquals(0.0, weightedObservedPoint4.getY(), 0.01);
      assertEquals((-1.0), weightedObservedPoint4.getWeight(), 0.01);
      assertEquals((-1970.0), weightedObservedPoint4.getX(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint((-1301.9098394517), (-1301.9098394517), 548.62144463277);
      assertEquals((-1301.9098394517), weightedObservedPoint5.getWeight(), 0.01);
      assertEquals(548.62144463277, weightedObservedPoint5.getY(), 0.01);
      assertEquals((-1301.9098394517), weightedObservedPoint5.getX(), 0.01);
      assertNotNull(weightedObservedPoint5);
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint(0.0, 0.0, (-1970.0));
      assertEquals(0.0, weightedObservedPoint6.getWeight(), 0.01);
      assertEquals((-1970.0), weightedObservedPoint6.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint6.getX(), 0.01);
      assertNotNull(weightedObservedPoint6);
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint3));
      
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint((-2.0), (-1301.9098394517), Double.POSITIVE_INFINITY);
      assertEquals((-2.0), weightedObservedPoint7.getWeight(), 0.01);
      assertEquals((-1301.9098394517), weightedObservedPoint7.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint7.getY(), 0.01);
      assertNotNull(weightedObservedPoint7);
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint6));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[7] = weightedObservedPoint7;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(8, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(8, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1301.9098394517), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      double[] doubleArray1 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(8, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1301.9098394517), Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser1 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(8, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser1);
      assertFalse(gaussianFitter_ParameterGuesser1.equals((Object)gaussianFitter_ParameterGuesser0));
      
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = null;
      try {
        multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, (-2232), unitSphereRandomVectorGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,232 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.optimization.BaseMultiStartMultivariateVectorialOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-1903.0), (-2338.2701651));
      assertEquals((-2338.2701651), weightedObservedPoint0.getY(), 0.01);
      assertEquals((-1903.0), weightedObservedPoint0.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-1903.0), (-2338.2701651), Double.POSITIVE_INFINITY);
      assertEquals((-1903.0), weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getY(), 0.01);
      assertEquals((-2338.2701651), weightedObservedPoint1.getX(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(467.255, (-2338.2701651), 0.0);
      assertEquals(467.255, weightedObservedPoint2.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint2.getY(), 0.01);
      assertEquals((-2338.2701651), weightedObservedPoint2.getX(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.0, (-1903.0), 0.0);
      assertEquals((-1903.0), weightedObservedPoint3.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint3.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint3.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[4] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(1931.362, 1920.5418934164643, (-1903.0));
      assertEquals((-1903.0), weightedObservedPoint4.getY(), 0.01);
      assertEquals(1931.362, weightedObservedPoint4.getWeight(), 0.01);
      assertEquals(1920.5418934164643, weightedObservedPoint4.getX(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      
      weightedObservedPointArray0[5] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint((-2338.2701651), (-2303.3370792385), 467.255);
      assertEquals((-2338.2701651), weightedObservedPoint5.getWeight(), 0.01);
      assertEquals(467.255, weightedObservedPoint5.getY(), 0.01);
      assertEquals((-2303.3370792385), weightedObservedPoint5.getX(), 0.01);
      assertNotNull(weightedObservedPoint5);
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[6] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint6.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint6.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint6.getX(), 0.01);
      assertNotNull(weightedObservedPoint6);
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint3));
      
      weightedObservedPointArray0[7] = weightedObservedPoint6;
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint(1920.5418934164643, 1931.362, (-1212.45437));
      assertEquals(1931.362, weightedObservedPoint7.getX(), 0.01);
      assertEquals((-1212.45437), weightedObservedPoint7.getY(), 0.01);
      assertEquals(1920.5418934164643, weightedObservedPoint7.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint7);
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint6));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[8] = weightedObservedPoint7;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(9, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(9, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-2338.2701651), 1813.1458385151823}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-1903.0), (-2338.2701651));
      assertEquals((-1903.0), weightedObservedPoint0.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals((-2338.2701651), weightedObservedPoint0.getY(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-1903.0), (-2338.2701651), Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getY(), 0.01);
      assertEquals((-1903.0), weightedObservedPoint1.getWeight(), 0.01);
      assertEquals((-2338.2701651), weightedObservedPoint1.getX(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(467.255, (-2338.2701651), 0.0);
      assertEquals((-2338.2701651), weightedObservedPoint2.getX(), 0.01);
      assertEquals(467.255, weightedObservedPoint2.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint2.getY(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1920.5418934164643, 0.0, (-1903.0));
      assertEquals((-1903.0), weightedObservedPoint3.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint3.getX(), 0.01);
      assertEquals(1920.5418934164643, weightedObservedPoint3.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.0, (-1903.0), 0.0);
      assertEquals((-1903.0), weightedObservedPoint4.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint4.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint4.getY(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint(1931.362, 1920.5418934164643, (-1903.0));
      assertEquals(1931.362, weightedObservedPoint5.getWeight(), 0.01);
      assertEquals(1920.5418934164643, weightedObservedPoint5.getX(), 0.01);
      assertEquals((-1903.0), weightedObservedPoint5.getY(), 0.01);
      assertNotNull(weightedObservedPoint5);
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint((-2338.2701651), (-2303.3370792385), 467.255);
      assertEquals((-2338.2701651), weightedObservedPoint6.getWeight(), 0.01);
      assertEquals(467.255, weightedObservedPoint6.getY(), 0.01);
      assertEquals((-2303.3370792385), weightedObservedPoint6.getX(), 0.01);
      assertNotNull(weightedObservedPoint6);
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint4));
      
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint7.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint7.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint7.getX(), 0.01);
      assertNotNull(weightedObservedPoint7);
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint6));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint4));
      
      weightedObservedPointArray0[7] = weightedObservedPoint7;
      WeightedObservedPoint weightedObservedPoint8 = new WeightedObservedPoint(1920.5418934164643, 1931.362, (-1212.45437));
      assertEquals((-1212.45437), weightedObservedPoint8.getY(), 0.01);
      assertEquals(1931.362, weightedObservedPoint8.getX(), 0.01);
      assertEquals(1920.5418934164643, weightedObservedPoint8.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint8);
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint7));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint6));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[8] = weightedObservedPoint8;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(9, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(9, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-2338.2701651), 1813.1458385151823}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-809.81113806), (-809.81113806), 1.0);
      assertEquals(1.0, weightedObservedPoint0.getY(), 0.01);
      assertEquals((-809.81113806), weightedObservedPoint0.getX(), 0.01);
      assertEquals((-809.81113806), weightedObservedPoint0.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 427.0, (-809.81113806));
      assertEquals(427.0, weightedObservedPoint1.getX(), 0.01);
      assertEquals((-809.81113806), weightedObservedPoint1.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint1.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-809.81113806), (-809.81113806), 0.0);
      assertEquals((-809.81113806), weightedObservedPoint2.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint2.getY(), 0.01);
      assertEquals((-809.81113806), weightedObservedPoint2.getX(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.0, 2384.3291478, (-1.0));
      assertEquals((-1.0), weightedObservedPoint3.getY(), 0.01);
      assertEquals(2384.3291478, weightedObservedPoint3.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint3.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.0, 0.0, (-2775.0402083187));
      assertEquals((-2775.0402083187), weightedObservedPoint4.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint4.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint4.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint(1.0, 1.0, (-1523.57));
      assertEquals(1.0, weightedObservedPoint5.getWeight(), 0.01);
      assertEquals(1.0, weightedObservedPoint5.getX(), 0.01);
      assertEquals((-1523.57), weightedObservedPoint5.getY(), 0.01);
      assertNotNull(weightedObservedPoint5);
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint(0.0, 2619.74824907, (-1243.1452));
      assertEquals(2619.74824907, weightedObservedPoint6.getX(), 0.01);
      assertEquals((-1243.1452), weightedObservedPoint6.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint6.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint6);
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint(0.0, 6.283185307179586, 427.0);
      assertEquals(427.0, weightedObservedPoint7.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint7.getWeight(), 0.01);
      assertEquals(6.283185307179586, weightedObservedPoint7.getX(), 0.01);
      assertNotNull(weightedObservedPoint7);
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint6));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint3));
      
      weightedObservedPointArray0[7] = weightedObservedPoint7;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(8, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(8, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {427.0, 6.283185307179586, 30.629012445774954}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1867.178697, 1867.178697, 1867.178697);
      assertEquals(1867.178697, weightedObservedPoint0.getX(), 0.01);
      assertEquals(1867.178697, weightedObservedPoint0.getY(), 0.01);
      assertEquals(1867.178697, weightedObservedPoint0.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(1867.178697, 1867.178697, 1867.178697);
      assertEquals(1867.178697, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(1867.178697, weightedObservedPoint1.getX(), 0.01);
      assertEquals(1867.178697, weightedObservedPoint1.getY(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(1.0, 1.0, 0.0);
      assertEquals(1.0, weightedObservedPoint2.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint2.getY(), 0.01);
      assertEquals(1.0, weightedObservedPoint2.getX(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1.0, 1.0, 0.0);
      assertEquals(1.0, weightedObservedPoint3.getWeight(), 0.01);
      assertEquals(1.0, weightedObservedPoint3.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint3.getY(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(1867.178697, 0.5, 1867.178697);
      assertEquals(1867.178697, weightedObservedPoint4.getWeight(), 0.01);
      assertEquals(1867.178697, weightedObservedPoint4.getY(), 0.01);
      assertEquals(0.5, weightedObservedPoint4.getX(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint5.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint5.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint5.getY(), 0.01);
      assertNotNull(weightedObservedPoint5);
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint5.equals((Object)weightedObservedPoint3));
      
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint(1867.178697, 1867.178697, 1.0);
      assertEquals(1.0, weightedObservedPoint6.getY(), 0.01);
      assertEquals(1867.178697, weightedObservedPoint6.getX(), 0.01);
      assertEquals(1867.178697, weightedObservedPoint6.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint6);
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint6.equals((Object)weightedObservedPoint4));
      
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint(0.0, 0.0, 1.0);
      assertEquals(0.0, weightedObservedPoint7.getWeight(), 0.01);
      assertEquals(1.0, weightedObservedPoint7.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint7.getX(), 0.01);
      assertNotNull(weightedObservedPoint7);
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint6));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint7.equals((Object)weightedObservedPoint4));
      
      weightedObservedPointArray0[7] = weightedObservedPoint7;
      WeightedObservedPoint weightedObservedPoint8 = new WeightedObservedPoint((-1.0), 0.0, 4317.261769768697);
      assertEquals(4317.261769768697, weightedObservedPoint8.getY(), 0.01);
      assertEquals(0.0, weightedObservedPoint8.getX(), 0.01);
      assertEquals((-1.0), weightedObservedPoint8.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint8);
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint5));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint4));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint7));
      assertFalse(weightedObservedPoint8.equals((Object)weightedObservedPoint6));
      
      weightedObservedPointArray0[8] = weightedObservedPoint8;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(9, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertEquals(9, weightedObservedPointArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {4317.261769768697, 0.0, 0.1870724598774019}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[20];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      assertEquals(0.0, weightedObservedPoint1.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint1.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint1.getY(), 0.01);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.0, 0.0, 2.2250738585072014E-306);
      assertEquals(0.0, weightedObservedPoint2.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint2.getWeight(), 0.01);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint2.getY(), 0.01);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(657.9697, 2.2250738585072014E-306, 2.2250738585072014E-306);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint3.getY(), 0.01);
      assertEquals(2.2250738585072014E-306, weightedObservedPoint3.getX(), 0.01);
      assertEquals(657.9697, weightedObservedPoint3.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint3);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.0, (-763.7228800335), (-606.9911591));
      assertEquals((-606.9911591), weightedObservedPoint4.getY(), 0.01);
      assertEquals((-763.7228800335), weightedObservedPoint4.getX(), 0.01);
      assertEquals(0.0, weightedObservedPoint4.getWeight(), 0.01);
      assertNotNull(weightedObservedPoint4);
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint3));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint4.equals((Object)weightedObservedPoint2));
      
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertEquals(20, weightedObservedPointArray0.length);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try { 
        gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.0, 0.0, 2.2250738585072014E-306);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(657.9697, 2.2250738585072014E-306, 2.2250738585072014E-306);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.0, (-763.7228800335), (-606.9911591));
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {2.2250738585072014E-306, 0.0, 324.32324569560154}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, (-789.672068764));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-206.58), 0.0, 0.0);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.0, (-1239.0148073278451), 0.0);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(2.0, 0.0, 0.0);
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint(1441.5435851496989, 0.0, 917.6761);
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint((-206.58), 0.0, 11.796);
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {917.6761, 0.0, 526.1611433715992}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      int int0 = 24;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(24);
      MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 24, unitSphereRandomVectorGenerator0);
      GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[2];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-2425.771751788864), 888.258266, (-4906.131376965713));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(2007.19196, (-350.3918), 2007.19196);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser((WeightedObservedPoint[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null is not allowed: input array
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-25.30430841085077), 1644.67804, 1.225743062930824E-8);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-763.7228800335), 2.2250738585072014E-306, (-3364.354744516677));
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser((WeightedObservedPoint[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null is not allowed: input array
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, 2.2250738585072014E-306);
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      GaussianFitter gaussianFitter0 = new GaussianFitter((DifferentiableMultivariateVectorialOptimizer) null);
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(9);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(jDKRandomGenerator0);
      GaussianFitter gaussianFitter0 = new GaussianFitter((DifferentiableMultivariateVectorialOptimizer) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        gaussianFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.fitting.CurveFitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 186.1939676607, 0.0);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(186.1939676607, 0.0, 0.0);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.0, (-1.0), (-1.0));
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.0, 3111.4438, 0.0);
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint(186.1939676607, 0.0, 0.0);
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((VectorialPointValuePair) null).when(differentiableMultivariateVectorialOptimizer0).optimize(anyInt() , any(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      doReturn(0).when(differentiableMultivariateVectorialOptimizer0).getEvaluations();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
      MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 1, unitSphereRandomVectorGenerator0);
      GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 186.1939676607;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3111.4438;
      doubleArray0[3] = 4819.3021;
      doubleArray0[4] = 3111.4438;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      // Undeclared exception!
      try { 
        gaussianFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.BaseMultiStartMultivariateVectorialOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[3];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(2015.9, 2015.9, (-1598.725994));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-1598.725994), 0.0, (-1598.725994));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(3307.241833902, 0.0, 3307.241833902);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      gaussianFitter_ParameterGuesser0.guess();
      gaussianFitter_ParameterGuesser0.guess();
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {3307.241833902, 0.0, 288.55095903122736}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[2];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(Double.POSITIVE_INFINITY, (-2570.0), (-2570.0));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(5088.21484748828, 0.0, 5088.21484748828);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.0, 0.0, 0.0);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      double double0 = 1.0E-9;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint((-3018.74204), 1.0E-9, 0.0);
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
      int int0 = (-633066204);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-633066204);
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator((RandomGenerator) null);
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, uniformRandomGenerator0);
      MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = null;
      try {
        multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, (-633066204), uncorrelatedRandomVectorGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -633,066,204 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.optimization.BaseMultiStartMultivariateVectorialOptimizer", e);
      }
  }
}
